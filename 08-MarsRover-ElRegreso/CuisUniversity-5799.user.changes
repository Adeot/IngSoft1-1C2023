

----QUIT----(12 May 2023 17:49:00) CuisUniversity-5799.image priorSource: 4801971!

----STARTUP---- (12 May 2023 17:49:01) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5799.image!


----QUIT----(12 May 2023 17:49:01) CuisUniversity-5799.image priorSource: 9222569!

----STARTUP---- (22 May 2023 21:18:49) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5799.image!


----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\06-Portfolio1\Portfolio1-Solucion\Portfolio-Solucion.st----!

AccountTransaction subclass: #Transaction
	instanceVariableNames: 'value recipient sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transaction category: 'Portfolio-Solucion' stamp: 'AF 5/22/2023 21:21:00'!
AccountTransaction subclass: #Transaction
	instanceVariableNames: 'value recipient sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transaction class methodsFor: 'nil' stamp: 'AF 5/22/2023 21:24:16'!
newFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	^(aValue <0) ifTrue: [self error: (self invalidTransactionAmount)] 
	ifFalse: [(self new) initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue]! !
!Transaction class methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:24:55'!
invalidTransactionAmount
	^'The value must be a positive number in order to be a valid transaction'.! !
!Transaction methodsFor: 'nil' stamp: 'AF 5/22/2023 21:25:39'!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .! !

TestCase subclass: #TransactionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionsTest category: 'Portfolio-Solucion' stamp: 'AF 5/22/2023 21:26:37'!
TestCase subclass: #TransactionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionsTest methodsFor: 'nil' stamp: 'AF 5/22/2023 21:28:37'!
test01aTransactionCantHaveNegativeValue
	| recipientAccount senderAccount transaction1 |
	senderAccount := ReceptiveAccount new.
	recipientAccount := ReceptiveAccount new.

	transaction1 := Transaction newFrom: senderAccount  to: recipientAccount withValue: 100.
	! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:28:45' prior: 50620639!
test01aTransactionCantHaveNegativeValue
	| recipientAccount senderAccount transaction1 |
	senderAccount := ReceptiveAccount new.
	recipientAccount := ReceptiveAccount new.

	transaction1 := Transaction newFrom: senderAccount  to: recipientAccount withValue: -100.
	! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:30:49' prior: 50620651!
test01aTransactionCantHaveNegativeValue
	| recipientAccount senderAccount invalidOperation |
	senderAccount := ReceptiveAccount new.
	recipientAccount := ReceptiveAccount new.

	invalidOperation := [Transaction newFrom: senderAccount  to: recipientAccount withValue: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transaction invalidTransactionAmount equals: anError messageText. ]! !

!testRun: #TransactionsTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/22/2023 21:30:54'!
PASSED!

!testRun: #TransactionsTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/22/2023 21:30:54'!
PASSED!
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:32:06' overrides: 16961394!
setUp
	| recipientAccount senderAccount transaction1 |
	senderAccount := ReceptiveAccount new.
	recipientAccount := ReceptiveAccount new.
	
	transaction1 := Transaction newFrom: senderAccount  to: recipientAccount withValue: 100.
	! !

!classDefinition: #TransactionsTest category: 'Portfolio-Solucion' stamp: 'AF 5/22/2023 21:32:47'!
TestCase subclass: #TransactionsTest
	instanceVariableNames: 'senderAccount1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionsTest category: 'Portfolio-Solucion' stamp: 'AF 5/22/2023 21:32:48'!
TestCase subclass: #TransactionsTest
	instanceVariableNames: 'senderAccount1 recipientAccount1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:32:53' prior: 50620688 overrides: 16961394!
setUp
	senderAccount1 := ReceptiveAccount new.
	recipientAccount1 := ReceptiveAccount new.
		! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:33:20' prior: 50620663!
test01aTransactionCantHaveNegativeValue
	| invalidOperation |

	invalidOperation := [Transaction newFrom: senderAccount1  to: recipientAccount1 withValue: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transaction invalidTransactionAmount equals: anError messageText. ]! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:33:26' prior: 50620723!
test01aTransactionCantHaveNegativeValue
	
	| invalidOperation |
	invalidOperation := [Transaction newFrom: senderAccount1  to: recipientAccount1 withValue: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transaction invalidTransactionAmount equals: anError messageText. ]! !
!Transaction class methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:33:46' prior: 50620603!
newFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	^(aValue <= 0) ifTrue: [self error: (self invalidTransactionAmount)] 
	ifFalse: [(self new) initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue]! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:35:39'!
test02aTransactionModifiesBalanceOfItsAccounts
	
	| transaction1 |
	transaction1 := Transaction newFrom: senderAccount1  to: recipientAccount1 withValue: 50.
	
	self assert: -50 equals: (senderAccount1 balance).
	self assert: 50 equals: (recipientAccount1 balance).! !

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:35:42'!
FAILURE!
!Transaction methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:36:27' prior: 50620619!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/22/2023 21:40:28'!
transferMoneyTo: aReceptiveAccount anAmountOf: aValue
^self.
	! !

----SNAPSHOT----(22 May 2023 21:42:51) CuisUniversity-5799.image priorSource: 9222790!

!classRenamed: #Transaction as: #Transfer stamp: 'AF 5/22/2023 21:50:18'!
Smalltalk renameClassNamed: #Transaction as: #Transfer!
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:50:18' prior: 50620737!
test01aTransactionCantHaveNegativeValue
	
	| invalidOperation |
	invalidOperation := [Transfer newFrom: senderAccount1  to: recipientAccount1 withValue: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transfer invalidTransactionAmount equals: anError messageText. ]! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:50:18' prior: 50620761!
test02aTransactionModifiesBalanceOfItsAccounts
	
	| transaction1 |
	transaction1 := Transfer newFrom: senderAccount1  to: recipientAccount1 withValue: 50.
	
	self assert: -50 equals: (senderAccount1 balance).
	self assert: 50 equals: (recipientAccount1 balance).! !

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:50:37'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:52:04' prior: 50620777!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	Withdraw register: aValue on: aSenderAccount.
	Deposit register: aValue on: aRecipientAccount .
! !

!testRun: #TransactionsTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/22/2023 21:52:06'!
PASSED!

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:52:06'!
PASSED!

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:52:13'!
PASSED!

!testRun: #TransactionsTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/22/2023 21:52:17'!
PASSED!

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:52:17'!
PASSED!

!classRenamed: #TransactionsTest as: #TransFERTest stamp: 'AF 5/22/2023 21:52:27'!
Smalltalk renameClassNamed: #TransactionsTest as: #TransFERTest!

!classRenamed: #TransFERTest as: #TransferTest stamp: 'AF 5/22/2023 21:52:35'!
Smalltalk renameClassNamed: #TransFERTest as: #TransferTest!

----SNAPSHOT----(22 May 2023 21:58:14) CuisUniversity-5799.image priorSource: 9252449!

Object subclass: #Transfer
	instanceVariableNames: 'value recipient sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AF 5/24/2023 18:47:00'!
Object subclass: #Transfer
	instanceVariableNames: 'value recipient sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/24/2023 18:49:52' prior: 50620827!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	"aSenderAccount vosRegistraQueSosSenderDeMi: self."
	Withdraw register: aValue on: aSenderAccount.
	Deposit register: aValue on: aRecipientAccount .
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:11:38'!
sender
	^sender.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:12:03'!
recipient
	^recipient.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:12:04'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:12:04'!
PASSED!

AccountTransaction subclass: #TransferRecipient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRecipient category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 12:13:59'!
AccountTransaction subclass: #TransferRecipient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferSender category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 12:14:04'!
AccountTransaction subclass: #TransferSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferRecipient class methodsFor: 'nil' stamp: 'AF 5/26/2023 12:17:23'!
for: aTransfer
	^ self new initializeFor: aTransfer! !
!TransferSender class methodsFor: 'nil' stamp: 'AF 5/26/2023 12:17:30'!
for: aTransfer
	^ self new initializeFor: aTransfer! !

AccountTransaction subclass: #TransferRecipient
	instanceVariableNames: 'fromTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRecipient category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 12:18:11'!
AccountTransaction subclass: #TransferRecipient
	instanceVariableNames: 'fromTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferRecipient methodsFor: 'nil' stamp: 'AF 5/26/2023 12:18:44'!
initializeFor: aTransfer

	fromTransfer = aTransfer.! !

!classDefinition: #TransferSender category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 12:18:52'!
AccountTransaction subclass: #TransferSender
	instanceVariableNames: 'fromTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferSender methodsFor: 'nil' stamp: 'AF 5/26/2023 12:18:50'!
initializeFor: aTransfer

	fromTransfer = aTransfer.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:19:15'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:19:15'!
PASSED!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:41:02' overrides: 50620489!
affectBalance: aBalance

	^fromTransfer affectBalanceFromRecipient: aBalance.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:41:38' overrides: 50620489!
affectBalance: aBalance

	^fromTransfer affectBalanceFromSender: aBalance.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:43:30'!
affectBalanceFromRecipient: aBalance
	^aBalance + value .
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:43:43'!
affectBalanceFromSender: aBalance
	^aBalance - value .
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:45:04' prior: 50620881!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	
	"aSenderAccount vosRegistraQueSosSenderDeMi: self."
	"Withdraw register: aValue on: aSenderAccount.
	Deposit register: aValue on: aRecipientAccount ."
! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'AF 5/26/2023 12:50:22'!
registerFromTransfer: aTransfer on: account

	| transaction |
	transaction := self for: aTransfer.
	account register: transaction.	
	^ transaction! !

!methodRemoval: AccountTransaction class #registerFromTransfer:on: stamp: 'AF 5/26/2023 12:51:19'!
registerFromTransfer: aTransfer on: account

	| transaction |
	transaction := self for: aTransfer.
	account register: transaction.	
	^ transaction!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'AF 5/26/2023 12:51:45' prior: 50620503!
register: aValueOrTransfer on: account

	| transaction |
	
	transaction := self for: aValueOrTransfer.
	account register: transaction.
		
	^ transaction! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:53:06' prior: 50621058!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	
	"aSenderAccount vosRegistraQueSosSenderDeMi: self."
	TransferSender register: self on: aSenderAccount.
	TransferRecipient register: self on: aRecipientAccount .
! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:53:10'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:53:10'!
ERROR!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:53:10'!
ERROR!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:55:12'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:55:24'!
ERROR!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:55:24'!
ERROR!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:56:05' prior: 50620955!
initializeFor: aTransfer

	fromTransfer := aTransfer.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:56:15' prior: 50620967!
initializeFor: aTransfer

	fromTransfer := aTransfer.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:56:28'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:56:28'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 12:59:14' prior: 50620785!
transferMoneyTo: aReceptiveAccount anAmountOf: aValue
	Transfer newFrom: self  to: aReceptiveAccount withValue: aValue
	^self.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 12:59:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 12:59:16'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:00:41' prior: 50620798!
test01aTransactionCantHaveNegativeValue
	
	| invalidOperation |
	invalidOperation := [senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transfer invalidTransactionAmount equals: anError messageText. ]! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:00:42'!
FAILURE!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:01:17'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:01:33' prior: 50621146!
transferMoneyTo: aReceptiveAccount anAmountOf: aValue
	^Transfer newFrom: self  to: aReceptiveAccount withValue: aValue.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:01:38'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:01:38'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:02:06' prior: 50620812!
test02aTransactionModifiesBalanceOfItsAccounts
	
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	
	self assert: -50 equals: (senderAccount1 balance).
	self assert: 50 equals: (recipientAccount1 balance).! !

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:02:07'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:02:07'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:02:07'!
PASSED!

!methodRemoval: AccountTransaction #value stamp: 'AF 5/26/2023 13:04:18'!
value 

	self subclassResponsibility !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:04:27'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:04:27'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:04:30'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:04:30'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:05:25'!
test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts
	
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.

	
	self assert: -50 equals: (senderAccount1 balance).
	self assert: 50 equals: (recipientAccount1 balance).! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:06:11' prior: 50621095!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .

	TransferSender register: self on: aSenderAccount.
	TransferRecipient register: self on: aRecipientAccount .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:08:00' prior: 50621362!
test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts
	
	| deposit1 withdraw1 |
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	
	self assert: 60 equals: (senderAccount1 balance).
	self assert: 30 equals: (recipientAccount1 balance).! !

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:08:06'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:08:07'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:08:07'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:08:07'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:09:31' prior: 50621373!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .

	TransferSender register: self on: aSenderAccount.
	TransferRecipient register: self on: aRecipientAccount .
	^self.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:10:29'!
test04anAccountHasRegisteredItsTransfer
	
	| deposit1 withdraw1 |
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	
	self assert: 60 equals: (senderAccount1 balance).
	self assert: 30 equals: (recipientAccount1 balance).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:12:23'!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	
	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: transfer1).! !

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:12:28'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:13:15' prior: 50621441!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	self halt.
	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: transfer1).! !

----SNAPSHOT----(26 May 2023 13:20:04) CuisUniversity-5799.image priorSource: 9254844!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:22:56' prior: 50621129!
initializeFor: aTransfer

	fromTransfer := aTransfer.
	aTransfer transferRecipientTransactionIs: self.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:23:13' prior: 50621134!
initializeFor: aTransfer

	fromTransfer := aTransfer.
	aTransfer transferRecipientSenderIs: self.! !

Object subclass: #Transfer
	instanceVariableNames: 'value recipient sender transferRecipientTransaction transferSenderTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 13:23:51'!
Object subclass: #Transfer
	instanceVariableNames: 'value recipient sender transferRecipientTransaction transferSenderTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:24:51'!
transferRecipientTransactionIs: aTransferRecipient.
	transferRecipientTransaction := aTransferRecipient .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:25:38'!
transferSenderTransactionIs: aTransferSenderTransaction.
	transferSenderTransaction := aTransferSenderTransaction.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:25:39'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:25:39'!
ERROR!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:25:39'!
ERROR!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransfer stamp: 'AF 5/26/2023 13:25:39'!
ERROR!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:25:39'!
ERROR!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:25:55'!
ERROR!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:25:55'!
ERROR!
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:26:33' prior: 50621487!
initializeFor: aTransfer

	fromTransfer := aTransfer.
	aTransfer transferSenderTransactionIs: self.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:26:38'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:26:38'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:26:38'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransfer stamp: 'AF 5/26/2023 13:26:39'!
PASSED!

!methodRemoval: TransferTest #test04anAccountHasRegisteredItsTransfer stamp: 'AF 5/26/2023 13:26:55'!
test04anAccountHasRegisteredItsTransfer
	
	| deposit1 withdraw1 |
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	
	self assert: 60 equals: (senderAccount1 balance).
	self assert: 30 equals: (recipientAccount1 balance).!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:26:58'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:27:33'!
transferSender
	^transferSenderTransaction! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:27:46'!
transferRecipient
	^transferRecipientTransaction! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:28:41' prior: 50621461!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	self halt.
	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: (transfer1 transferSender )).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:28:51' prior: 50621595!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.

	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: (transfer1 transferSender )).! !

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:28:53'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:28:53'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:28:53'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:28:53'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:28:53'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:29:43' prior: 50621612!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.

	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: (transfer1 transferSender )).
	self deny: (senderAccount1 hasRegistered: withdraw1 ).
	self deny: (senderAccount1 hasRegistered: (transfer1 transferRecipient )).! !

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:29:44'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:29:44'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:29:44'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:29:44'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:29:44'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:30:52' prior: 50621648!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.

	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: (transfer1 transferSender )).
	self deny: (senderAccount1 hasRegistered: withdraw1 ).
	self deny: (senderAccount1 hasRegistered: (transfer1 transferRecipient )).
	
	self deny: (recipientAccount1 hasRegistered: deposit1).
	self deny: (recipientAccount1 hasRegistered: (transfer1 transferSender )).
	self assert: (recipientAccount1 hasRegistered: withdraw1 ).
	self assert: (recipientAccount1 hasRegistered: (transfer1 transferRecipient )).! !

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:30:53'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:30:53'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:30:53'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:30:53'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:30:53'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:36:48'!
test05aSenderWithATransferCanKnowItsRecipient
	
	| transfer1 transferSenderTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferSenderTransaction1 := transfer1 transferSender.
	self assert: recipientAccount1 equals: (senderAccount1 recipientOfTransferSend: transferSenderTransaction1 ).
	! !

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:36:58'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:43:09'!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
	ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide reciever']! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:44:33'!
recipient
	^self.! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:44:58'!
sender
	^fromTransfer sender .! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:45:13'!
sender
	^self.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:45:42'!
recipient
	^fromTransfer recipient .! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:46:38' prior: 50621753!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
	ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide reciever'].
	aTransferSenderTransaction1 recipient .! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:46:43'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:46:43'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:46:43'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:46:43'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:46:43'!
FAILURE!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:46:43'!
FAILURE!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:48:05'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:49:55' prior: 50621736!
test05aSenderWithATransferCanKnowItsRecipient
	
	| transfer1 transferSenderTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferSenderTransaction1 := transfer1 transferSender.
	self assert: senderAccount1 equals: (senderAccount1 recipientOfTransferSend: transferSenderTransaction1 ).
	! !

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:49:56'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:50:09' prior: 50621823!
test05aSenderWithATransferCanKnowItsRecipient
	
	| transfer1 transferSenderTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferSenderTransaction1 := transfer1 transferSender.
	self assert:  recipientAccount1 equals: (senderAccount1 recipientOfTransferSend: transferSenderTransaction1 ).
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:50:28' prior: 50621783!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
	ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide reciever'].
	^aTransferSenderTransaction1 recipient .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:50:35'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:50:35'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:50:35'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:50:35'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:50:35'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:52:26'!
test06aRecipientWithATransferCanKnowItsSender
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	self assert: senderAccount1 equals: (senderAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:52:29'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:54:18'!
senderOfTransferRecipient: aTransferRecipientTransaction
	| aTransferRecipientTransaction1 |
	aTransferRecipientTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferRecipientTransaction)] 
	ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide sender'].
	^aTransferRecipientTransaction1 sender.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:54:29'!
ERROR!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:54:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:55:25'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:55:27'!
ERROR!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:55:27'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:56:18' prior: 50621932!
test06aRecipientWithATransferCanKnowItsSender
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	self assert: (recipientAccount1 hasRegistered: transferRecipientTransaction1).
	self assert: senderAccount1 equals: (senderAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:19'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:56:40' prior: 50622034!
test06aRecipientWithATransferCanKnowItsSender
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	self assert: (recipientAccount1 hasRegistered: transferRecipientTransaction1).
	self assert: senderAccount1 equals: (recipientAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:41'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:56:46' prior: 50622055!
test06aRecipientWithATransferCanKnowItsSender
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	self assert: senderAccount1 equals: (recipientAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:47'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:59:58' prior: 50621949!
senderOfTransferRecipient: aTransferRecipientTransaction
	| aTransferRecipientTransaction1 |
	aTransferRecipientTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferRecipientTransaction)] 
							ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide sender'].
	^aTransferRecipientTransaction1 sender.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 14:00:11' prior: 50621873!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
							ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide reciever'].
	^aTransferSenderTransaction1 recipient .! !
!ReceptiveAccount class methodsFor: 'nil' stamp: 'AF 5/26/2023 14:00:56'!
invalidRequestOfTransferInformation
^''! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 14:02:03' prior: 50622138!
senderOfTransferRecipient: aTransferRecipientTransaction
	| aTransferRecipientTransaction1 |
	aTransferRecipientTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferRecipientTransaction)] 
							ifNone: [^self error: ((self class) invalidRequestOfTransferInformation )].
	^aTransferRecipientTransaction1 sender.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:02:10' prior: 50622167!
invalidRequestOfTransferInformation
^'This Transfer was not made by this account, therefore cant provide sender'! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 14:02:47' prior: 50622153!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
							ifNone: [^self error: ((self class) invalidRequestOfTransferInformation )].
	^aTransferSenderTransaction1 recipient .! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:03:32' prior: 50622187!
invalidRequestOfTransferInformation
^'This Transfer was not made by this account, therefore cant provide sender nor reciever'! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 14:03:55'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:05:03'!
test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	
	self assert: senderAccount1 equals: (recipientAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:06:31' prior: 50622237!
test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs
	
	| transfer1 transferRecipientTransaction1 outsiderAccount |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	
	outsiderAccount := ReceptiveAccount new.
	
	self assert: senderAccount1 equals: (outsiderAccount senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs stamp: 'AF 5/26/2023 14:06:33'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:08:06' prior: 50622252!
test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs
	
	| transfer1 transferRecipientTransaction1 outsiderAccount |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	
	outsiderAccount := ReceptiveAccount new.
	
	self 
		should: [  (outsiderAccount senderOfTransferRecipient: transferRecipientTransaction1 )]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: ReceptiveAccount invalidRequestOfTransferInformation equals: anError messageText.]
	! !

!testRun: #TransferTest #test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

----SNAPSHOT----(26 May 2023 14:08:25) CuisUniversity-5799.image priorSource: 9274433!

cuenta1 := ReceptiveAccount new.
!

cuenta1 := ReceptiveAccount new.
cuenta2 := ReceptiveAccount new.
!

ReceptiveAccount allClassVarNames !

ReceptiveAccount allInstances !

ReceptiveAccount allInstances!

cuenta1 := ReceptiveAccount new.
cuenta2 := ReceptiveAccount new.!

ReceptiveAccount allInstances!

ReceptiveAccount allInstances!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:42:35' prior: 50621766!
recipient
	^fromTransfer recipient .! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:42:41' prior: 50621774!
sender
	^fromTransfer sender.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 15:42:46'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 15:43:58'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 15:44:09'!
Report subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 15:44:25'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'nil' stamp: 'AF 5/26/2023 15:47:04'!
test01aReportOfNewAccountIsOnlyBalance0
	| cuenta1 reporteCuenta1 |
	cuenta1 := ReceptiveAccount new.
	reporteCuenta1 := AccountReport new.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:48:20' prior: 50622405!
test01aReportOfNewAccountIsOnlyBalance0
	| cuenta1 reporteCuenta1 |
	cuenta1 := ReceptiveAccount new.
	reporteCuenta1 := AccountReport newOfAccount: cuenta1.
	self assert: 'Balance = 0' equals: reporteCuenta1 print.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:48:21'!
ERROR!
!AccountReport class methodsFor: 'nil' stamp: 'AF 5/26/2023 15:50:58'!
newOfAccount: anAccount
	^(self new) initializeReportOf: anAccount.! !

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 15:51:33'!
Report subclass: #AccountReport
	instanceVariableNames: 'accountToBeReported'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport methodsFor: 'nil' stamp: 'AF 5/26/2023 15:51:32'!
initializeReportOf: anAccount
	accountToBeReported := anAccount.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:51:35'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:51:35'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:51:42'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:51:42'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:52:08' overrides: 16902957!
print
	'Balance = 0'! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:52:10'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:52:10'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:52:29' prior: 50622413!
test01aReportOfNewAccountIsOnlyBalance0
	| cuenta1 reporteCuenta1 |
	cuenta1 := ReceptiveAccount new.
	reporteCuenta1 := AccountReport newOfAccount: cuenta1.
	self assert: 'Balance = 0' equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:52:30'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:52:57' prior: 50622458 overrides: 16902957!
print
	^'Balance = 0'.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:52:58'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:16:19'!
test02aReportCanContainTransactionsAndAffectsBalance
	| cuenta1 reporteCuenta1 withdraw1 |
	cuenta1 := ReceptiveAccount new.
	withdraw1 :=  Withdraw .
	reporteCuenta1 := AccountReport newOfAccount: cuenta1.
	self assert: 'Balance = 0' equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:17:21' prior: 50622490!
test02aReportCanContainTransactionsAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert: 'Balance = 0' equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:22:52' prior: 50622502!
test02aReportCanContainTransactionsAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:      'Depósito por 110.
				Extracción por 20.
				Balance = 90
				' 
		
	equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/26/2023 16:22:56'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:23:37' prior: 50622517!
test02aReportCanContainTransactionsAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:      'Depósito por 110. Extracción por 20. Balance = 90' 
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/26/2023 16:23:41'!
FAILURE!

ReceptiveAccount allInstances!

cuenta1 := ReceptiveAccount new.
cuenta2 := ReceptiveAccount new.
ReceptiveAccount allInstances!

cuenta1 := ReceptiveAccount new.
cuenta2 := ReceptiveAccount new.!

ReceptiveAccount allInstances!

ReceptiveAccount allInstances!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:25:10' prior: 50622483 overrides: 16902957!
print
	
	^'Balance = 0'.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 16:25:12'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/26/2023 16:25:12'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/26/2023 16:25:12'!
FAILURE!

ReceptiveAccount allInstances!

set1 := Set with: 1 with: 2 with: 4 with: 5!

set1 filter: [:elem | (elem > 3)]!

set1 select: [:elem | (elem > 3)]!

set1 select: [:elem | (elem > 3)]!

set1!

set1 select: [:elem | (elem > 3)] !

set1!

set1 select: [:elem | (elem > 3)] !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 17:21:27' prior: 50622566 overrides: 16902957!
print
	| transactionsFromAccount |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	^'Balance = 0'.! !

----SNAPSHOT----(26 May 2023 17:23:22) CuisUniversity-5799.image priorSource: 9301506!

----SNAPSHOT----(27 May 2023 23:26:03) CuisUniversity-5799.image priorSource: 9310349!

----STARTUP---- (29 May 2023 15:55:38) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5799.image!


!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 15:55:45'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 15:55:45'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 15:55:45'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 15:59:23' prior: 50622590 overrides: 16902957!
print
	| transactionsFromAccount lines |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	lines := OrderedCollection new.
	transactionsFromAccount do: [:aTransaction | lines add: (self printLineOf: aTransaction )].
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
	
	"^'Balance = 0'."! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 15:59:52'!
printLineOf: aTransaction 
^''.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 15:59:53'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 15:59:53'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 15:59:58'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 15:59:58'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:01:05' prior: 50622469!
test01aReportOfNewAccountIsOnlyBalance0
	| cuenta1 reporteCuenta1 |
	cuenta1 := ReceptiveAccount new.
	reporteCuenta1 := AccountReport newOfAccount: cuenta1.
	self assert: (OrderedCollection with: 'Balance = 0') equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:01:06'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:01:06'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:01:06'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:01:06'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:01:15'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:01:19'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:01:19'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:02:36' prior: 50622537!
test02aReportCanContainTransactionsAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' with: 'Balance = 90')
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:02:40'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:06:12' prior: 50622637!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^''].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^''].

	! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:06:17'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:06:17'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:06:17'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:07:59' prior: 50622712!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^'Depósito por'].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^''].

	! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:10:51' prior: 50622730!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^'Depósito por'].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^'Extracción por'].

	! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:11:42' prior: 50622738!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^'Depósito por ', aTransaction value asString].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^'Extracción por ', aTransaction value asString].

	! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:11:44'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:11:44'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:11:44'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:12:47' prior: 50622621 overrides: 16902957!
print
	| transactionsFromAccount lines |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	lines := OrderedCollection new.
	self halt.
	transactionsFromAccount do: [:aTransaction | lines add: (self printLineOf: aTransaction )].
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
	
	"^'Balance = 0'."! !

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:13:14'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:13:29' prior: 50622769 overrides: 16902957!
print
	| transactionsFromAccount lines |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	lines := OrderedCollection new.
	transactionsFromAccount do: [:aTransaction | lines add: (self printLineOf: aTransaction )].
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
	
	"^'Balance = 0'."! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:13:53' prior: 50622790 overrides: 16902957!
print
	| transactionsFromAccount lines |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	lines := OrderedCollection new.
	^transactionsFromAccount.
	"transactionsFromAccount do: [:aTransaction | lines add: (self printLineOf: aTransaction )].
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
	"
! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:13:59'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:13:59'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:14:04'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:14:04'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:18:50' prior: 50622807 overrides: 16902957!
print
	| lines |
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !
!ReceptiveAccount methodsFor: 'reporting' stamp: 'AF 5/29/2023 16:20:38'!
reportTransactionTo: aReport
	transactions do: [:aTransaction | aTransaction reportThisTransactionTo: aReport .]! !
!ReceptiveAccount methodsFor: 'reporting' stamp: 'AF 5/29/2023 16:20:58' prior: 50622847!
reportTransactionTo: aReport
	transactions do: [:aTransaction | aTransaction reportThisTransactionTo: aReport .]
	^self.! !
!AccountTransaction methodsFor: 'nil' stamp: 'AF 5/29/2023 16:21:15'!
reportThisTransactionTo: aReport
	^self subclassResponsibility .! !
!Deposit methodsFor: 'nil' stamp: 'AF 5/29/2023 16:21:57' overrides: 50622861!
reportThisTransactionTo: aReport
	aReport reportDeposit: self.! !
!TransferRecipient methodsFor: 'nil' stamp: 'AF 5/29/2023 16:22:25' overrides: 50622861!
reportThisTransactionTo: aReport
	aReport reportTransferRecipient: self.! !
!TransferSender methodsFor: 'nil' stamp: 'AF 5/29/2023 16:22:47' overrides: 50622861!
reportThisTransactionTo: aReport
	aReport reportTransferSender: self.! !
!Withdraw methodsFor: 'nil' stamp: 'AF 5/29/2023 16:23:09' overrides: 50622861!
reportThisTransactionTo: aReport
	aReport reportWithdraw: self.! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:23:55' prior: 50622839 overrides: 16902957!
print
	| lines2 |
	lines2:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines2 add: ('Balance = ', accountToBeReported balance asString).
	^lines2
! !

Report subclass: #AccountReport
	instanceVariableNames: 'accountToBeReported lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'AF 5/29/2023 16:24:10'!
Report subclass: #AccountReport
	instanceVariableNames: 'accountToBeReported lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:24:24' prior: 50622888 overrides: 16902957!
print
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!methodRemoval: AccountReport #printLineOf: stamp: 'AF 5/29/2023 16:24:35'!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^'Depósito por ', aTransaction value asString].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^'Extracción por ', aTransaction value asString].

	!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:25:32'!
reportWithdraw: aWithdraw
	lines add: 'w'! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:25:47'!
reportDeposit: aDeposit
	lines add: 'd'! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:25:55'!
ERROR!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:25:55'!
ERROR!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:26:00'!
ERROR!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:26:00'!
ERROR!
!ReceptiveAccount methodsFor: 'reporting' stamp: 'AF 5/29/2023 16:26:40' prior: 50622854!
reportTransactionTo: aReport
	transactions do: [:aTransaction | aTransaction reportThisTransactionTo: aReport .].
	^self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:26:47'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:26:47'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:26:47'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:26:53'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:26:58'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:27:43' prior: 50622932!
reportDeposit: aDeposit
	lines add: ('Depósito por ', aDeposit value asString )! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:27:44'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:27:44'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:27:44'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:28:40' prior: 50622928!
reportWithdraw: aWithdraw
	lines add: ('Extracción por ', aWithdraw value asString ) ! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:28:41'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:28:41'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:34:19'!
test03aReportCanContainTransfersAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	"
	Salida por transferencia de 20.
Entrada por transferencia de 30.
"
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with:'Balance = 10')
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:34:25'!
ERROR!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:35:28'!
reportTransferSender: aTransferSender
	lines add: ('Transf por ', aTransferSender value asString ) ! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:35:29'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:35:29'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:35:29'!
ERROR!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:35:29'!
ERROR!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:36:11'!
reportTransferRecipient: aTransferRecipient
	lines add: ('Transf recibida ', aTransferRecipient value asString ) ! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:36:12'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:36:12'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:36:12'!
FAILURE!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:36:12'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:38:02' prior: 50623061!
reportTransferSender: aTransferSender
	lines add: ('Salida por transferencia de ', aTransferSender value asString ) ! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:38:23' prior: 50623081!
reportTransferRecipient: aTransferRecipient
	lines add: ('Entrada por transferencia de ', aTransferRecipient value asString ) ! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:38:24'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:38:24'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:38:24'!
FAILURE!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:38:24'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:39:25' overrides: 16902254!
value
	^value .
! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:39:50' overrides: 16902254!
value
	! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:40:05' prior: 50623135 overrides: 16902254!
value
	^fromTransfer value.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:40:15' overrides: 16902254!
value
	^fromTransfer value.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:40:25'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:40:25'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:40:25'!
PASSED!

----SNAPSHOT----(29 May 2023 16:40:34) CuisUniversity-5799.image priorSource: 9310437!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:10:29'!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio newFrom: account1 .
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with:'Balance = 10')
				equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:11:24' prior: 50623162!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with:'Balance = 10')
				equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:11:58' prior: 50623192!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with:'Balance = 10')
				equals: (portfolio1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:12:31' prior: 50623222!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10')
				equals: (portfolio1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:12:36'!
FAILURE!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:14:46'!
reportTransactionTo: aReport
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:15:00'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:15:00'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:15:00'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:15:00'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:15:00'!
FAILURE!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:16:22' prior: 50623286!
reportTransactionTo: aReport
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:17:17'!
FAILURE!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:19:03' prior: 50623368!
reportTransactionTo: aReport
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	self halt.
	^self.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:19:09'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:19:09'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:19:09'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:19:09'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:19:09'!
FAILURE!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:19:28' prior: 50623435!
reportTransactionTo: aReport
	self halt.
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	self halt.
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:19:34'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:19:34'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:19:34'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:19:34'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:19:34'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:21:50' prior: 50622911 overrides: 16902957!
print
	lines:= OrderedCollection new.
	self halt.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:21:52'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:21:58'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:21:58'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:22:11'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:22:11'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:22:43' prior: 50623252!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	self halt.
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10')
				equals: (portfolio1 print).! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:22:52' prior: 50623543 overrides: 16902957!
print
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:22:53'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:22:53'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:22:53'!
PASSED!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:40:49' prior: 50623460!
reportTransactionTo: aReport
	self halt.
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	self halt.
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:40:55'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:40:55'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:40:55'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:41:04' prior: 50623572!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10')
				equals: (portfolio1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:41:11'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:41:36'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:41:36'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:42:45' prior: 50623604 overrides: 16902957!
print
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	self halt.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:47'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:51'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:51'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:59'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:59'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:43:46' prior: 50623698!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10').
	self assert: printCorrecto
				equals: (portfolio1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:43:53'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:44:08' prior: 50623770!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10').
	
	self assert: printCorrecto
				equals: (portfolio1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:44:16'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:44:30' prior: 50623806!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10').
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:44:50' prior: 50623623!
reportTransactionTo: aReport
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:44:51'!
PASSED!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:45:03' prior: 50623741 overrides: 16902957!
print
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:45:07'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:45:17'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:45:17'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:45:17'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:45:17'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:45:17'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:46:08'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:46:20' prior: 50623842!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account1 with: account3 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10').
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:46:25'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:46:48' prior: 50623973!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account1 with: account3 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 110').
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 11:49:11'!
Object subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:49:04'!
test04TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	
	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := 0.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test04TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 11:49:25'!
ERROR!

Report subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 11:49:39'!
Report subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 12:40:01'!
Report subclass: #TransferNetReport
	instanceVariableNames: 'accountToBeReported'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetReport methodsFor: 'nil' stamp: 'AF 6/1/2023 12:39:59'!
initializeReportOf: anAccount
	accountToBeReported := anAccount.! !
!TransferNetReport class methodsFor: 'nil' stamp: 'AF 6/1/2023 12:40:11'!
newOfAccount: anAccount
	^(self new) initializeReportOf: anAccount.! !

Report subclass: #TransferNetReport
	instanceVariableNames: 'accountToBeReported totalSum'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 12:40:53'!
Report subclass: #TransferNetReport
	instanceVariableNames: 'accountToBeReported totalSum'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:41:34' overrides: 16902957!
print
	totalSum := 0.
	accountToBeReported reportTransactionTo: self.
	^totalSum .
! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:42:18'!
reportDeposit: aDeposit
	totalSum := totalSum  + 0.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:42:38'!
reportWithdraw: aWithdraw
	totalSum  := totalSum  + 0.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:43:22'!
reportTransferRecipient: aTransferRecipient
	totalSum := totalSum  + aTransferRecipient value! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:43:40'!
reportTransferSender: aTransferSender
	totalSum := totalSum  - aTransferSender value! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:43:42'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:43:42'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:43:42'!
PASSED!

!testRun: #ReportTest #test04TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:43:42'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:43:42'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:44:26'!
test05TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	
	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := 0.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!methodRemoval: ReportTest #test04TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:44:36'!
test04TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	
	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := 0.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:44:43'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:45:41' prior: 50624176!
test05TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.

	
	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:49:24'!
test06TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.

	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test06TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test06TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:49:28'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:49:54'!
test06TransferNetReportWithTransferIsSumOfTransfers
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.

	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!methodRemoval: ReportTest #test06TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:50:00'!
test06TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.

	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:51:53'!
test07aTranssferNetReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	account1 transferMoneyTo: account3 anAmountOf: 300.

	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account1 with: account3 .
	
	reporteCuenta1 := TransferNetReport newOfAccount: portfolio1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test06TransferNetReportWithTransferIsSumOfTransfers stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test07aTranssferNetReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

----SNAPSHOT----(1 June 2023 12:54:35) CuisUniversity-5799.image priorSource: 9328269!
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:55:24'!
reportWithdraw: aWithdraw
	^self subclassResponsibility .! !
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:55:42'!
reportTransferSender: aTransferSender
	^self subclassResponsibility .! !
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:55:58'!
reportTransferRecipient: aTransferRecipient
	^self subclassResponsibility .! !
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:56:13'!
reportDeposit: aDeposit
	^self subclassResponsibility .! !
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:56:35' overrides: 16902957!
print
	^self subclassResponsibility .! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test06TransferNetReportWithTransferIsSumOfTransfers stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test07aTranssferNetReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

Account class
	instanceVariableNames: 'name'!

Account class
	instanceVariableNames: 'nameOfAccount'!

!classDefinition: 'Account class' category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 13:24:51'!
Account class
	instanceVariableNames: 'nameOfAccount'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 16:30:55'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'AF 6/1/2023 16:30:53'!
initializeWithNamed: aName 
	name := aName.
	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 16:31:40'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AF 6/1/2023 16:31:33'!
initializeWithNamed: aName 
	
	super initialize.
	transactions := OrderedCollection new.
	name := aName.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 16:32:29'!
named: aName 
	^self new initializeWithNamed: aName ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 16:33:03'!
named: aName
	^self new initializeWithNamed: aName ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 16:33:20'!
named: aName with: anAccount 

	^(self new initializeWithNamed: aName)
		add: anAccount;
		yourself ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 16:33:43'!
named: aName with: anAccount with: anotherAccount 

	^(self new initializeWithNamed: aName)
		add: anAccount;
		add: anotherAccount;
		yourself ! !

----SNAPSHOT----(1 June 2023 16:40:29) CuisUniversity-5799.image priorSource: 9367543!

----STARTUP---- (1 June 2023 20:21:17) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5799.image!


----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\08-MarsRover-ElRegreso\MarsRover-WithHeading.st----!

TestCase subclass: #LogsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogsTest category: 'MarsRover-WithHeading' stamp: 'AF 6/1/2023 20:22:33'!
TestCase subclass: #LogsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #LogsTest category: 'MarsRover-WithHeading' stamp: 'AF 6/1/2023 20:24:28'!
TestCase subclass: #LogsTest
	instanceVariableNames: 'marsRoverCuriosity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogsTest methodsFor: 'nil' stamp: 'AF 6/1/2023 20:24:26'!
test00MarsRoverNoChangesInPosition
 marsRoverCuriosity := MarsRover new.
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:25:25' prior: 50625014!
test00MarsRoverNoChangesInPosition

 marsRoverCuriosity := MarsRover at: 0@0 heading: 3.
.
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:25:58' prior: 50625020!
test00MarsRoverNoChangesInPosition

 marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
.
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:29:15' prior: 50625026!
test00MarsRoverNoChangesInPosition

	| marsRoverLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverLog := marsRoverLog for: marsRoverCuriosity .
	self assert: '' equals: (marsRoverLog changesInPosition).

	
! !

Object subclass: #marsRoverLog
	instanceVariableNames: 'postitionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverLog
	instanceVariableNames: 'postitionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'AF 6/1/2023 20:29:39'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'postitionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'nil' stamp: 'AF 6/1/2023 20:30:35'!
changesInPosition
^''! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:30:57' prior: 50625033!
test00MarsRoverNoChangesInPosition

	| marsRoverLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverLog := MarsRoverLog forTracing: marsRoverCuriosity .
	self assert: '' equals: (marsRoverLog changesInPosition).

	
! !
!MarsRoverLog class methodsFor: 'nil' stamp: 'AF 6/1/2023 20:31:47'!
forTracing: aMarsRover
	^(self new) initializeTracing: aMarsRover.! !

!classDefinition: #MarsRoverLog category: 'MarsRover-WithHeading' stamp: 'AF 6/1/2023 20:32:10'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'postitionLog marsRoverTracked'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverLog methodsFor: 'nil' stamp: 'AF 6/1/2023 20:32:09'!
initializeTracing: aMarsRover
	marsRoverTracked := aMarsRover .! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:32:18'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:32:27'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:45:03'!
test01MarsRoverChangesInPositionWindowTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'f'.
	self assert: 1@2 equals: (marsRoverCuriosity log).

	
! !

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:45:08'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:45:34' prior: 50625065!
test00MarsRoverNoChangesInPosition

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	self assert: '' equals: (marsRoverCuriosity log).

	
! !
!MarsRover methodsFor: 'logging' stamp: 'AF 6/1/2023 20:46:32'!
log
^''.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AF 6/1/2023 20:46:33'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:46:38'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:46:40'!
FAILURE!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:46:40'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:48:53' prior: 50625113!
test00MarsRoverNoChangesInPosition

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	self assert: (OrderedCollection new) equals: (marsRoverCuriosity log).

	
! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AF 6/1/2023 20:49:02'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'logging' stamp: 'AF 6/1/2023 20:49:22' prior: 50625121!
log
^OrderedCollection new.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AF 6/1/2023 20:49:23'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:49:26'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:49:41' prior: 50625188!
test00MarsRoverNoChangesInPosition

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	self assert: (marsRoverCuriosity log) isEmpty .

	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:49:43'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:49:43'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:49:43'!
FAILURE!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:49:43'!
FAILURE!

Object subclass: #MarsRover
	instanceVariableNames: 'position head logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AF 6/1/2023 20:50:43'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head logs'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'moving' stamp: 'AF 6/1/2023 20:51:11' prior: 50624752!
moveEast
	
	position := position + (1@0).
	logs add: position .! !
!MarsRover methodsFor: 'moving' stamp: 'AF 6/1/2023 20:51:27' prior: 50624760!
moveNorth
	
	position := position + (0@1).
	logs add: position .! !
!MarsRover methodsFor: 'moving' stamp: 'AF 6/1/2023 20:51:34' prior: 50624764!
moveSouth
	
	position := position + (0@-1).
	logs add: position .! !
!MarsRover methodsFor: 'moving' stamp: 'AF 6/1/2023 20:51:41' prior: 50624768!
moveWest
	
	position := position + (-1@0).
	logs add: position .! !
!MarsRover methodsFor: 'logging' stamp: 'AF 6/1/2023 20:51:49' prior: 50625210!
log
^logs.! !
!MarsRover methodsFor: 'initialization' stamp: 'AF 6/1/2023 20:52:09' prior: 50624696!
initializeAt: aPosition heading: aHeadingType

	position := aPosition.
	head := aHeadingType for: self .
	logs := OrderedCollection new.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AF 6/1/2023 20:52:09'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AF 6/1/2023 20:52:09'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AF 6/1/2023 20:52:10'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:52:16'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:52:16'!
FAILURE!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:52:16'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:52:41' prior: 50625100!
test01MarsRoverChangesInPositionWindowTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'f'.
	self assert: 0@1 equals: (marsRoverCuriosity log) first.

	
! !

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:52:42'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:52:42'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:52:42'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:54:23'!
test02MarsRoverManyChangesInPositionWindowTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'ffb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosity log) .

	
! !

!testRun: #LogsTest #test02MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:54:25'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:54:25'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:54:25'!
PASSED!

!testRun: #LogsTest #test02MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:54:25'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:55:10'!
test02MarsRoverManyChangesInPositionLogTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'ffb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosity log) .

	
! !

!methodRemoval: LogsTest #test02MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:55:10'!
test02MarsRoverManyChangesInPositionWindowTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'ffb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosity log) .

	
!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:55:28' prior: 50625400!
test01MarsRoverChangesInPositionWindowTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'f'.
	self assert: 0@1 equals: marsRoverCuriosity window.

	
! !
!MarsRover methodsFor: 'logging' stamp: 'AF 6/1/2023 20:55:40'!
window
^logs last.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AF 6/1/2023 20:55:41'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:55:45'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:55:48'!
PASSED!

!testRun: #LogsTest #test02MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/1/2023 20:55:51'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 20:56:19'!
test03MarsRoverManyChangesInPositionWindowTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'fff'.
	self assert: 0@3 equals: (marsRoverCuriosity window) .

	
! !

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:56:20'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 20:56:20'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:56:20'!
PASSED!

!testRun: #LogsTest #test02MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/1/2023 20:56:20'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/1/2023 20:56:20'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 21:01:57'!
test02MarsRoverChangesInPositionLogTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'f'.
	self assert: (OrderedCollection with: (0@1)) equals: marsRoverCuriosity log.

	
! !

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/1/2023 21:01:58'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/1/2023 21:01:58'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/1/2023 21:01:58'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/1/2023 21:01:58'!
PASSED!

!testRun: #LogsTest #test02MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/1/2023 21:01:58'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/1/2023 21:01:58'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 21:02:06'!
test04MarsRoverManyChangesInPositionLogTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'ffb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosity log) .

	
! !

!methodRemoval: LogsTest #test02MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/1/2023 21:02:10'!
test02MarsRoverManyChangesInPositionLogTracing

	
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'ffb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosity log) .

	
!

Object subclass: #MarsRoverObserver
	instanceVariableNames: 'marsRoverTracked'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverObserver category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:16:31'!
Object subclass: #MarsRoverObserver
	instanceVariableNames: 'marsRoverTracked'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

Object subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:16:54'!
Object subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:17:05'!
MarsRoverObserver subclass: #MarsRoverPositionLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverObserver methodsFor: 'nil' stamp: 'AF 6/3/2023 11:17:44'!
initializeTracing: aMarsRover
	marsRoverTracked := aMarsRover .! !
!MarsRoverObserver class methodsFor: 'nil' stamp: 'AF 6/3/2023 11:18:01'!
forTracing: aMarsRover
	^(self new) initializeTracing: aMarsRover.! !

!classRemoval: #MarsRoverLog stamp: 'AF 6/3/2023 11:18:08'!
Object subclass: #MarsRoverLog
	instanceVariableNames: 'postitionLog marsRoverTracked'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:20:09' prior: 50625271!
test00MarsRoverNoChangesInPosition

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.
	self assert: marsRoverCuriosityPositionLog isEmpty .
	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:20:12'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:20:34' prior: 50625681!
test00MarsRoverNoChangesInPosition

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.
	self assert: (marsRoverCuriosityPositionLog log) isEmpty .
	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:20:35'!
ERROR!

MarsRoverObserver subclass: #MarsRoverPositionLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionLog category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:20:43'!
MarsRoverObserver subclass: #MarsRoverPositionLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionLog methodsFor: 'nil' stamp: 'AF 6/3/2023 11:21:09'!
log
^log .! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:21:10'!
ERROR!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:21:10'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:21:10'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:21:10'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:21:10'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:21:10'!
ERROR!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:21:53' prior: 50625663!
initializeTracing: aMarsRover
	marsRoverTracked := aMarsRover .
	self initializeSpecificObserver.! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:22:14'!
initializeSpecificObserver
 log:= OrderedCollection new..! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:22:15'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:22:15'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:22:15'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:22:15'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:22:15'!
PASSED!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:22:19' prior: 50625754!
initializeSpecificObserver
 log:= OrderedCollection new.! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:23:03'!
show
^log .! !

!methodRemoval: MarsRoverPositionLog #log stamp: 'AF 6/3/2023 11:23:11'!
log
^log .!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:23:22' prior: 50625696!
test00MarsRoverNoChangesInPosition

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.
	self assert: (marsRoverCuriosityPositionLog show) isEmpty .
	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:23:23'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:23:23'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:23:23'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:23:23'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:23:23'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:23:23'!
PASSED!

MarsRoverObserver subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionWindow category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:24:21'!
MarsRoverObserver subclass: #MarsRoverPositionWindow
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionWindow methodsFor: 'nil' stamp: 'AF 6/3/2023 11:24:34'!
initializeSpecificObserver! !
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:24:53'!
show
	^marsRoverTracked.! !

MarsRoverObserver subclass: #MarsRoverPositionWindow
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverPositionWindow category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:25:24'!
MarsRoverObserver subclass: #MarsRoverPositionWindow
	instanceVariableNames: 'position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:25:30' prior: 50625836!
show
	^position.! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:26:32' prior: 50625468!
test01MarsRoverChangesInPositionWindowTracing

	
	| marsRoverCuriosityPositionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'f'.
	marsRoverCuriosityPositionWindow := MarsRoverPositionWindow forTracing: marsRoverCuriosity.

	self assert: 0@1 equals: (marsRoverCuriosityPositionWindow show).

	
! !

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:26:36'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:27:02' prior: 50625859!
test01MarsRoverChangesInPositionWindowTracing

	
	| marsRoverCuriosityPositionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionWindow := MarsRoverPositionWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: 0@1 equals: (marsRoverCuriosityPositionWindow show).

	
! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head trackedBy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:28:24'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head trackedBy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'AF 6/3/2023 11:28:45' prior: 50625329!
initializeAt: aPosition heading: aHeadingType

	| observedBy |
	position := aPosition.
	head := aHeadingType for: self .
	observedBy := OrderedCollection new.! !
!MarsRover methodsFor: 'initialization' stamp: 'AF 6/3/2023 11:29:16' prior: 50625905!
initializeAt: aPosition heading: aHeadingType
	position := aPosition.
	head := aHeadingType for: self .
! !

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:29:21'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head trackedBy observedBy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRover methodsFor: 'initialization' stamp: 'AF 6/3/2023 11:29:19' prior: 50625913!
initializeAt: aPosition heading: aHeadingType
	position := aPosition.
	head := aHeadingType for: self .
	observedBy := OrderedCollection new.! !

Object subclass: #MarsRover
	instanceVariableNames: 'position head observedBy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRover category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 11:29:28'!
Object subclass: #MarsRover
	instanceVariableNames: 'position head observedBy'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!methodRemoval: MarsRover #log stamp: 'AF 6/3/2023 11:29:41'!
log
^logs.!

!methodRemoval: MarsRover #window stamp: 'AF 6/3/2023 11:29:47'!
window
^logs last.!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:30:15'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:30:15'!
ERROR!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:30:15'!
ERROR!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:30:15'!
ERROR!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:30:15'!
ERROR!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:30:19'!
PASSED!
!MarsRover methodsFor: 'logging' stamp: 'AF 6/3/2023 11:31:01'!
addNewObserver: anObserver
	observedBy add: anObserver .! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:31:27' prior: 50625748!
initializeTracing: aMarsRover
	marsRoverTracked := aMarsRover .
	self initializeSpecificObserver.
	aMarsRover addNewObserver: self.! !
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:31:57' prior: 50625977!
initializeTracing: aMarsRover
	marsRoverTracked := aMarsRover .
	self initializeSpecificObserver: aMarsRover .
	aMarsRover addNewObserver: self.! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:32:11'!
initializeSpecificObserver: aMarsRover
 log:= OrderedCollection new.! !

!methodRemoval: MarsRoverPositionLog #initializeSpecificObserver stamp: 'AF 6/3/2023 11:32:15'!
initializeSpecificObserver
 log:= OrderedCollection new.!
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:34:04'!
initializeSpecificObserver: aMarsRover
	position := aMarsRover position.! !

!methodRemoval: MarsRoverPositionWindow #initializeSpecificObserver stamp: 'AF 6/3/2023 11:34:10'!
initializeSpecificObserver!
!MarsRover methodsFor: 'accesing' stamp: 'AF 6/3/2023 11:34:55'!
position
^position .! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AF 6/3/2023 11:34:56'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AF 6/3/2023 11:34:56'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AF 6/3/2023 11:34:56'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/3/2023 11:34:56'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AF 6/3/2023 11:34:56'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AF 6/3/2023 11:34:56'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AF 6/3/2023 11:34:56'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AF 6/3/2023 11:34:56'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AF 6/3/2023 11:34:56'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AF 6/3/2023 11:34:56'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AF 6/3/2023 11:34:56'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AF 6/3/2023 11:34:56'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AF 6/3/2023 11:34:56'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AF 6/3/2023 11:34:56'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AF 6/3/2023 11:34:56'!
ERROR!

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AF 6/3/2023 11:35:01'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AF 6/3/2023 11:35:01'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AF 6/3/2023 11:35:01'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/3/2023 11:35:01'!
ERROR!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AF 6/3/2023 11:35:01'!
ERROR!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AF 6/3/2023 11:35:01'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AF 6/3/2023 11:35:01'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AF 6/3/2023 11:35:01'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AF 6/3/2023 11:35:01'!
ERROR!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AF 6/3/2023 11:35:01'!
ERROR!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AF 6/3/2023 11:35:01'!
ERROR!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AF 6/3/2023 11:35:01'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AF 6/3/2023 11:35:01'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AF 6/3/2023 11:35:01'!
ERROR!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AF 6/3/2023 11:35:01'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/3/2023 11:35:14'!
ERROR!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/3/2023 11:35:14'!
ERROR!
!MarsRover methodsFor: 'moving' stamp: 'AF 6/3/2023 11:36:23' prior: 50625305!
moveEast
	
	position := position + (1@0).
	! !
!MarsRover methodsFor: 'moving' stamp: 'AF 6/3/2023 11:36:37' prior: 50625310!
moveNorth
	
	position := position + (0@1).
! !
!MarsRover methodsFor: 'moving' stamp: 'AF 6/3/2023 11:36:41' prior: 50625320!
moveWest
	
	position := position + (-1@0).
! !
!MarsRover methodsFor: 'moving' stamp: 'AF 6/3/2023 11:36:44' prior: 50625315!
moveSouth
	
	position := position + (0@-1).
! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AF 6/3/2023 11:36:45'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:36:49'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:36:49'!
FAILURE!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:36:49'!
ERROR!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:36:49'!
ERROR!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:36:49'!
ERROR!
!MarsRover methodsFor: 'observing' stamp: 'AF 6/3/2023 11:39:22'!
changesHaveBeenMade
	observedBy do: [:anObserver| anObserver updateObservation].! !
!MarsRover methodsFor: 'moving' stamp: 'AF 6/3/2023 11:40:45' prior: 50624748!
moveBackward
	
	head moveBackward.
	self changesHaveBeenMade .! !
!MarsRover methodsFor: 'moving' stamp: 'AF 6/3/2023 11:40:58' prior: 50624756!
moveForward
	
	head moveForward.
	self changesHaveBeenMade .! !
!MarsRover methodsFor: 'heading' stamp: 'AF 6/3/2023 11:41:12' prior: 50624718!
rotateLeft
	
	head rotateLeft.
	self changesHaveBeenMade .! !
!MarsRover methodsFor: 'heading' stamp: 'AF 6/3/2023 11:41:18' prior: 50624722!
rotateRight
	
	head rotateRight
	self changesHaveBeenMade.! !
!MarsRover methodsFor: 'heading' stamp: 'AF 6/3/2023 11:41:22' prior: 50626237!
rotateRight
	
	head rotateRight.
	self changesHaveBeenMade.! !

!testRun: #MarsRoverTest #test01DoesNotMoveWhenNoCommand stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test02IsAtFailsForDifferentPosition stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test03IsAtFailsForDifferentHeading stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test04IncrementsYAfterMovingForwardWhenHeadingNorth stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test06DecrementsYAfterMovingBackwardsWhenHeadingNorth stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test07PointToEashAfterRotatingRightWhenHeadingNorth stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test08PointsToWestAfterRotatingLeftWhenPointingNorth stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test09DoesNotProcessInvalidCommand stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test10CanProcessMoreThanOneCommand stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test11IncrementsXAfterMovingForwareWhenHeadingEast stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test12DecrementsXAfterMovingBackwardWhenHeadingEast stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test13PointsToSouthAfterRotatingRightWhenHeadingEast stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test14PointsToNorthAfterRotatingLeftWhenPointingEast stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test15ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingSouth stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #MarsRoverTest #test16ForwardBackwardsAndRotateRightWorkAsExpectedWhenPointingWest stamp: 'AF 6/3/2023 11:41:24'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:41:44'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:41:44'!
ERROR!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:41:44'!
ERROR!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:41:44'!
ERROR!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:41:44'!
ERROR!
!MarsRoverObserver methodsFor: 'nil' stamp: 'AF 6/3/2023 11:44:12'!
updateObservation
^self subclassResponsibility .! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:45:13' overrides: 50626317!
updateObservation
	log:= log add: (marsRoverTracked position).! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:45:18' prior: 50626322 overrides: 50626317!
updateObservation
	log add: (marsRoverTracked position).! !
!MarsRoverPositionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:45:55' overrides: 50626317!
updateObservation
	position := marsRoverTracked position .! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:46:01'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:46:01'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:46:01'!
ERROR!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:46:01'!
ERROR!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:46:01'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:56:37' prior: 50625571!
test02MarsRoverChangesInPositionLogTracing

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosity process: 'f'.
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.

	self assert: (OrderedCollection with: (0@1)) equals: marsRoverCuriosityPositionLog show.

	
! !

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:56:40'!
FAILURE!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:57:08' prior: 50626328 overrides: 50626317!
updateObservation
	self halt.
	log add: (marsRoverTracked position).! !

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:57:16'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:57:35' prior: 50626356!
test02MarsRoverChangesInPositionLogTracing

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: (OrderedCollection with: (0@1)) equals: marsRoverCuriosityPositionLog show.

	
! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:57:47' prior: 50626375 overrides: 50626317!
updateObservation
	log add: (marsRoverTracked position).! !

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:57:54'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:57:58'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:57:58'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:57:58'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:57:58'!
ERROR!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:57:58'!
ERROR!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:58:22' prior: 50625544!
test03MarsRoverManyChangesInPositionWindowTracing

	
	| marsRoverCuriosityPositionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionWindow := MarsRoverPositionWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'fff'.
	self assert: 0@3 equals: (marsRoverCuriosityPositionWindow show) .

	
! !

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:58:24'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:58:24'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:58:24'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:58:24'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:58:24'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:58:24'!
ERROR!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:58:24'!
ERROR!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:58:32'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 11:59:12' prior: 50625601!
test04MarsRoverManyChangesInPositionLogTracing

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'ffb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosityPositionLog show) .

	
! !

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:59:16'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 11:59:16'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:59:16'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:59:16'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 11:59:16'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 11:59:16'!
PASSED!
!MarsRoverObserver methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:00:33'!
initializeSpecificObserver: aMarsRover
	^self subclassResponsibility ! !

!classDefinition: #MarsRoverHeadingLog category: 'MarsRover-WithHeadig' stamp: 'AF 6/3/2023 12:06:10'!
Object subclass: #MarsRoverHeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeadig'!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:05:51'!
test04MarsRoverManyChangesInPositionLogTracing

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'ffb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosityPositionLog show) .

	
! !

!classRemoval: #MarsRoverHeadingLog stamp: 'AF 6/3/2023 12:06:27'!
Object subclass: #MarsRoverHeadingLog
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeadig'!

MarsRoverObserver subclass: #MarsRoverHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingLog category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 12:06:44'!
MarsRoverObserver subclass: #MarsRoverHeadingLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver subclass: #MarsRoverHeadingWindow
	instanceVariableNames: 'heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverHeadingWindow category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 12:06:55'!
MarsRoverObserver subclass: #MarsRoverHeadingWindow
	instanceVariableNames: 'heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverHeadingLog methodsFor: 'nil' stamp: 'AF 6/3/2023 12:09:07' overrides: 50626503!
initializeSpecificObserver: aMarsRover
 log:= OrderedCollection new.! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:09:27'!
show
^log .! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:09:48' overrides: 50626317!
updateObservation
	log add: (marsRoverTracked heading).! !
!MarsRoverHeadingWindow methodsFor: 'nil' stamp: 'AF 6/3/2023 12:11:12' overrides: 50626503!
initializeSpecificObserver: aMarsRover
	heading := aMarsRover heading.! !
!MarsRoverHeadingWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:11:25'!
show
	^heading.! !
!MarsRoverHeadingWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:11:45' overrides: 50626317!
updateObservation
	heading := marsRoverTracked heading .! !

!methodRemoval: LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:13:29'!
test04MarsRoverManyChangesInPositionLogTracing

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'ffb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosityPositionLog show) .

	
!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:13:51'!
test05MarsRoverNoChangesInHeadingLog

	
	| marsRoverCuriosityHeadingLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityHeadingLog := MarsRoverHeadingLog forTracing: marsRoverCuriosity.

	self assert: (marsRoverCuriosityHeadingLog show) isEmpty .
	
! !

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:13:52'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:13:52'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:13:52'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:13:52'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:13:52'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:13:52'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:13:52'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:15:46'!
test01MarsRoverChangesInHeadingWindowTracing

	
	| marsRoverCuriosityPositionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionWindow := MarsRoverHeadingWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: 'East' equals: (marsRoverCuriosityPositionWindow show).

	
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:15:51'!
test06MarsRoverChangesInHeadingWindowTracing

	
	| marsRoverCuriosityPositionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionWindow := MarsRoverHeadingWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: 'East' equals: (marsRoverCuriosityPositionWindow show).

	
! !

!methodRemoval: LogsTest #test01MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:15:58'!
test01MarsRoverChangesInHeadingWindowTracing

	
	| marsRoverCuriosityPositionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionWindow := MarsRoverHeadingWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: 'East' equals: (marsRoverCuriosityPositionWindow show).

	
!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:16:03'!
ERROR!
!MarsRover methodsFor: 'accesing' stamp: 'AF 6/3/2023 12:18:12'!
heading
^head .! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:19:04' prior: 50626659!
test06MarsRoverChangesInHeadingWindowTracing

	
	| marsRoverCuriosityHeadingWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityHeadingWindow := MarsRoverHeadingWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: 'East' equals: (marsRoverCuriosityHeadingWindow show).

	
! !
!MarsRoverHeadingWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:22:34' prior: 50626586!
show
	^heading nameOfHeading.! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:22:44'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:22:44'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:22:44'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:22:44'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:22:44'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:22:44'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:22:44'!
ERROR!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:22:44'!
ERROR!
!MarsRoverHeadingEast methodsFor: 'nil' stamp: 'AF 6/3/2023 12:25:37'!
nameOfHeading
	^'East'.! !
!MarsRoverHeadingNorth methodsFor: 'nil' stamp: 'AF 6/3/2023 12:25:53'!
nameOfHeading
^'North'.! !
!MarsRoverHeadingSouth methodsFor: 'nil' stamp: 'AF 6/3/2023 12:26:08'!
nameOfHeading
^'South'.! !
!MarsRoverHeadingWest methodsFor: 'nil' stamp: 'AF 6/3/2023 12:26:25'!
nameOfHeading
	^'West'.! !
!MarsRoverHeadingSouth methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:26:29' prior: 50626748!
nameOfHeading
	^'South'.! !
!MarsRoverHeadingNorth methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:26:34' prior: 50626744!
nameOfHeading
	^'North'.! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:26:44'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:26:44'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:26:44'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:26:44'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:26:44'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:26:44'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:26:44'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:30:08'!
test07MarsRoverChangesInHeadingLogTracing

	
	| marsRoverCuriosityHeadingLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityHeadingLog := MarsRoverHeadingLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'l'.

	self assert: (OrderedCollection with: 'West') equals: marsRoverCuriosityHeadingLog show.

	
! !

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:30:09'!
FAILURE!
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:30:52' prior: 50626575 overrides: 50626317!
updateObservation
	log add: (marsRoverTracked heading nameOfHeading ).! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:30:54'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:30:54'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:30:54'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:30:54'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:30:54'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:30:54'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:30:54'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:30:54'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:34:37'!
test08MarsRoverManyChangesInHeadingWindowTracing

	
	| marsRoverCuriosityHeadingWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityHeadingWindow := MarsRoverHeadingWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'rr'.
	self assert: 'South' equals: (marsRoverCuriosityHeadingWindow show) .

	
! !

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:34:38'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:34:38'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:37:03'!
test09MarsRoverManyChangesInHeadingLogTracing

	
	| marsRoverCuriosityHeadingLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityHeadingLog := MarsRoverHeadingLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'rlfl'.
	self assert: (OrderedCollection with: 'East' with: 'North'  with: 'West') equals: (marsRoverCuriosityHeadingLog show) .

	
! !

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:37:04'!
FAILURE!

3 difference: 4!

3 equals: 4
!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:40:42' prior: 50626400 overrides: 50626317!
updateObservation
	"log last equals: "
	log add: (marsRoverTracked position).! !

3 equals: 4
!

3 = 4
!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:44:44' prior: 50626907 overrides: 50626317!
updateObservation
	(log last) = (marsRoverTracked position) ifFalse: [log add: (marsRoverTracked position).].! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:44:52'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:44:52'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:44:52'!
ERROR!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:44:52'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:44:52'!
ERROR!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:44:52'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:44:52'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:44:52'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:44:52'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:44:52'!
FAILURE!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:45:07'!
ERROR!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:45:07'!
ERROR!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:46:16' prior: 50626915 overrides: 50626317!
updateObservation
	((log isEmpty) or: ((log last) = (marsRoverTracked position))) ifFalse: [log add: (marsRoverTracked position).].! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:46:31' prior: 50626962 overrides: 50626317!
updateObservation
	((log isEmpty not) or: ((log last) = (marsRoverTracked position))) ifFalse: [log add: (marsRoverTracked position).].! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:46:34'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:46:34'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:46:34'!
ERROR!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:46:34'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:46:34'!
ERROR!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:46:34'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:46:34'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:46:34'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:46:34'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:46:34'!
FAILURE!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:46:39'!
ERROR!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:46:39'!
ERROR!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:48:08' prior: 50626971 overrides: 50626317!
updateObservation
	(log isEmpty) ifTrue:  [log add: (marsRoverTracked position).]
				ifFalse: [((log last) = (marsRoverTracked position)) ifFalse: [log add: (marsRoverTracked position).]].
	! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:48:10'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:48:10'!
FAILURE!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:48:10'!
FAILURE!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:49:01'!
actuallyUpdate
	log add: (marsRoverTracked position).! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:49:19' prior: 50627019 overrides: 50626317!
updateObservation
	(log isEmpty) ifTrue:  [self actuallyUpdate.]
				ifFalse: [((log last) = (marsRoverTracked position)) ifFalse: [self actuallyUpdate.]].
	! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:49:21'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:49:21'!
FAILURE!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:49:21'!
FAILURE!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:49:29' prior: 50627071 overrides: 50626317!
updateObservation
	(log isEmpty) ifTrue:  [self actuallyUpdate.]
				ifFalse: [((log last) = (marsRoverTracked position)) ifFalse: [self actuallyUpdate.]].
	! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:49:34' prior: 50627117 overrides: 50626317!
updateObservation
	(log isEmpty)   ifTrue:  [self actuallyUpdate.]
				ifFalse: [((log last) = (marsRoverTracked position)) ifFalse: [self actuallyUpdate.]].
	! !
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:51:38'!
isUpdateNecesary
	^(log isEmpty) or: [(log last) = (marsRoverTracked position)].
	! !

true or: [self halt]!

true and: [self halt]!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:52:37' prior: 50627126 overrides: 50626317!
updateObservation
	self isUpdateNecesary  ifTrue:  [self actuallyUpdate.]! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:52:51'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:52:51'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:52:51'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:52:51'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:52:51'!
FAILURE!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:52:51'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:52:51'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:52:51'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:52:51'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:52:51'!
FAILURE!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:53:00'!
FAILURE!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:53:00'!
FAILURE!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:54:02' prior: 50627134!
isUpdateNecesary
	^(log isEmpty) or: [(log last) = (marsRoverTracked position) not].
	! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:54:03'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:54:03'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:54:03'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:54:03'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:54:03'!
ERROR!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:54:03'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:54:03'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:54:03'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:54:03'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:54:03'!
FAILURE!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:54:09'!
ERROR!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:54:09'!
ERROR!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:54:23' prior: 50627188!
isUpdateNecesary
	^(log isEmpty) or: [(log last) = (marsRoverTracked position) negated].
	! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:54:24'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:54:24'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:54:24'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:54:24'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:54:24'!
FAILURE!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:54:24'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:54:24'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:54:24'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:54:24'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:54:24'!
FAILURE!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:54:28'!
FAILURE!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:54:28'!
FAILURE!

true negated!

true not!
!MarsRoverPositionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:55:12' prior: 50627234!
isUpdateNecesary
	^(log isEmpty) or: [((log last) = (marsRoverTracked position)) not].
	! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:55:13'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:55:13'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:55:13'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:55:13'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:55:13'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:55:14'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:55:14'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:55:14'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:55:14'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:55:14'!
FAILURE!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:55:14'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:56:05' prior: 50626467!
test04MarsRoverManyChangesInPositionLogTracing

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'flfrb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosityPositionLog show) .

	
! !

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:56:06'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:56:20' prior: 50627323!
test04MarsRoverManyChangesInPositionLogTracing

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'fflrb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosityPositionLog show) .

	
! !

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:56:21'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:56:21'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:56:21'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:56:21'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:56:21'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:56:21'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:56:21'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:56:22'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:56:22'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:56:22'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:56:22'!
FAILURE!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:56:22'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:56:29' prior: 50627343!
test04MarsRoverManyChangesInPositionLogTracing

	
	| marsRoverCuriosityPositionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityPositionLog := MarsRoverPositionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'frrllflrb'.
	self assert: (OrderedCollection with: (0@1) with: (0@2)  with: (0@1)) equals: (marsRoverCuriosityPositionLog show) .

	
! !

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:56:30'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:56:30'!
FAILURE!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:56:30'!
FAILURE!
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:57:35'!
isUpdateNecesary
	^(log isEmpty) or: [((log last) = (marsRoverTracked heading )) not].
	! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:58:01'!
actuallyUpdate
	log add: (marsRoverTracked heading ).! !
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 12:58:39' prior: 50626808 overrides: 50626317!
updateObservation
	self isUpdateNecesary  ifTrue:  [self actuallyUpdate.]! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 12:58:41'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:58:41'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:58:41'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 12:58:41'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 12:58:41'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 12:58:41'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:58:41'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:58:41'!
FAILURE!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 12:58:41'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 12:58:41'!
FAILURE!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:00:05'!
FAILURE!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:00:05'!
FAILURE!
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:00:23' prior: 50627461!
actuallyUpdate
	log add: (marsRoverTracked heading nameOfHeading ).! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:00:25'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:00:25'!
FAILURE!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:00:25'!
FAILURE!
!MarsRoverHeadingLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:00:54' prior: 50627455!
isUpdateNecesary
	^(log isEmpty) or: [((log last) = (marsRoverTracked heading nameOfHeading )) not].
	! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:00:56'!
PASSED!

	MarsRoverObserver subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'heading position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 13:10:56'!
MarsRoverObserver subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'heading position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionWindow methodsFor: 'nil' stamp: 'AF 6/3/2023 13:13:14' overrides: 50626503!
initializeSpecificObserver: aMarsRover
	heading := aMarsRover heading.
	position := aMarsRover position.! !
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:15:06'!
show
	^ OrderedCollection with: (heading nameOfHeading) with: position .! !
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:15:56' overrides: 50626317!
updateObservation
	heading := marsRoverTracked heading .
	position  := marsRoverTracked position .! !

MarsRoverObserver subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'heading position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionLog category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 13:16:56'!
MarsRoverObserver subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'heading position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

MarsRoverObserver subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'headingLog positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionLog category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 13:17:05'!
MarsRoverObserver subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'headingLog positionLog'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:24:34'!
test10MarsRoverNoChangesInDirectionLog

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	self assert: (marsRoverCuriosityDirectionLog show) isEmpty .
	
! !

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 13:24:35'!
ERROR!

MarsRoverObserver subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionLog category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 13:24:49'!
MarsRoverObserver subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'log'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionLog methodsFor: 'nil' stamp: 'AF 6/3/2023 13:25:17' overrides: 50626503!
initializeSpecificObserver: aMarsRover
 log:= OrderedCollection new.! !
!MarsRoverDirectionLog methodsFor: 'nil' stamp: 'AF 6/3/2023 13:25:33'!
show
^log .! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:25:38'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 13:25:38'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:27:14'!
test11MarsRoverChangesInDirectionWindowTracing

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverDirectionWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: 0@1 equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 13:27:16'!
FAILURE!

MarsRoverObserver subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'lastChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 13:27:41'!
MarsRoverObserver subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'lastChange'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:27:50' prior: 50627608 overrides: 50626503!
initializeSpecificObserver: aMarsRover! !
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:28:02' prior: 50627615!
show
	^lastChange .! !
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:28:44' prior: 50627621 overrides: 50626317!
updateObservation

	"heading := marsRoverTracked heading .
	position  := marsRoverTracked position ."! !
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:13:14' prior: 50627764 overrides: 50626503!
initializeSpecificObserver: aMarsRover
	heading := aMarsRover heading.
	position := aMarsRover position.! !

MarsRoverObserver subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'lastChange heading position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionWindow category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 13:29:28'!
MarsRoverObserver subclass: #MarsRoverDirectionWindow
	instanceVariableNames: 'lastChange heading position'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:29:44' prior: 50627774 overrides: 50626317!
updateObservation

	heading := marsRoverTracked heading .
	position  := marsRoverTracked position .! !
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:30:27' prior: 50627805 overrides: 50626317!
updateObservation

	| currentHeading currentPosition |
	currentHeading := marsRoverTracked heading .
	currentPosition  := marsRoverTracked position .
	! !
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:32:32' prior: 50627813 overrides: 50626317!
updateObservation

	| currentHeading currentPosition |
	currentHeading := marsRoverTracked heading .
	currentPosition  := marsRoverTracked position .
	(currentHeading = heading) ifFalse: [heading := currentHeading.
								lastChange := currentHeading.] .
	(currentPosition = position ) ifFalse: [position := currentPosition .
								lastChange := currentPosition.] ! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 13:32:33'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 13:32:33'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:33:17'!
test12MarsRoverChangesInDirectionWindowTracingRotating

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverDirectionWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: 'East' equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 13:33:19'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:33:47'!
test11MarsRoverChangesInDirectionWindowTracingPositioning

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverDirectionWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: 0@1 equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!methodRemoval: LogsTest #test11MarsRoverChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 13:33:48'!
test11MarsRoverChangesInDirectionWindowTracing

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverDirectionWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: 0@1 equals: (marsRoverCuriosityDirectionWindow show).

	
!
!MarsRoverDirectionWindow methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:34:39' prior: 50627822 overrides: 50626317!
updateObservation

	| currentHeading currentPosition |
	currentHeading := marsRoverTracked heading .
	currentPosition  := marsRoverTracked position .
	(currentHeading = heading) ifFalse: [heading := currentHeading.
								lastChange := currentHeading nameOfHeading .] .
	(currentPosition = position ) ifFalse: [position := currentPosition .
								lastChange := currentPosition.] ! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 13:34:40'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 13:34:40'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:38:59'!
test13MarsRoverChangesInDirectionLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'l'.

	self assert: (OrderedCollection with: 'West') equals: marsRoverCuriosityDirectionLog show.

	
! !

!testRun: #LogsTest #test13MarsRoverChangesInDirectionLogTracing stamp: 'AF 6/3/2023 13:39:00'!
ERROR!
!MarsRoverDirectionLog methodsFor: 'nil' stamp: 'AF 6/3/2023 13:39:25' overrides: 50626317!
updateObservation
	self isUpdateNecesary  ifTrue:  [self actuallyUpdate.]! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:41:51'!
isUpdateNecesary
	^(log isEmpty) or: [((log last) = (marsRoverTracked heading nameOfHeading )) not].
	! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:42:14'!
actuallyUpdate
	log add: (marsRoverTracked heading nameOfHeading ).! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:51:12'!
actuallyUpdate: newChange
	log add: newChange.! !

!methodRemoval: MarsRoverDirectionLog #actuallyUpdate stamp: 'AF 6/3/2023 13:51:19'!
actuallyUpdate
	log add: (marsRoverTracked heading nameOfHeading ).!
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:51:45' prior: 50628002 overrides: 50626317!
updateObservation
	self isUpdateNecesary.! !

MarsRoverObserver subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'log position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverDirectionLog category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 13:52:11'!
MarsRoverObserver subclass: #MarsRoverDirectionLog
	instanceVariableNames: 'log position heading'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:52:53' prior: 50627686 overrides: 50626503!
initializeSpecificObserver: aMarsRover
 log:= OrderedCollection new.
	position := aMarsRover position .
	heading := aMarsRover heading .! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:56:41'!
actuallyUpdatePosition
	log add: position .! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:57:03' prior: 50628059!
actuallyUpdatePosition
	log add: (marsRoverTracked position) .! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:57:19'!
actuallyUpdateHeading
	log add: (marsRoverTracked heading nameOfHeading ) .! !

!methodRemoval: MarsRoverDirectionLog #actuallyUpdate: stamp: 'AF 6/3/2023 13:57:36'!
actuallyUpdate: newChange
	log add: newChange.!
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 13:59:44'!
isHeadingUpdateNecesary
	^(heading = (marsRoverTracked heading)) not.
	! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:00:02'!
isPositionUpdateNecesary
	^(position = (marsRoverTracked position )) not.
	! !

!methodRemoval: MarsRoverDirectionLog #isUpdateNecesary stamp: 'AF 6/3/2023 14:00:09'!
isUpdateNecesary
	^(log isEmpty) or: [((log last) = (marsRoverTracked heading nameOfHeading )) not].
	!
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:00:23' prior: 50628051 overrides: 50626503!
initializeSpecificObserver: aMarsRover
 	log:= OrderedCollection new.
	position := aMarsRover position .
	heading := aMarsRover heading .! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:01:16' prior: 50628031 overrides: 50626317!
updateObservation
	self isHeadingUpdateNecesary ifTrue: [self actuallyUpdateHeading .].
	self isPositionUpdateNecesary ifTrue: [self actuallyUpdatePosition .].! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 14:01:17'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:01:18'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:02:14'!
test13MarsRoverChangesInDirectionLogTracingRotating

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'l'.

	self assert: (OrderedCollection with: 'West') equals: marsRoverCuriosityDirectionLog show.

	
! !

!methodRemoval: LogsTest #test13MarsRoverChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:02:18'!
test13MarsRoverChangesInDirectionLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'l'.

	self assert: (OrderedCollection with: 'West') equals: marsRoverCuriosityDirectionLog show.

	
!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:02:56'!
test14MarsRoverChangesInDirectionLogTracingPositioning

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: (OrderedCollection with: 0@1) equals: marsRoverCuriosityDirectionLog show.

	
! !

!testRun: #LogsTest #test14MarsRoverChangesInDirectionLogTracingPositioning stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInDirectionLogTracingRotating stamp: 'AF 6/3/2023 14:02:58'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInDirectionLogTracingPositioning stamp: 'AF 6/3/2023 14:02:58'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:05:16'!
test15MarsRoverManyChangesInDirectionWindowTracing

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverDirectionWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'rrflb'.
	self assert: -1@-1 equals: (marsRoverCuriosityDirectionWindow show) .

	
! !

!testRun: #LogsTest #test15MarsRoverManyChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInDirectionLogTracingRotating stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInDirectionLogTracingPositioning stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 14:05:18'!
PASSED!

----SNAPSHOT----(3 June 2023 14:06:04) CuisUniversity-5799.image priorSource: 9371123!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:09:11'!
test04MarsRoverManyChangesInDirectionLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'frlflb'.
	self assert: (OrderedCollection with: (0@1) with: 'East'  with: 'North' with: 0@2 with: 'West' with: 1@1) equals: (marsRoverCuriosityDirectionLog show) .

	
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:09:22'!
test16MarsRoverManyChangesInDirectionLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'frlflb'.
	self assert: (OrderedCollection with: (0@1) with: 'East'  with: 'North' with: 0@2 with: 'West' with: 1@1) equals: (marsRoverCuriosityDirectionLog show) .

	
! !

!methodRemoval: LogsTest #test04MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:09:29'!
test04MarsRoverManyChangesInDirectionLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'frlflb'.
	self assert: (OrderedCollection with: (0@1) with: 'East'  with: 'North' with: 0@2 with: 'West' with: 1@1) equals: (marsRoverCuriosityDirectionLog show) .

	
!

!testRun: #LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:09:34'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:09:34'!
FAILURE!
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:37:41' prior: 50628064!
actuallyUpdatePosition
	log add: (marsRoverTracked position) .
	position := marsRoverTracked position.! !
!MarsRoverDirectionLog methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:37:55' prior: 50628069!
actuallyUpdateHeading
	log add: (marsRoverTracked heading nameOfHeading ) .
	heading  := marsRoverTracked heading.! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInDirectionLogTracingRotating stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInDirectionLogTracingPositioning stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 14:37:56'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:37:56'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:37:56'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:39:40' prior: 50628352!
test16MarsRoverManyChangesInDirectionLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverDirectionLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'frlflb'.
	self assert: (OrderedCollection with: (0@1) with: 'East'  with: 'North' with: 0@2 with: 'West' with: 1@2) equals: (marsRoverCuriosityDirectionLog show) .

	
! !

!testRun: #LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInDirectionLogTracingRotating stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInDirectionLogTracingPositioning stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:39:41'!
PASSED!

!classRenamed: #MarsRoverDirectionLog as: #MarsRoverGeographicLog stamp: 'AF 6/3/2023 14:53:57'!
Smalltalk renameClassNamed: #MarsRoverDirectionLog as: #MarsRoverGeographicLog!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:53:57' prior: 50627656!
test10MarsRoverNoChangesInDirectionLog

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	self assert: (marsRoverCuriosityDirectionLog show) isEmpty .
	
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:53:57' prior: 50628191!
test14MarsRoverChangesInDirectionLogTracingPositioning

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: (OrderedCollection with: 0@1) equals: marsRoverCuriosityDirectionLog show.

	
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:53:57' prior: 50628469!
test16MarsRoverManyChangesInDirectionLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'frlflb'.
	self assert: (OrderedCollection with: (0@1) with: 'East'  with: 'North' with: 0@2 with: 'West' with: 1@2) equals: (marsRoverCuriosityDirectionLog show) .

	
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:53:57' prior: 50628161!
test13MarsRoverChangesInDirectionLogTracingRotating

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'l'.

	self assert: (OrderedCollection with: 'West') equals: marsRoverCuriosityDirectionLog show.

	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInDirectionLogTracingRotating stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInDirectionLogTracingPositioning stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:54:04'!
PASSED!

!classRenamed: #MarsRoverDirectionWindow as: #MarsRoverGeographicWindow stamp: 'AF 6/3/2023 14:54:17'!
Smalltalk renameClassNamed: #MarsRoverDirectionWindow as: #MarsRoverGeographicWindow!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:54:17' prior: 50627876!
test12MarsRoverChangesInDirectionWindowTracingRotating

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: 'East' equals: (marsRoverCuriosityDirectionWindow show).

	
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:54:17' prior: 50627894!
test11MarsRoverChangesInDirectionWindowTracingPositioning

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: 0@1 equals: (marsRoverCuriosityDirectionWindow show).

	
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:54:17' prior: 50628260!
test15MarsRoverManyChangesInDirectionWindowTracing

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'rrflb'.
	self assert: -1@-1 equals: (marsRoverCuriosityDirectionWindow show) .

	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInDirectionLogTracingRotating stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInDirectionLogTracingPositioning stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:54:20'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:54:40'!
test11MarsRoverChangesInGeographicWindowTracingPositioning

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: 0@1 equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!methodRemoval: LogsTest #test11MarsRoverChangesInDirectionWindowTracingPositioning stamp: 'AF 6/3/2023 14:54:40'!
test11MarsRoverChangesInDirectionWindowTracingPositioning

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: 0@1 equals: (marsRoverCuriosityDirectionWindow show).

	
!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:54:59'!
test12MarsRoverChangesInGeographicWindowTracingRotating

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: 'East' equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!methodRemoval: LogsTest #test12MarsRoverChangesInDirectionWindowTracingRotating stamp: 'AF 6/3/2023 14:54:59'!
test12MarsRoverChangesInDirectionWindowTracingRotating

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: 'East' equals: (marsRoverCuriosityDirectionWindow show).

	
!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:55:10'!
test13MarsRoverChangesInGeographicLogTracingRotating

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'l'.

	self assert: (OrderedCollection with: 'West') equals: marsRoverCuriosityDirectionLog show.

	
! !

!methodRemoval: LogsTest #test13MarsRoverChangesInDirectionLogTracingRotating stamp: 'AF 6/3/2023 14:55:10'!
test13MarsRoverChangesInDirectionLogTracingRotating

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'l'.

	self assert: (OrderedCollection with: 'West') equals: marsRoverCuriosityDirectionLog show.

	
!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:55:21'!
test14MarsRoverChangesInGeographicLogTracingPositioning

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: (OrderedCollection with: 0@1) equals: marsRoverCuriosityDirectionLog show.

	
! !

!methodRemoval: LogsTest #test14MarsRoverChangesInDirectionLogTracingPositioning stamp: 'AF 6/3/2023 14:55:21'!
test14MarsRoverChangesInDirectionLogTracingPositioning

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: (OrderedCollection with: 0@1) equals: marsRoverCuriosityDirectionLog show.

	
!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:55:32'!
test15MarsRoverManyChangesInGeographicWindowTracing

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'rrflb'.
	self assert: -1@-1 equals: (marsRoverCuriosityDirectionWindow show) .

	
! !

!methodRemoval: LogsTest #test15MarsRoverManyChangesInDirectionWindowTracing stamp: 'AF 6/3/2023 14:55:32'!
test15MarsRoverManyChangesInDirectionWindowTracing

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'rrflb'.
	self assert: -1@-1 equals: (marsRoverCuriosityDirectionWindow show) .

	
!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 14:55:40'!
test16MarsRoverManyChangesInGeographicLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'frlflb'.
	self assert: (OrderedCollection with: (0@1) with: 'East'  with: 'North' with: 0@2 with: 'West' with: 1@2) equals: (marsRoverCuriosityDirectionLog show) .

	
! !

!methodRemoval: LogsTest #test16MarsRoverManyChangesInDirectionLogTracing stamp: 'AF 6/3/2023 14:55:40'!
test16MarsRoverManyChangesInDirectionLogTracing

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'frlflb'.
	self assert: (OrderedCollection with: (0@1) with: 'East'  with: 'North' with: 0@2 with: 'West' with: 1@2) equals: (marsRoverCuriosityDirectionLog show) .

	
!
!MarsRoverGeographicWindow methodsFor: 'updating' stamp: 'AF 6/3/2023 14:58:51' prior: 50627925 overrides: 50626317!
updateObservation

	| currentHeading currentPosition |
	currentHeading := marsRoverTracked heading .
	currentPosition  := marsRoverTracked position .
	(currentHeading = heading) ifFalse: [heading := currentHeading.] .
	(currentPosition = position ) ifFalse: [position := currentPosition .] ! !
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 14:59:31' prior: 50627769!
show
	^OrderedCollection with: position with: heading .! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 14:59:32'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:59:32'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:59:32'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 14:59:32'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 14:59:32'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 14:59:32'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:59:32'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:59:32'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 14:59:33'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 14:59:33'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 14:59:33'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 14:59:33'!
FAILURE!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 14:59:33'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 14:59:33'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 14:59:33'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 14:59:33'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 14:59:33'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 15:00:24' prior: 50628780!
test11MarsRoverChangesInGeographicWindowTracingPositioning

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: (OrderedCollection with: 0@1 with:nil) equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:00:26'!
FAILURE!
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 15:00:53' prior: 50628981!
show
	^OrderedCollection with: position with: heading nameOfHeading.! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:00:59'!
FAILURE!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:00:59'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:00:59'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:00:59'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:01:02'!
FAILURE!
!MarsRoverGeographicWindow methodsFor: 'initialization' stamp: 'AF 6/3/2023 15:01:40' prior: 50627782 overrides: 50626503!
initializeSpecificObserver: aMarsRover
	"heading := aMarsRover heading.
	position := aMarsRover position."! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:01:41'!
FAILURE!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:01:41'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:01:41'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:01:41'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:01:44'!
FAILURE!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:02:53'!
FAILURE!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:02:53'!
FAILURE!
!MarsRoverGeographicWindow methodsFor: 'initialization' stamp: 'AF 6/3/2023 15:03:49' prior: 50629132 overrides: 50626503!
initializeSpecificObserver: aMarsRover
	heading := aMarsRover heading.
	position := aMarsRover position.! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:03:58'!
FAILURE!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:03:58'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:03:58'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:03:58'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:03:58'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 15:04:06' prior: 50629044!
test11MarsRoverChangesInGeographicWindowTracingPositioning

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: (OrderedCollection with: 0@1 with:'North') equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:04:08'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:04:08'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:04:08'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:04:17'!
FAILURE!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:04:17'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 15:04:49' prior: 50628810!
test12MarsRoverChangesInGeographicWindowTracingRotating

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: (OrderedCollection with: 0@0 with: 'East') equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:04:56'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:04:56'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:04:56'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 15:05:27' prior: 50628902!
test15MarsRoverManyChangesInGeographicWindowTracing

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'rrflb'.
	self assert: (OrderedCollection with: -1@-1 with: 'East') equals: (marsRoverCuriosityDirectionWindow show) .

	
! !

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:05:29'!
PASSED!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 15:07:30'!
test10MarsRoverNoChangesInGeographicLog

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	self assert: (marsRoverCuriosityDirectionLog show) isEmpty .
	
! !

!methodRemoval: LogsTest #test10MarsRoverNoChangesInDirectionLog stamp: 'AF 6/3/2023 15:07:30'!
test10MarsRoverNoChangesInDirectionLog

	
	| marsRoverCuriosityDirectionLog |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionLog := MarsRoverGeographicLog forTracing: marsRoverCuriosity.

	self assert: (marsRoverCuriosityDirectionLog show) isEmpty .
	
!
!MarsRoverGeographicWindow methodsFor: 'updating' stamp: 'AF 6/3/2023 15:11:43' prior: 50628968 overrides: 50626317!
updateObservation

	| currentHeading currentPosition |
	currentHeading := marsRoverTracked heading .
	currentPosition  := marsRoverTracked position .
	(currentHeading = heading ) ifFalse: [heading := currentHeading.] .
	(currentPosition = position ) ifFalse: [position := currentPosition .] ! !
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 15:12:24'!
showBoth
	^OrderedCollection with: position with: heading nameOfHeading.! !
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 15:12:43'!
showPosition
	^position.! !
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 15:12:59'!
showHeading
	^heading nameOfHeading.! !

!methodRemoval: MarsRoverGeographicWindow #show stamp: 'AF 6/3/2023 15:13:05'!
show
	^OrderedCollection with: position with: heading nameOfHeading.!
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 15:13:50'!
show
	^''.! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInGeographicLog stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:13:54'!
FAILURE!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:13:54'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:13:54'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:13:54'!
PASSED!

!classDefinition: #MarsRoverGeographicWindow category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 15:14:35'!
MarsRoverObserver subclass: #MarsRoverGeographicWindow
	instanceVariableNames: 'lastChange heading position hasMovedHead'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!

!classDefinition: #MarsRoverGeographicWindow category: 'MarsRover-WithHeading' stamp: 'AF 6/3/2023 15:14:37'!
MarsRoverObserver subclass: #MarsRoverGeographicWindow
	instanceVariableNames: 'lastChange heading position hasMovedHead hasMovedPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover-WithHeading'!
!MarsRoverGeographicWindow methodsFor: 'initialization' stamp: 'AF 6/3/2023 15:14:32' prior: 50629209 overrides: 50626503!
initializeSpecificObserver: aMarsRover
	heading := aMarsRover heading.
	position := aMarsRover position.
	hasMovedHead := false.
	hasMovedPosition := false.
! !

2@2 !!= 3@4!

(2@2) !!= (3@4)!

(2@2) = (3@4) not!

((2@2) = (3@4)) not!

((2@2) = (3@4)) not!
!MarsRoverGeographicWindow methodsFor: 'updating' stamp: 'AF 6/3/2023 15:19:08' prior: 50629543 overrides: 50626317!
updateObservation

	| currentHeading currentPosition |
	currentHeading := marsRoverTracked heading .
	currentPosition  := marsRoverTracked position .
	((currentHeading = heading ))  ifFalse: [heading := currentHeading.] .
	(currentPosition = position ) ifFalse: [position := currentPosition .] ! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:19:09'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:19:09'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:19:09'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInGeographicLog stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:19:10'!
FAILURE!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:19:10'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:19:10'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:19:10'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:19:10'!
PASSED!
!MarsRoverGeographicWindow methodsFor: 'checking' stamp: 'AF 6/3/2023 15:20:35'!
isPositionUpdateNecesary
^true.! !
!MarsRoverGeographicWindow methodsFor: 'checking' stamp: 'AF 6/3/2023 15:20:41'!
isHeadingUpdateNecesary
^true.! !
!MarsRoverGeographicWindow methodsFor: 'checking' stamp: 'AF 6/3/2023 15:21:59' prior: 50629742!
isHeadingUpdateNecesary
^((marsRoverTracked heading) = heading ) not.! !
!MarsRoverGeographicWindow methodsFor: 'checking' stamp: 'AF 6/3/2023 15:22:19' prior: 50629738!
isPositionUpdateNecesary
^((marsRoverTracked position ) = position ) not.! !
!MarsRoverGeographicWindow methodsFor: 'updating' stamp: 'AF 6/3/2023 15:24:58' prior: 50629668 overrides: 50626317!
updateObservation

	| currentHeading currentPosition |
	currentHeading := marsRoverTracked heading .
	currentPosition  := marsRoverTracked position .
	(self isHeadingUpdateNecesary) ifTrue: [heading := currentHeading. hasMovedHead := true.] .
	(self isPositionUpdateNecesary )  ifTrue: [position := currentPosition . hasMovedPosition := true.] .! !
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 15:26:47' prior: 50629573!
show
	(hasMovedHead and: [hasMovedPosition ]) ifTrue: [^self showBoth ].! !
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 15:28:07' prior: 50629774!
show
	(hasMovedHead and: [hasMovedPosition ]) ifTrue: [^self showBoth ].
	(hasMovedHead and: [hasMovedPosition not]) ifTrue: [^self showHeading ].
	((hasMovedHead not) and: [hasMovedPosition ]) ifTrue: [^self showPosition ].
	((hasMovedHead not) and: [hasMovedPosition not]) ifTrue: [^self showNothing ].! !
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/3/2023 15:28:21'!
showNothing
	^'nada'! !

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:28:26'!
FAILURE!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:28:26'!
FAILURE!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInGeographicLog stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:28:26'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:28:29'!
FAILURE!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:28:29'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 15:28:47' prior: 50629273!
test11MarsRoverChangesInGeographicWindowTracingPositioning

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'f'.

	self assert: 0@1 equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInGeographicLog stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:29:00'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:29:00'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:29:00'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/3/2023 15:29:10' prior: 50629358!
test12MarsRoverChangesInGeographicWindowTracingRotating

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: ('East') equals: (marsRoverCuriosityDirectionWindow show).

	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInGeographicLog stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/3/2023 15:29:16'!
PASSED!

----SNAPSHOT----(3 June 2023 15:30:47) CuisUniversity-5799.image priorSource: 9493800!

----STARTUP---- (4 June 2023 23:52:50) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5799.image!


'asd', 'as'!
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/4/2023 23:55:20' prior: 50629555!
showBoth
	^OrderedCollection with: position with: ('Apuntando al ', (heading nameOfHeading)).! !
!MarsRoverGeographicWindow methodsFor: 'display' stamp: 'AF 6/4/2023 23:55:42' prior: 50629564!
showHeading
	^('Apuntando al ', (heading nameOfHeading)).! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/4/2023 23:55:54'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/4/2023 23:55:54'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/4/2023 23:55:54'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/4/2023 23:55:54'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInGeographicLog stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/4/2023 23:55:55'!
FAILURE!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/4/2023 23:55:55'!
FAILURE!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/4/2023 23:55:55'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/4/2023 23:56:00'!
FAILURE!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/4/2023 23:56:00'!
FAILURE!
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/4/2023 23:56:19' prior: 50629939!
test12MarsRoverChangesInGeographicWindowTracingRotating

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'r'.

	self assert: ('Apuntando al East') equals: (marsRoverCuriosityDirectionWindow show).

	
! !
!LogsTest methodsFor: 'as yet unclassified' stamp: 'AF 6/4/2023 23:56:32' prior: 50629439!
test15MarsRoverManyChangesInGeographicWindowTracing

	
	| marsRoverCuriosityDirectionWindow |
	marsRoverCuriosity := MarsRover at: 0@0 heading: MarsRoverHeadingNorth .
	marsRoverCuriosityDirectionWindow := MarsRoverGeographicWindow forTracing: marsRoverCuriosity.

	marsRoverCuriosity process: 'rrflb'.
	self assert: (OrderedCollection with: -1@-1 with: 'Apuntando al East') equals: (marsRoverCuriosityDirectionWindow show) .

	
! !

!testRun: #LogsTest #test00MarsRoverNoChangesInPosition stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test01MarsRoverChangesInPositionWindowTracing stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test02MarsRoverChangesInPositionLogTracing stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test03MarsRoverManyChangesInPositionWindowTracing stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test04MarsRoverManyChangesInPositionLogTracing stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test05MarsRoverNoChangesInHeadingLog stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test06MarsRoverChangesInHeadingWindowTracing stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test07MarsRoverChangesInHeadingLogTracing stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test08MarsRoverManyChangesInHeadingWindowTracing stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test09MarsRoverManyChangesInHeadingLogTracing stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test10MarsRoverNoChangesInGeographicLog stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test11MarsRoverChangesInGeographicWindowTracingPositioning stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test12MarsRoverChangesInGeographicWindowTracingRotating stamp: 'AF 6/4/2023 23:56:41'!
PASSED!

!testRun: #LogsTest #test13MarsRoverChangesInGeographicLogTracingRotating stamp: 'AF 6/4/2023 23:56:42'!
PASSED!

!testRun: #LogsTest #test14MarsRoverChangesInGeographicLogTracingPositioning stamp: 'AF 6/4/2023 23:56:42'!
PASSED!

!testRun: #LogsTest #test15MarsRoverManyChangesInGeographicWindowTracing stamp: 'AF 6/4/2023 23:56:42'!
PASSED!

!testRun: #LogsTest #test16MarsRoverManyChangesInGeographicLogTracing stamp: 'AF 6/4/2023 23:56:42'!
PASSED!

----SNAPSHOT----(4 June 2023 23:57:03) CuisUniversity-5799.image priorSource: 9547537!

----SNAPSHOT----(4 June 2023 23:59:27) CuisUniversity-5799.image priorSource: 9553122!