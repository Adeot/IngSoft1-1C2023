

----QUIT----(12 May 2023 17:49:00) CuisUniversity-5799.image priorSource: 4801971!

----STARTUP---- (12 May 2023 17:49:01) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5799.image!


----QUIT----(12 May 2023 17:49:01) CuisUniversity-5799.image priorSource: 9222569!

----STARTUP---- (22 May 2023 21:18:49) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5799.image!


----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\06-Portfolio1\Portfolio1-Solucion\Portfolio-Solucion.st----!

AccountTransaction subclass: #Transaction
	instanceVariableNames: 'value recipient sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transaction category: 'Portfolio-Solucion' stamp: 'AF 5/22/2023 21:21:00'!
AccountTransaction subclass: #Transaction
	instanceVariableNames: 'value recipient sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transaction class methodsFor: 'nil' stamp: 'AF 5/22/2023 21:24:16'!
newFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	^(aValue <0) ifTrue: [self error: (self invalidTransactionAmount)] 
	ifFalse: [(self new) initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue]! !
!Transaction class methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:24:55'!
invalidTransactionAmount
	^'The value must be a positive number in order to be a valid transaction'.! !
!Transaction methodsFor: 'nil' stamp: 'AF 5/22/2023 21:25:39'!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .! !

TestCase subclass: #TransactionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionsTest category: 'Portfolio-Solucion' stamp: 'AF 5/22/2023 21:26:37'!
TestCase subclass: #TransactionsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionsTest methodsFor: 'nil' stamp: 'AF 5/22/2023 21:28:37'!
test01aTransactionCantHaveNegativeValue
	| recipientAccount senderAccount transaction1 |
	senderAccount := ReceptiveAccount new.
	recipientAccount := ReceptiveAccount new.

	transaction1 := Transaction newFrom: senderAccount  to: recipientAccount withValue: 100.
	! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:28:45' prior: 50620639!
test01aTransactionCantHaveNegativeValue
	| recipientAccount senderAccount transaction1 |
	senderAccount := ReceptiveAccount new.
	recipientAccount := ReceptiveAccount new.

	transaction1 := Transaction newFrom: senderAccount  to: recipientAccount withValue: -100.
	! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:30:49' prior: 50620651!
test01aTransactionCantHaveNegativeValue
	| recipientAccount senderAccount invalidOperation |
	senderAccount := ReceptiveAccount new.
	recipientAccount := ReceptiveAccount new.

	invalidOperation := [Transaction newFrom: senderAccount  to: recipientAccount withValue: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transaction invalidTransactionAmount equals: anError messageText. ]! !

!testRun: #TransactionsTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/22/2023 21:30:54'!
PASSED!

!testRun: #TransactionsTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/22/2023 21:30:54'!
PASSED!
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:32:06' overrides: 16961394!
setUp
	| recipientAccount senderAccount transaction1 |
	senderAccount := ReceptiveAccount new.
	recipientAccount := ReceptiveAccount new.
	
	transaction1 := Transaction newFrom: senderAccount  to: recipientAccount withValue: 100.
	! !

!classDefinition: #TransactionsTest category: 'Portfolio-Solucion' stamp: 'AF 5/22/2023 21:32:47'!
TestCase subclass: #TransactionsTest
	instanceVariableNames: 'senderAccount1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransactionsTest category: 'Portfolio-Solucion' stamp: 'AF 5/22/2023 21:32:48'!
TestCase subclass: #TransactionsTest
	instanceVariableNames: 'senderAccount1 recipientAccount1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:32:53' prior: 50620688 overrides: 16961394!
setUp
	senderAccount1 := ReceptiveAccount new.
	recipientAccount1 := ReceptiveAccount new.
		! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:33:20' prior: 50620663!
test01aTransactionCantHaveNegativeValue
	| invalidOperation |

	invalidOperation := [Transaction newFrom: senderAccount1  to: recipientAccount1 withValue: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transaction invalidTransactionAmount equals: anError messageText. ]! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:33:26' prior: 50620723!
test01aTransactionCantHaveNegativeValue
	
	| invalidOperation |
	invalidOperation := [Transaction newFrom: senderAccount1  to: recipientAccount1 withValue: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transaction invalidTransactionAmount equals: anError messageText. ]! !
!Transaction class methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:33:46' prior: 50620603!
newFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	^(aValue <= 0) ifTrue: [self error: (self invalidTransactionAmount)] 
	ifFalse: [(self new) initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue]! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:35:39'!
test02aTransactionModifiesBalanceOfItsAccounts
	
	| transaction1 |
	transaction1 := Transaction newFrom: senderAccount1  to: recipientAccount1 withValue: 50.
	
	self assert: -50 equals: (senderAccount1 balance).
	self assert: 50 equals: (recipientAccount1 balance).! !

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:35:42'!
FAILURE!
!Transaction methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:36:27' prior: 50620619!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/22/2023 21:40:28'!
transferMoneyTo: aReceptiveAccount anAmountOf: aValue
^self.
	! !

----SNAPSHOT----(22 May 2023 21:42:51) CuisUniversity-5799.image priorSource: 9222790!

!classRenamed: #Transaction as: #Transfer stamp: 'AF 5/22/2023 21:50:18'!
Smalltalk renameClassNamed: #Transaction as: #Transfer!
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:50:18' prior: 50620737!
test01aTransactionCantHaveNegativeValue
	
	| invalidOperation |
	invalidOperation := [Transfer newFrom: senderAccount1  to: recipientAccount1 withValue: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transfer invalidTransactionAmount equals: anError messageText. ]! !
!TransactionsTest methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:50:18' prior: 50620761!
test02aTransactionModifiesBalanceOfItsAccounts
	
	| transaction1 |
	transaction1 := Transfer newFrom: senderAccount1  to: recipientAccount1 withValue: 50.
	
	self assert: -50 equals: (senderAccount1 balance).
	self assert: 50 equals: (recipientAccount1 balance).! !

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:50:37'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/22/2023 21:52:04' prior: 50620777!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	Withdraw register: aValue on: aSenderAccount.
	Deposit register: aValue on: aRecipientAccount .
! !

!testRun: #TransactionsTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/22/2023 21:52:06'!
PASSED!

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:52:06'!
PASSED!

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:52:13'!
PASSED!

!testRun: #TransactionsTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/22/2023 21:52:17'!
PASSED!

!testRun: #TransactionsTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/22/2023 21:52:17'!
PASSED!

!classRenamed: #TransactionsTest as: #TransFERTest stamp: 'AF 5/22/2023 21:52:27'!
Smalltalk renameClassNamed: #TransactionsTest as: #TransFERTest!

!classRenamed: #TransFERTest as: #TransferTest stamp: 'AF 5/22/2023 21:52:35'!
Smalltalk renameClassNamed: #TransFERTest as: #TransferTest!

----SNAPSHOT----(22 May 2023 21:58:14) CuisUniversity-5799.image priorSource: 9252449!

Object subclass: #Transfer
	instanceVariableNames: 'value recipient sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AF 5/24/2023 18:47:00'!
Object subclass: #Transfer
	instanceVariableNames: 'value recipient sender'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/24/2023 18:49:52' prior: 50620827!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	"aSenderAccount vosRegistraQueSosSenderDeMi: self."
	Withdraw register: aValue on: aSenderAccount.
	Deposit register: aValue on: aRecipientAccount .
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:11:38'!
sender
	^sender.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:12:03'!
recipient
	^recipient.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:12:04'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:12:04'!
PASSED!

AccountTransaction subclass: #TransferRecipient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRecipient category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 12:13:59'!
AccountTransaction subclass: #TransferRecipient
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

AccountTransaction subclass: #TransferSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferSender category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 12:14:04'!
AccountTransaction subclass: #TransferSender
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferRecipient class methodsFor: 'nil' stamp: 'AF 5/26/2023 12:17:23'!
for: aTransfer
	^ self new initializeFor: aTransfer! !
!TransferSender class methodsFor: 'nil' stamp: 'AF 5/26/2023 12:17:30'!
for: aTransfer
	^ self new initializeFor: aTransfer! !

AccountTransaction subclass: #TransferRecipient
	instanceVariableNames: 'fromTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferRecipient category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 12:18:11'!
AccountTransaction subclass: #TransferRecipient
	instanceVariableNames: 'fromTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferRecipient methodsFor: 'nil' stamp: 'AF 5/26/2023 12:18:44'!
initializeFor: aTransfer

	fromTransfer = aTransfer.! !

!classDefinition: #TransferSender category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 12:18:52'!
AccountTransaction subclass: #TransferSender
	instanceVariableNames: 'fromTransfer'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferSender methodsFor: 'nil' stamp: 'AF 5/26/2023 12:18:50'!
initializeFor: aTransfer

	fromTransfer = aTransfer.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 5/26/2023 12:19:12'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:19:15'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:19:15'!
PASSED!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:41:02' overrides: 50620489!
affectBalance: aBalance

	^fromTransfer affectBalanceFromRecipient: aBalance.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:41:38' overrides: 50620489!
affectBalance: aBalance

	^fromTransfer affectBalanceFromSender: aBalance.! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:43:30'!
affectBalanceFromRecipient: aBalance
	^aBalance + value .
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:43:43'!
affectBalanceFromSender: aBalance
	^aBalance - value .
! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:45:04' prior: 50620881!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	
	"aSenderAccount vosRegistraQueSosSenderDeMi: self."
	"Withdraw register: aValue on: aSenderAccount.
	Deposit register: aValue on: aRecipientAccount ."
! !
!AccountTransaction class methodsFor: 'instance creation' stamp: 'AF 5/26/2023 12:50:22'!
registerFromTransfer: aTransfer on: account

	| transaction |
	transaction := self for: aTransfer.
	account register: transaction.	
	^ transaction! !

!methodRemoval: AccountTransaction class #registerFromTransfer:on: stamp: 'AF 5/26/2023 12:51:19'!
registerFromTransfer: aTransfer on: account

	| transaction |
	transaction := self for: aTransfer.
	account register: transaction.	
	^ transaction!
!AccountTransaction class methodsFor: 'instance creation' stamp: 'AF 5/26/2023 12:51:45' prior: 50620503!
register: aValueOrTransfer on: account

	| transaction |
	
	transaction := self for: aValueOrTransfer.
	account register: transaction.
		
	^ transaction! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:53:06' prior: 50621058!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .
	
	"aSenderAccount vosRegistraQueSosSenderDeMi: self."
	TransferSender register: self on: aSenderAccount.
	TransferRecipient register: self on: aRecipientAccount .
! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:53:10'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:53:10'!
ERROR!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:53:10'!
ERROR!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:55:12'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:55:24'!
ERROR!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:55:24'!
ERROR!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:56:05' prior: 50620955!
initializeFor: aTransfer

	fromTransfer := aTransfer.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 12:56:15' prior: 50620967!
initializeFor: aTransfer

	fromTransfer := aTransfer.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 12:56:28'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 12:56:28'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 12:59:14' prior: 50620785!
transferMoneyTo: aReceptiveAccount anAmountOf: aValue
	Transfer newFrom: self  to: aReceptiveAccount withValue: aValue
	^self.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 12:59:15'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 12:59:16'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 12:59:16'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:00:41' prior: 50620798!
test01aTransactionCantHaveNegativeValue
	
	| invalidOperation |
	invalidOperation := [senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: -100.].
	self 
		should: [ invalidOperation value. ]
		raise: Error 
		withExceptionDo: [ :anError |
			self assert: Transfer invalidTransactionAmount equals: anError messageText. ]! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:00:42'!
FAILURE!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:01:17'!
FAILURE!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:01:33' prior: 50621146!
transferMoneyTo: aReceptiveAccount anAmountOf: aValue
	^Transfer newFrom: self  to: aReceptiveAccount withValue: aValue.
	! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:01:34'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:01:38'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:01:38'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:02:06' prior: 50620812!
test02aTransactionModifiesBalanceOfItsAccounts
	
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	
	self assert: -50 equals: (senderAccount1 balance).
	self assert: 50 equals: (recipientAccount1 balance).! !

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:02:07'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:02:07'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:02:07'!
PASSED!

!methodRemoval: AccountTransaction #value stamp: 'AF 5/26/2023 13:04:18'!
value 

	self subclassResponsibility !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 5/26/2023 13:04:23'!
PASSED!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:04:25'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:04:27'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:04:27'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:04:30'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:04:30'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:05:25'!
test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts
	
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.

	
	self assert: -50 equals: (senderAccount1 balance).
	self assert: 50 equals: (recipientAccount1 balance).! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:06:11' prior: 50621095!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .

	TransferSender register: self on: aSenderAccount.
	TransferRecipient register: self on: aRecipientAccount .
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:08:00' prior: 50621362!
test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts
	
	| deposit1 withdraw1 |
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	
	self assert: 60 equals: (senderAccount1 balance).
	self assert: 30 equals: (recipientAccount1 balance).! !

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:08:06'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:08:07'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:08:07'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:08:07'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:09:31' prior: 50621373!
initializeFrom: aSenderAccount  to: aRecipientAccount withValue: aValue
	sender  := aSenderAccount .
	recipient := aRecipientAccount .
	value  := aValue .

	TransferSender register: self on: aSenderAccount.
	TransferRecipient register: self on: aRecipientAccount .
	^self.
! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:10:29'!
test04anAccountHasRegisteredItsTransfer
	
	| deposit1 withdraw1 |
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	
	self assert: 60 equals: (senderAccount1 balance).
	self assert: 30 equals: (recipientAccount1 balance).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:12:23'!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	
	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: transfer1).! !

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:12:28'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:13:15' prior: 50621441!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	self halt.
	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: transfer1).! !

----SNAPSHOT----(26 May 2023 13:20:04) CuisUniversity-5799.image priorSource: 9254844!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:22:56' prior: 50621129!
initializeFor: aTransfer

	fromTransfer := aTransfer.
	aTransfer transferRecipientTransactionIs: self.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:23:13' prior: 50621134!
initializeFor: aTransfer

	fromTransfer := aTransfer.
	aTransfer transferRecipientSenderIs: self.! !

Object subclass: #Transfer
	instanceVariableNames: 'value recipient sender transferRecipientTransaction transferSenderTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Transfer category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 13:23:51'!
Object subclass: #Transfer
	instanceVariableNames: 'value recipient sender transferRecipientTransaction transferSenderTransaction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:24:51'!
transferRecipientTransactionIs: aTransferRecipient.
	transferRecipientTransaction := aTransferRecipient .! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:25:38'!
transferSenderTransactionIs: aTransferSenderTransaction.
	transferSenderTransaction := aTransferSenderTransaction.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:25:39'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:25:39'!
ERROR!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:25:39'!
ERROR!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransfer stamp: 'AF 5/26/2023 13:25:39'!
ERROR!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:25:39'!
ERROR!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:25:55'!
ERROR!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:25:55'!
ERROR!
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:26:33' prior: 50621487!
initializeFor: aTransfer

	fromTransfer := aTransfer.
	aTransfer transferSenderTransactionIs: self.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:26:38'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:26:38'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:26:38'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransfer stamp: 'AF 5/26/2023 13:26:39'!
PASSED!

!methodRemoval: TransferTest #test04anAccountHasRegisteredItsTransfer stamp: 'AF 5/26/2023 13:26:55'!
test04anAccountHasRegisteredItsTransfer
	
	| deposit1 withdraw1 |
	senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	
	self assert: 60 equals: (senderAccount1 balance).
	self assert: 30 equals: (recipientAccount1 balance).!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:26:58'!
PASSED!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:27:33'!
transferSender
	^transferSenderTransaction! !
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:27:46'!
transferRecipient
	^transferRecipientTransaction! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:28:41' prior: 50621461!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.
	self halt.
	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: (transfer1 transferSender )).! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:28:51' prior: 50621595!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.

	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: (transfer1 transferSender )).! !

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:28:53'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:28:53'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:28:53'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:28:53'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:28:53'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:29:43' prior: 50621612!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.

	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: (transfer1 transferSender )).
	self deny: (senderAccount1 hasRegistered: withdraw1 ).
	self deny: (senderAccount1 hasRegistered: (transfer1 transferRecipient )).! !

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:29:44'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:29:44'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:29:44'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:29:44'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:29:44'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:30:52' prior: 50621648!
test04anAccountHasRegisteredItsTransferAndOtherTransactions
	
	| deposit1 withdraw1 transfer1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	deposit1 := Deposit register: 110 on: senderAccount1.
	withdraw1 := Withdraw register: 20 on: recipientAccount1.

	self assert: (senderAccount1 hasRegistered: deposit1).
	self assert: (senderAccount1 hasRegistered: (transfer1 transferSender )).
	self deny: (senderAccount1 hasRegistered: withdraw1 ).
	self deny: (senderAccount1 hasRegistered: (transfer1 transferRecipient )).
	
	self deny: (recipientAccount1 hasRegistered: deposit1).
	self deny: (recipientAccount1 hasRegistered: (transfer1 transferSender )).
	self assert: (recipientAccount1 hasRegistered: withdraw1 ).
	self assert: (recipientAccount1 hasRegistered: (transfer1 transferRecipient )).! !

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:30:53'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:30:53'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:30:53'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:30:53'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:30:53'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:36:48'!
test05aSenderWithATransferCanKnowItsRecipient
	
	| transfer1 transferSenderTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferSenderTransaction1 := transfer1 transferSender.
	self assert: recipientAccount1 equals: (senderAccount1 recipientOfTransferSend: transferSenderTransaction1 ).
	! !

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:36:58'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:43:09'!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
	ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide reciever']! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:44:33'!
recipient
	^self.! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:44:58'!
sender
	^fromTransfer sender .! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:45:13'!
sender
	^self.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:45:42'!
recipient
	^fromTransfer recipient .! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:46:38' prior: 50621753!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
	ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide reciever'].
	aTransferSenderTransaction1 recipient .! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:46:43'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:46:43'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:46:43'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:46:43'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:46:43'!
FAILURE!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:46:43'!
FAILURE!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:48:05'!
FAILURE!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:49:55' prior: 50621736!
test05aSenderWithATransferCanKnowItsRecipient
	
	| transfer1 transferSenderTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferSenderTransaction1 := transfer1 transferSender.
	self assert: senderAccount1 equals: (senderAccount1 recipientOfTransferSend: transferSenderTransaction1 ).
	! !

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:49:56'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:49:56'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:50:09' prior: 50621823!
test05aSenderWithATransferCanKnowItsRecipient
	
	| transfer1 transferSenderTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferSenderTransaction1 := transfer1 transferSender.
	self assert:  recipientAccount1 equals: (senderAccount1 recipientOfTransferSend: transferSenderTransaction1 ).
	! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:50:28' prior: 50621783!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
	ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide reciever'].
	^aTransferSenderTransaction1 recipient .! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:50:29'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:50:35'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:50:35'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:50:35'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:50:35'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:50:35'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:52:26'!
test06aRecipientWithATransferCanKnowItsSender
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	self assert: senderAccount1 equals: (senderAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:52:29'!
ERROR!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:54:18'!
senderOfTransferRecipient: aTransferRecipientTransaction
	| aTransferRecipientTransaction1 |
	aTransferRecipientTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferRecipientTransaction)] 
	ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide sender'].
	^aTransferRecipientTransaction1 sender.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:54:19'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:54:29'!
ERROR!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:54:29'!
ERROR!

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/26/2023 13:55:20'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:55:25'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:55:27'!
ERROR!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:55:27'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:56:18' prior: 50621932!
test06aRecipientWithATransferCanKnowItsSender
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	self assert: (recipientAccount1 hasRegistered: transferRecipientTransaction1).
	self assert: senderAccount1 equals: (senderAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:19'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:56:40' prior: 50622034!
test06aRecipientWithATransferCanKnowItsSender
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	self assert: (recipientAccount1 hasRegistered: transferRecipientTransaction1).
	self assert: senderAccount1 equals: (recipientAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:56:41'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:41'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 13:56:46' prior: 50622055!
test06aRecipientWithATransferCanKnowItsSender
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	self assert: senderAccount1 equals: (recipientAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 13:56:47'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 13:56:47'!
PASSED!
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 13:59:58' prior: 50621949!
senderOfTransferRecipient: aTransferRecipientTransaction
	| aTransferRecipientTransaction1 |
	aTransferRecipientTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferRecipientTransaction)] 
							ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide sender'].
	^aTransferRecipientTransaction1 sender.! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 14:00:11' prior: 50621873!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
							ifNone: [^self error: 'This Transfer was not made by this account, therefore cant provide reciever'].
	^aTransferSenderTransaction1 recipient .! !
!ReceptiveAccount class methodsFor: 'nil' stamp: 'AF 5/26/2023 14:00:56'!
invalidRequestOfTransferInformation
^''! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 14:02:03' prior: 50622138!
senderOfTransferRecipient: aTransferRecipientTransaction
	| aTransferRecipientTransaction1 |
	aTransferRecipientTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferRecipientTransaction)] 
							ifNone: [^self error: ((self class) invalidRequestOfTransferInformation )].
	^aTransferRecipientTransaction1 sender.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:02:10' prior: 50622167!
invalidRequestOfTransferInformation
^'This Transfer was not made by this account, therefore cant provide sender'! !
!ReceptiveAccount methodsFor: 'transactions' stamp: 'AF 5/26/2023 14:02:47' prior: 50622153!
recipientOfTransferSend: aTransferSenderTransaction
	| aTransferSenderTransaction1 |
	aTransferSenderTransaction1 := transactions detect: [:aTransaction | (aTransaction == aTransferSenderTransaction)] 
							ifNone: [^self error: ((self class) invalidRequestOfTransferInformation )].
	^aTransferSenderTransaction1 recipient .! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:03:32' prior: 50622187!
invalidRequestOfTransferInformation
^'This Transfer was not made by this account, therefore cant provide sender nor reciever'! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 14:03:55'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 14:03:55'!
PASSED!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:05:03'!
test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs
	
	| transfer1 transferRecipientTransaction1 |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	
	self assert: senderAccount1 equals: (recipientAccount1 senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:06:31' prior: 50622237!
test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs
	
	| transfer1 transferRecipientTransaction1 outsiderAccount |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	
	outsiderAccount := ReceptiveAccount new.
	
	self assert: senderAccount1 equals: (outsiderAccount senderOfTransferRecipient: transferRecipientTransaction1 ).
	! !

!testRun: #TransferTest #test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs stamp: 'AF 5/26/2023 14:06:33'!
ERROR!
!TransferTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 14:08:06' prior: 50622252!
test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs
	
	| transfer1 transferRecipientTransaction1 outsiderAccount |
	transfer1 := senderAccount1 transferMoneyTo: recipientAccount1 anAmountOf: 50.
	transferRecipientTransaction1 := transfer1 transferRecipient .
	
	outsiderAccount := ReceptiveAccount new.
	
	self 
		should: [  (outsiderAccount senderOfTransferRecipient: transferRecipientTransaction1 )]
		raise: Error
		withExceptionDo: [ :anError |
			self assert: ReceptiveAccount invalidRequestOfTransferInformation equals: anError messageText.]
	! !

!testRun: #TransferTest #test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

!testRun: #TransferTest #test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs stamp: 'AF 5/26/2023 14:08:07'!
PASSED!

----SNAPSHOT----(26 May 2023 14:08:25) CuisUniversity-5799.image priorSource: 9274433!

cuenta1 := ReceptiveAccount new.
!

cuenta1 := ReceptiveAccount new.
cuenta2 := ReceptiveAccount new.
!

ReceptiveAccount allClassVarNames !

ReceptiveAccount allInstances !

ReceptiveAccount allInstances!

cuenta1 := ReceptiveAccount new.
cuenta2 := ReceptiveAccount new.!

ReceptiveAccount allInstances!

ReceptiveAccount allInstances!
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:42:35' prior: 50621766!
recipient
	^fromTransfer recipient .! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:42:41' prior: 50621774!
sender
	^fromTransfer sender.! !

!testRun: #TransferTest #test01aTransactionCantHaveNegativeValue stamp: 'AF 5/26/2023 15:42:46'!
PASSED!

!testRun: #TransferTest #test02aTransactionModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test03aTransferAndWithdrawAndDepositModifiesBalanceOfItsAccounts stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test04anAccountHasRegisteredItsTransferAndOtherTransactions stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test05aSenderWithATransferCanKnowItsRecipient stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test06aRecipientWithATransferCanKnowItsSender stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

!testRun: #TransferTest #test07aRecipientWithATransferOnlyKnowItsSenderIfItsTheirs stamp: 'AF 5/26/2023 15:42:47'!
PASSED!

Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #Report category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 15:43:58'!
Object subclass: #Report
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

Report subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 15:44:09'!
Report subclass: #AccountReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #ReportTest category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 15:44:25'!
TestCase subclass: #ReportTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'nil' stamp: 'AF 5/26/2023 15:47:04'!
test01aReportOfNewAccountIsOnlyBalance0
	| cuenta1 reporteCuenta1 |
	cuenta1 := ReceptiveAccount new.
	reporteCuenta1 := AccountReport new.! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:48:20' prior: 50622405!
test01aReportOfNewAccountIsOnlyBalance0
	| cuenta1 reporteCuenta1 |
	cuenta1 := ReceptiveAccount new.
	reporteCuenta1 := AccountReport newOfAccount: cuenta1.
	self assert: 'Balance = 0' equals: reporteCuenta1 print.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:48:21'!
ERROR!
!AccountReport class methodsFor: 'nil' stamp: 'AF 5/26/2023 15:50:58'!
newOfAccount: anAccount
	^(self new) initializeReportOf: anAccount.! !

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'AF 5/26/2023 15:51:33'!
Report subclass: #AccountReport
	instanceVariableNames: 'accountToBeReported'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport methodsFor: 'nil' stamp: 'AF 5/26/2023 15:51:32'!
initializeReportOf: anAccount
	accountToBeReported := anAccount.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:51:35'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:51:35'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:51:42'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:51:42'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:52:08' overrides: 16902957!
print
	'Balance = 0'! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:52:10'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:52:10'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:52:29' prior: 50622413!
test01aReportOfNewAccountIsOnlyBalance0
	| cuenta1 reporteCuenta1 |
	cuenta1 := ReceptiveAccount new.
	reporteCuenta1 := AccountReport newOfAccount: cuenta1.
	self assert: 'Balance = 0' equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:52:30'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 15:52:57' prior: 50622458 overrides: 16902957!
print
	^'Balance = 0'.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 15:52:58'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:16:19'!
test02aReportCanContainTransactionsAndAffectsBalance
	| cuenta1 reporteCuenta1 withdraw1 |
	cuenta1 := ReceptiveAccount new.
	withdraw1 :=  Withdraw .
	reporteCuenta1 := AccountReport newOfAccount: cuenta1.
	self assert: 'Balance = 0' equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:17:21' prior: 50622490!
test02aReportCanContainTransactionsAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert: 'Balance = 0' equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:22:52' prior: 50622502!
test02aReportCanContainTransactionsAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:      'Depósito por 110.
				Extracción por 20.
				Balance = 90
				' 
		
	equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/26/2023 16:22:56'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:23:37' prior: 50622517!
test02aReportCanContainTransactionsAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:      'Depósito por 110. Extracción por 20. Balance = 90' 
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/26/2023 16:23:41'!
FAILURE!

ReceptiveAccount allInstances!

cuenta1 := ReceptiveAccount new.
cuenta2 := ReceptiveAccount new.
ReceptiveAccount allInstances!

cuenta1 := ReceptiveAccount new.
cuenta2 := ReceptiveAccount new.!

ReceptiveAccount allInstances!

ReceptiveAccount allInstances!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 16:25:10' prior: 50622483 overrides: 16902957!
print
	
	^'Balance = 0'.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/26/2023 16:25:12'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/26/2023 16:25:12'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/26/2023 16:25:12'!
FAILURE!

ReceptiveAccount allInstances!

set1 := Set with: 1 with: 2 with: 4 with: 5!

set1 filter: [:elem | (elem > 3)]!

set1 select: [:elem | (elem > 3)]!

set1 select: [:elem | (elem > 3)]!

set1!

set1 select: [:elem | (elem > 3)] !

set1!

set1 select: [:elem | (elem > 3)] !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/26/2023 17:21:27' prior: 50622566 overrides: 16902957!
print
	| transactionsFromAccount |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	^'Balance = 0'.! !

----SNAPSHOT----(26 May 2023 17:23:22) CuisUniversity-5799.image priorSource: 9301506!

----SNAPSHOT----(27 May 2023 23:26:03) CuisUniversity-5799.image priorSource: 9310349!

----STARTUP---- (29 May 2023 15:55:38) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5799.image!


!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 15:55:45'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 15:55:45'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 15:55:45'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 15:59:23' prior: 50622590 overrides: 16902957!
print
	| transactionsFromAccount lines |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	lines := OrderedCollection new.
	transactionsFromAccount do: [:aTransaction | lines add: (self printLineOf: aTransaction )].
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
	
	"^'Balance = 0'."! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 15:59:52'!
printLineOf: aTransaction 
^''.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 15:59:53'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 15:59:53'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 15:59:58'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 15:59:58'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:01:05' prior: 50622469!
test01aReportOfNewAccountIsOnlyBalance0
	| cuenta1 reporteCuenta1 |
	cuenta1 := ReceptiveAccount new.
	reporteCuenta1 := AccountReport newOfAccount: cuenta1.
	self assert: (OrderedCollection with: 'Balance = 0') equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:01:06'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:01:06'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:01:06'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:01:06'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:01:15'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:01:19'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:01:19'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:02:36' prior: 50622537!
test02aReportCanContainTransactionsAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' with: 'Balance = 90')
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:02:40'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:06:12' prior: 50622637!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^''].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^''].

	! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:06:17'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:06:17'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:06:17'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:07:59' prior: 50622712!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^'Depósito por'].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^''].

	! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:10:51' prior: 50622730!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^'Depósito por'].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^'Extracción por'].

	! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:11:42' prior: 50622738!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^'Depósito por ', aTransaction value asString].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^'Extracción por ', aTransaction value asString].

	! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:11:44'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:11:44'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:11:44'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:12:47' prior: 50622621 overrides: 16902957!
print
	| transactionsFromAccount lines |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	lines := OrderedCollection new.
	self halt.
	transactionsFromAccount do: [:aTransaction | lines add: (self printLineOf: aTransaction )].
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
	
	"^'Balance = 0'."! !

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:13:14'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:13:29' prior: 50622769 overrides: 16902957!
print
	| transactionsFromAccount lines |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	lines := OrderedCollection new.
	transactionsFromAccount do: [:aTransaction | lines add: (self printLineOf: aTransaction )].
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
	
	"^'Balance = 0'."! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:13:53' prior: 50622790 overrides: 16902957!
print
	| transactionsFromAccount lines |
	transactionsFromAccount := (AccountTransaction allInstances) select: 
							[:aTransaction | accountToBeReported hasRegistered: aTransaction ]. 	 
	
	lines := OrderedCollection new.
	^transactionsFromAccount.
	"transactionsFromAccount do: [:aTransaction | lines add: (self printLineOf: aTransaction )].
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
	"
! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:13:59'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:13:59'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:14:04'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:14:04'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:18:50' prior: 50622807 overrides: 16902957!
print
	| lines |
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !
!ReceptiveAccount methodsFor: 'reporting' stamp: 'AF 5/29/2023 16:20:38'!
reportTransactionTo: aReport
	transactions do: [:aTransaction | aTransaction reportThisTransactionTo: aReport .]! !
!ReceptiveAccount methodsFor: 'reporting' stamp: 'AF 5/29/2023 16:20:58' prior: 50622847!
reportTransactionTo: aReport
	transactions do: [:aTransaction | aTransaction reportThisTransactionTo: aReport .]
	^self.! !
!AccountTransaction methodsFor: 'nil' stamp: 'AF 5/29/2023 16:21:15'!
reportThisTransactionTo: aReport
	^self subclassResponsibility .! !
!Deposit methodsFor: 'nil' stamp: 'AF 5/29/2023 16:21:57' overrides: 50622861!
reportThisTransactionTo: aReport
	aReport reportDeposit: self.! !
!TransferRecipient methodsFor: 'nil' stamp: 'AF 5/29/2023 16:22:25' overrides: 50622861!
reportThisTransactionTo: aReport
	aReport reportTransferRecipient: self.! !
!TransferSender methodsFor: 'nil' stamp: 'AF 5/29/2023 16:22:47' overrides: 50622861!
reportThisTransactionTo: aReport
	aReport reportTransferSender: self.! !
!Withdraw methodsFor: 'nil' stamp: 'AF 5/29/2023 16:23:09' overrides: 50622861!
reportThisTransactionTo: aReport
	aReport reportWithdraw: self.! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:23:55' prior: 50622839 overrides: 16902957!
print
	| lines2 |
	lines2:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines2 add: ('Balance = ', accountToBeReported balance asString).
	^lines2
! !

Report subclass: #AccountReport
	instanceVariableNames: 'accountToBeReported lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #AccountReport category: 'Portfolio-Solucion' stamp: 'AF 5/29/2023 16:24:10'!
Report subclass: #AccountReport
	instanceVariableNames: 'accountToBeReported lines'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:24:24' prior: 50622888 overrides: 16902957!
print
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!methodRemoval: AccountReport #printLineOf: stamp: 'AF 5/29/2023 16:24:35'!
printLineOf: aTransaction 
	(aTransaction isKindOf: Deposit) ifTrue: [^'Depósito por ', aTransaction value asString].
	(aTransaction isKindOf: Withdraw ) ifTrue: [^'Extracción por ', aTransaction value asString].

	!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:25:32'!
reportWithdraw: aWithdraw
	lines add: 'w'! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:25:47'!
reportDeposit: aDeposit
	lines add: 'd'! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:25:55'!
ERROR!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:25:55'!
ERROR!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:26:00'!
ERROR!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:26:00'!
ERROR!
!ReceptiveAccount methodsFor: 'reporting' stamp: 'AF 5/29/2023 16:26:40' prior: 50622854!
reportTransactionTo: aReport
	transactions do: [:aTransaction | aTransaction reportThisTransactionTo: aReport .].
	^self.! !

!testRun: #ReceptiveAccountTest #test01ReceptiveAccountHaveZeroAsBalanceWhenCreated stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test02DepositIncreasesBalanceOnTransactionValue stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test03WithdrawDecreasesBalanceOnTransactionValue stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test04WithdrawValueMustBePositive stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test05ReceptiveAccountKnowsRegisteredTransactions stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test06ReceptiveAccountDoNotKnowNotRegisteredTransactions stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReceptiveAccountTest #test07AccountKnowsItsTransactions stamp: 'AF 5/29/2023 16:26:41'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:26:47'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:26:47'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:26:47'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:26:53'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:26:58'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:27:43' prior: 50622932!
reportDeposit: aDeposit
	lines add: ('Depósito por ', aDeposit value asString )! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:27:44'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:27:44'!
FAILURE!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:27:44'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:28:40' prior: 50622928!
reportWithdraw: aWithdraw
	lines add: ('Extracción por ', aWithdraw value asString ) ! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:28:41'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:28:41'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:34:19'!
test03aReportCanContainTransfersAndAffectsBalance
	| account1  reporteCuenta1 withdraw1 deposit1 account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	"
	Salida por transferencia de 20.
Entrada por transferencia de 30.
"
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with:'Balance = 10')
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:34:25'!
ERROR!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:35:28'!
reportTransferSender: aTransferSender
	lines add: ('Transf por ', aTransferSender value asString ) ! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:35:29'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:35:29'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:35:29'!
ERROR!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:35:29'!
ERROR!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:36:11'!
reportTransferRecipient: aTransferRecipient
	lines add: ('Transf recibida ', aTransferRecipient value asString ) ! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:36:12'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:36:12'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:36:12'!
FAILURE!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:36:12'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:38:02' prior: 50623061!
reportTransferSender: aTransferSender
	lines add: ('Salida por transferencia de ', aTransferSender value asString ) ! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:38:23' prior: 50623081!
reportTransferRecipient: aTransferRecipient
	lines add: ('Entrada por transferencia de ', aTransferRecipient value asString ) ! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:38:24'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:38:24'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:38:24'!
FAILURE!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:38:24'!
FAILURE!
!Transfer methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:39:25' overrides: 16902254!
value
	^value .
! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:39:50' overrides: 16902254!
value
	! !
!TransferRecipient methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:40:05' prior: 50623135 overrides: 16902254!
value
	^fromTransfer value.! !
!TransferSender methodsFor: 'as yet unclassified' stamp: 'AF 5/29/2023 16:40:15' overrides: 16902254!
value
	^fromTransfer value.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 5/29/2023 16:40:25'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 5/29/2023 16:40:25'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 5/29/2023 16:40:25'!
PASSED!

----SNAPSHOT----(29 May 2023 16:40:34) CuisUniversity-5799.image priorSource: 9310437!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:10:29'!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio newFrom: account1 .
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with:'Balance = 10')
				equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:11:24' prior: 50623162!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	reporteCuenta1 := AccountReport newOfAccount: account1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with:'Balance = 10')
				equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:11:58' prior: 50623192!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with:'Balance = 10')
				equals: (portfolio1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:12:31' prior: 50623222!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10')
				equals: (portfolio1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:12:36'!
FAILURE!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:14:46'!
reportTransactionTo: aReport
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:14:47'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:15:00'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:15:00'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:15:00'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:15:00'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:15:00'!
FAILURE!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:16:22' prior: 50623286!
reportTransactionTo: aReport
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:16:23'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:17:17'!
FAILURE!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:19:03' prior: 50623368!
reportTransactionTo: aReport
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	self halt.
	^self.! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:19:09'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:19:09'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:19:09'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:19:09'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:19:09'!
FAILURE!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:19:28' prior: 50623435!
reportTransactionTo: aReport
	self halt.
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	self halt.
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:19:29'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:19:34'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:19:34'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:19:34'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:19:34'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:19:34'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:21:50' prior: 50622911 overrides: 16902957!
print
	lines:= OrderedCollection new.
	self halt.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:21:52'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:21:58'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:21:58'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:22:11'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:22:11'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:22:43' prior: 50623252!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	self halt.
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10')
				equals: (portfolio1 print).! !
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:22:52' prior: 50623543 overrides: 16902957!
print
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:22:53'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:22:53'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:22:53'!
PASSED!
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:40:49' prior: 50623460!
reportTransactionTo: aReport
	self halt.
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	self halt.
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:40:50'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:40:55'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:40:55'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:40:55'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:41:04' prior: 50623572!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	self assert:  (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10')
				equals: (portfolio1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:41:11'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:41:36'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:41:36'!
FAILURE!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:42:45' prior: 50623604 overrides: 16902957!
print
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	self halt.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:47'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:51'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:51'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:59'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:42:59'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:43:46' prior: 50623698!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10').
	self assert: printCorrecto
				equals: (portfolio1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:43:53'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:44:08' prior: 50623770!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10').
	
	self assert: printCorrecto
				equals: (portfolio1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:44:16'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:44:30' prior: 50623806!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account3 with: account1 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10').
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !
!Portfolio methodsFor: 'reporting' stamp: 'AF 6/1/2023 11:44:50' prior: 50623623!
reportTransactionTo: aReport
	accounts do: [:anAccount | anAccount reportTransactionTo: aReport .].
	^self.! !

!testRun: #PortfolioTest #test01BalanceOfPortfolioWithoutAccountsIsZero stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test02BalanceOfPortfolioWithAccountsIsSumOfAccountsBalance stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test03BalanceOfPortfolioIsCalculatedRecursivelyOnPortfolios stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test04PortfolioWithoutAccountsHasNoRegisteredTransaction stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test05PortfolioHasRegisteredItsAccountsTransactions stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test06PortfolioLooksForRegisteredTransactionsRecursively stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test07PortfolioHasNoTransactionWhenHasNoAccounts stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test08PortfolioTransactionsIncludesAllItsAccountsTransactions stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test09PortfolioTransactionsAreCalculatedRecursively stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test10PortfolioCanNotIncludeTheSameAccountMoreThanOnce stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test11PortfolioCanNotIncludeAccountOfItsPortfolios stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test12PortfolioCanNotIncludeItself stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test13ComposedPortfolioCanNotHaveParentPortfolioAccount stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test14ComposedPortfolioCanNotHaveAccountOfAnyRootParentRecursively stamp: 'AF 6/1/2023 11:44:51'!
PASSED!

!testRun: #PortfolioTest #test15PortfolioCanNotIncludeAnyOfTheComposedAccountOfPortfolioToAdd stamp: 'AF 6/1/2023 11:44:51'!
PASSED!
!AccountReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:45:03' prior: 50623741 overrides: 16902957!
print
	lines:= OrderedCollection new.
	accountToBeReported reportTransactionTo: self.
	lines add: ('Balance = ', accountToBeReported balance asString).
	^lines
! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:45:07'!
FAILURE!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:45:17'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:45:17'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:45:17'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:45:17'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:45:17'!
FAILURE!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:46:08'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:46:20' prior: 50623842!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account1 with: account3 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 10').
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:46:25'!
FAILURE!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:46:48' prior: 50623973!
test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account1 with: account3 .
	
	reporteCuenta1 := AccountReport newOfAccount: portfolio1 .
	printCorrecto := (OrderedCollection with: 'Depósito por 110' with: 'Extracción por 20' 
	with: 'Salida por transferencia de 89' with: 'Entrada por transferencia de 9' with: 'Depósito por 100' with:'Balance = 110').
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 11:46:53'!
PASSED!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 11:49:11'!
Object subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 11:49:04'!
test04TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	
	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := 0.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test04TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 11:49:25'!
ERROR!

Report subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 11:49:39'!
Report subclass: #TransferNetReport
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 12:40:01'!
Report subclass: #TransferNetReport
	instanceVariableNames: 'accountToBeReported'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetReport methodsFor: 'nil' stamp: 'AF 6/1/2023 12:39:59'!
initializeReportOf: anAccount
	accountToBeReported := anAccount.! !
!TransferNetReport class methodsFor: 'nil' stamp: 'AF 6/1/2023 12:40:11'!
newOfAccount: anAccount
	^(self new) initializeReportOf: anAccount.! !

Report subclass: #TransferNetReport
	instanceVariableNames: 'accountToBeReported totalSum'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!

!classDefinition: #TransferNetReport category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 12:40:53'!
Report subclass: #TransferNetReport
	instanceVariableNames: 'accountToBeReported totalSum'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:41:34' overrides: 16902957!
print
	totalSum := 0.
	accountToBeReported reportTransactionTo: self.
	^totalSum .
! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:42:18'!
reportDeposit: aDeposit
	totalSum := totalSum  + 0.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:42:38'!
reportWithdraw: aWithdraw
	totalSum  := totalSum  + 0.! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:43:22'!
reportTransferRecipient: aTransferRecipient
	totalSum := totalSum  + aTransferRecipient value! !
!TransferNetReport methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:43:40'!
reportTransferSender: aTransferSender
	totalSum := totalSum  - aTransferSender value! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:43:42'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:43:42'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:43:42'!
PASSED!

!testRun: #ReportTest #test04TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:43:42'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:43:42'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:44:26'!
test05TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	
	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := 0.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!methodRemoval: ReportTest #test04TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:44:36'!
test04TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto |
	account1 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	
	
	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := 0.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:44:43'!
PASSED!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:44:43'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:45:41' prior: 50624176!
test05TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.

	
	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:49:24'!
test06TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.

	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test06TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:49:28'!
PASSED!

!testRun: #ReportTest #test06TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:49:28'!
PASSED!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:49:54'!
test06TransferNetReportWithTransferIsSumOfTransfers
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.

	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!methodRemoval: ReportTest #test06TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:50:00'!
test06TransferNetReportWithNoTransferIsZero
	| account1  reporteCuenta1 withdraw1 deposit1 printCorrecto account2 |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.

	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.

	reporteCuenta1 := TransferNetReport newOfAccount: account1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).!
!ReportTest methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 12:51:53'!
test07aTranssferNetReportCanContainTransfersAndAffectsBalanceFromPortfolio
	| account1  reporteCuenta1 withdraw1 deposit1 account2 account3 deposito4 portfolio1 printCorrecto |
	account1 := ReceptiveAccount new.
	account2 := ReceptiveAccount new.
	deposit1 := Deposit register: 110 on: account1 .
	withdraw1 := Withdraw register: 20 on: account1 .
	account1 transferMoneyTo: account2 anAmountOf: 89.
	account2 transferMoneyTo: account1 anAmountOf: 9.
	account3 := ReceptiveAccount new.
	account1 transferMoneyTo: account3 anAmountOf: 300.

	deposito4 := Deposit register: 100 on: account3.
	portfolio1 := 	Portfolio with: account1 with: account3 .
	
	reporteCuenta1 := TransferNetReport newOfAccount: portfolio1 .
	printCorrecto := -80.
	
	self assert: printCorrecto
				equals: (reporteCuenta1 print).! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test06TransferNetReportWithTransferIsSumOfTransfers stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

!testRun: #ReportTest #test07aTranssferNetReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:51:59'!
PASSED!

----SNAPSHOT----(1 June 2023 12:54:35) CuisUniversity-5799.image priorSource: 9328269!
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:55:24'!
reportWithdraw: aWithdraw
	^self subclassResponsibility .! !
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:55:42'!
reportTransferSender: aTransferSender
	^self subclassResponsibility .! !
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:55:58'!
reportTransferRecipient: aTransferRecipient
	^self subclassResponsibility .! !
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:56:13'!
reportDeposit: aDeposit
	^self subclassResponsibility .! !
!Report methodsFor: 'nil' stamp: 'AF 6/1/2023 12:56:35' overrides: 16902957!
print
	^self subclassResponsibility .! !

!testRun: #ReportTest #test01aReportOfNewAccountIsOnlyBalance0 stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test02aReportCanContainTransactionsAndAffectsBalance stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test03aReportCanContainTransfersAndAffectsBalance stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test04aReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test05TransferNetReportWithNoTransferIsZero stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test06TransferNetReportWithTransferIsSumOfTransfers stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

!testRun: #ReportTest #test07aTranssferNetReportCanContainTransfersAndAffectsBalanceFromPortfolio stamp: 'AF 6/1/2023 12:56:50'!
PASSED!

Account class
	instanceVariableNames: 'name'!

Account class
	instanceVariableNames: 'nameOfAccount'!

!classDefinition: 'Account class' category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 13:24:51'!
Account class
	instanceVariableNames: 'nameOfAccount'!

!classDefinition: #Portfolio category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 16:30:55'!
Account subclass: #Portfolio
	instanceVariableNames: 'accounts parents name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!Portfolio methodsFor: 'initialization' stamp: 'AF 6/1/2023 16:30:53'!
initializeWithNamed: aName 
	name := aName.
	accounts := OrderedCollection new.
	parents := OrderedCollection new.! !

!classDefinition: #ReceptiveAccount category: 'Portfolio-Solucion' stamp: 'AF 6/1/2023 16:31:40'!
Account subclass: #ReceptiveAccount
	instanceVariableNames: 'transactions name'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Portfolio-Solucion'!
!ReceptiveAccount methodsFor: 'initialization' stamp: 'AF 6/1/2023 16:31:33'!
initializeWithNamed: aName 
	
	super initialize.
	transactions := OrderedCollection new.
	name := aName.! !
!ReceptiveAccount class methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 16:32:29'!
named: aName 
	^self new initializeWithNamed: aName ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 16:33:03'!
named: aName
	^self new initializeWithNamed: aName ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 16:33:20'!
named: aName with: anAccount 

	^(self new initializeWithNamed: aName)
		add: anAccount;
		yourself ! !
!Portfolio class methodsFor: 'as yet unclassified' stamp: 'AF 6/1/2023 16:33:43'!
named: aName with: anAccount with: anotherAccount 

	^(self new initializeWithNamed: aName)
		add: anAccount;
		add: anotherAccount;
		yourself ! !

----SNAPSHOT----(1 June 2023 16:40:29) CuisUniversity-5799.image priorSource: 9367543!