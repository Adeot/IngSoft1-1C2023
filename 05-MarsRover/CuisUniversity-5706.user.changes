

----QUIT----(20 March 2023 11:15:29) CuisUniversity-5706.image priorSource: 4313282!

----STARTUP---- (20 March 2023 11:15:29) as /Users/hernan/Documents/Cuis/5.0-64Bits/Cuis-University-Installer/CuisUniversity-5706.image!


----QUIT----(20 March 2023 11:15:30) CuisUniversity-5706.image priorSource: 8712809!

----STARTUP---- (20 March 2023 20:58:24) as C:\Users\fridm\Downloads\cuisUniversity\windows64\CuisUniversity-5706.image!


----SNAPSHOT----(20 March 2023 21:03:47) CuisUniversity-5706.image priorSource: 8713034!

1 + 1!

1 + 1!

1 + 1!

1 + 7!

ObjectBuilder create: #nuestroObjeto asChildOf: DenotativeObject collaboratorNames: '' in: 'Clase1'!

!classDefinition: #nuestroObjeto category: 'Clase1' stamp: 'AF 3/20/2023 21:23:16'!
DenotativeObject subclass: #nuestroObjeto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase1'!

!classDefinition: 'nuestroObjeto class' category: 'Clase1' stamp: 'AF 3/20/2023 21:23:16'!
nuestroObjeto class
	instanceVariableNames: ''!

ObjectBuilder create: #nuestroOtroObjeto asChildOf: DenotativeObject collaboratorNames: '' in: 'Clase1'!

!classDefinition: #nuestroOtroObjeto category: 'Clase1' stamp: 'AF 3/20/2023 21:23:48'!
DenotativeObject subclass: #nuestroOtroObjeto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase1'!

!classDefinition: 'nuestroOtroObjeto class' category: 'Clase1' stamp: 'AF 3/20/2023 21:23:48'!
nuestroOtroObjeto class
	instanceVariableNames: ''!

ObjectBuilder create: #tercerObjeto
	collaboratorNames: ''
	in: 'Clase1'
	!

!classDefinition: #tercerObjeto category: 'Clase1' stamp: 'AF 3/20/2023 21:24:43'!
DenotativeObject subclass: #tercerObjeto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Clase1'!

!classDefinition: 'tercerObjeto class' category: 'Clase1' stamp: 'AF 3/20/2023 21:24:43'!
tercerObjeto class
	instanceVariableNames: ''!

nuestroObjeto saludar!
!nuestroObjeto class methodsFor: 'saludos' stamp: 'AF 3/20/2023 21:36:29'!
Ssludar
	"Esto es un comentario XD"
	^'esto es un string, hola'! !
!nuestroObjeto class methodsFor: 'saludos' stamp: 'AF 3/20/2023 21:39:49'!
Saludar
	"Esto es un comentario XD"
	^'esto es un string, hola'! !

!methodRemoval: nuestroObjeto class #Ssludar stamp: 'AF 3/20/2023 21:40:04'!
Ssludar
	"Esto es un comentario XD"
	^'esto es un string, hola'!

nuestroObjeto saludar!

nuestroObjeto saludar!

nuestroObjeto saludar!

nuestroObjeto Saludar!

ObjectBuilder create: #zombieBill asChildOf: DenotativeObject collaboratorNames: '' in: 'zombies'!

!classDefinition: #zombieBill category: 'zombies' stamp: 'AF 3/20/2023 21:48:57'!
DenotativeObject subclass: #zombieBill
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'zombies'!

!classDefinition: 'zombieBill class' category: 'zombies' stamp: 'AF 3/20/2023 21:48:57'!
zombieBill class
	instanceVariableNames: ''!
!zombieBill class methodsFor: 'darInformacion' stamp: 'AF 3/20/2023 21:51:26'!
energia
	^28! !

zombieBill energia!

zombieBill energia!

zombieBill energia!

zombieBill energia!

!classDefinition: 'zombieBill class' category: 'zombies' stamp: 'AF 3/20/2023 22:01:07'!
zombieBill class
	instanceVariableNames: 'caminado'!
!zombieBill class methodsFor: 'movilidad' stamp: 'AF 3/20/2023 22:01:03'!
caminar: unaDistancia	
	caminado := unaDistancia! !

!classDefinition: 'zombieBill class' category: 'zombies' stamp: 'AF 3/20/2023 22:06:53'!
zombieBill class
	instanceVariableNames: 'caminado energia'!
!zombieBill class methodsFor: 'darInformacion' stamp: 'AF 3/20/2023 22:06:51' prior: 50604019!
energia
	^energia! !

zombieBill!

zombieBill energia!

----SNAPSHOT----(20 March 2023 22:11:35) CuisUniversity-5706.image priorSource: 8713243!
!zombieBill class methodsFor: 'movilidad' stamp: 'AF 3/20/2023 23:03:27' prior: 50604029!
caminar: unaDistancia	
	caminado := unaDistancia
	energia = energia - 1*unaDistancia + 3! !

zombieBill energia
!

zombieBill caminar: 7
!

zombieBill caminar:(7) 
!

energia!

zombieBill energia!

zombieBill caminar: 6
!

zombieBill caminar: 6!

zombieBill caminar: 6!

zombieBill caminar: 6!
!zombieBill class methodsFor: 'movilidad' stamp: 'AF 3/20/2023 23:09:06'!
rascarse
^energia-1! !

zombieBill rascarse!

zombieBill rascarse!
!zombieBill class methodsFor: 'movilidad' stamp: 'AF 3/20/2023 23:10:26' prior: 50604059!
rascarse
energia := energia -1
^energia! !

zombieBill rascarse!

zombieBill rascarse!

----STARTUP---- (20 March 2023 23:12:16) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


zombieBill energia!
!zombieBill class methodsFor: 'movilidad' stamp: 'af 3/20/2023 23:13:36'!
rascarse
energia = energia -1
! !

zombieBill energia!

zombieBill rascarse!
!zombieBill class methodsFor: 'movilidad' stamp: 'af 3/20/2023 23:14:00' prior: 50604074!
rascarse
energia := energia -1
! !

zombieBill rascarse!
!zombieBill class methodsFor: 'movilidad' stamp: 'af 3/20/2023 23:14:12' prior: 50604080!
rascarse
energia := energia -1
^energia
! !

zombieBill rascarse !
!zombieBill class methodsFor: 'movilidad' stamp: 'af 3/20/2023 23:14:29' prior: 50604085!
rascarse
energia := energia -1.
^energia
! !

zombieBill rascarse !

zombieBill rascarse!

zombieBill rascarse !

zombieBill rascarse!
!zombieBill class methodsFor: 'movilidad' stamp: 'af 3/20/2023 23:16:23' prior: 50604029!
caminar: unaDistancia	
	caminado := unaDistancia
	energia = energia - unaDistancia - 3! !
!zombieBill class methodsFor: 'movilidad' stamp: 'af 3/20/2023 23:16:48' prior: 50604098!
caminar: unaDistancia	
	caminado := unaDistancia.
	energia := energia - unaDistancia - 3.
	^energia! !

zombieBill caminar: 7!

zombieBill caminar: 7!

^energia!
!zombieBill class methodsFor: 'alimentacion' stamp: 'af 3/20/2023 23:19:12'!
comerCerebros: kilosCerebrales
energia := energia + 4*kilosCerebrales.
^energia
	! !

zombieBill energia!

zombieBill comerCerebros: 10!

zombieBill energia!

zombieBill energia
!

zombieBill energia
!

zombieBill energia
!

zombieBill energia
!

zombieBill comerCerebros: 0
!

zombieBill energia !

zombieBill comerCerebros: 3
!

zombieBill energia!

zombieBill caminar: 5!

zombieBill energia!

zombieBill energia
!

zombieBill comerCerebros: 3
!

zombieBill energia
!

zombieBill comerCerebros: 3 
!

 zombieBill energia!

 zombieBill energia
!

zombieBill caminar: 5
!

 zombieBill energia!

zombieBill energia
!

zombieBill comerCerebros: 3 
!

zombieBill caminar: 5
!

zombieBill caminar: 5
!

zombieBill caminar: 5
!

zombieBill caminar: 5
!
!zombieBill class methodsFor: 'alimentacion' stamp: 'af 3/20/2023 23:26:00' prior: 50604112!

comerCerebros: kilosCerebrales
energia := energia + 4*kilosCerebrales.
^energia
	! !

!classDefinition: 'zombieBill class' category: 'zombies' stamp: 'af 3/20/2023 23:26:56'!
zombieBill class
	instanceVariableNames: 'energia caminado comido'!
!zombieBill class methodsFor: 'alimentacion' stamp: 'af 3/20/2023 23:26:54' prior: 50604139!
comerCerebros: kilosCerebrales
comido := kilosCerebrales.

energia := energia + 4*kilosCerebrales.
^energia
	! !
!zombieBill class methodsFor: 'alimentacion' stamp: 'af 3/20/2023 23:27:00' prior: 50604150!
comerCerebros: kilosCerebrales
comido := kilosCerebrales.
energia := energia + 4*kilosCerebrales.
^energia
	! !

zombieBill energia !

zombieBill energia!

zombieBill energia!

zombieBill caminar: 20!

zombieBill caminar: 20!

zombieBill energia !

zombieBill comerCerebros: 1!

zombieBill comerCerebros: 1!

zombieBill comerCerebros: 1!

zombieBill comerCerebros: 1!

zombieBill comerCerebros: 1!

zombieBill comerCerebros: 3!
!zombieBill class methodsFor: 'alimentacion' stamp: 'af 3/20/2023 23:33:16' prior: 50604157!
comerCerebros: kilosCerebrales
comido := kilosCerebrales.
energia := energia + kilosCerebrales.
^energia
	! !

zombieBill energia !

zombieBill caminar: 210!

zombieBill energia !

zombieBill comerCerebros: 2!

zombieBill comerCerebros: 2!

zombieBill comerCerebros: 2!

zombieBill comerCerebros: 2!
!zombieBill class methodsFor: 'alimentacion' stamp: 'af 3/20/2023 23:34:40' prior: 50604174!
comerCerebros: kilosCerebrales
comido := kilosCerebrales.
energia := energia + kilosCerebrales + kilosCerebrales + kilosCerebrales + kilosCerebrales .
^energia
	! !

zombieBill energia!

zombieBill comerCerebros: 3!

zombieBill comerCerebros: 3!
!zombieBill class methodsFor: 'alimentacion' stamp: 'af 3/20/2023 23:36:45'!
comerCerebrosMalos: kilosCerebrales
comido := kilosCerebrales.
energia := energia + kilosCerebrales * 4 .
^energia
	! !

zombieBill comerCerebros: 3!

zombieBill comerCerebrosMalos: 3!
!zombieBill class methodsFor: 'alimentacion' stamp: 'af 3/20/2023 23:37:25' prior: 50604198!
comerCerebrosMalos: kilosCerebrales
comido := kilosCerebrales.
energia := energia + (kilosCerebrales * 4) .
^energia
	! !

zombieBill comerCerebrosMalos: 3 !

zombieBill caminar: 270!

zombieBill energia!

zombieBill comerCerebrosMalos: 20!

zombieBill comerCerebrosMalos: 20 !

----SNAPSHOT----(20 March 2023 23:38:50) CuisUniversity-5706.image priorSource: 8716566!

----STARTUP---- (23 March 2023 17:40:06) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


ObjectBuilder create: #BooleanoTest
	collaboratorNames: ''
	in: 'Ejercicio booleano'
	!

!classDefinition: #BooleanoTest category: 'Ejercicio booleano' stamp: 'af 3/23/2023 20:36:05'!
DenotativeObject subclass: #BooleanoTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio booleano'!

!classDefinition: 'BooleanoTest class' category: 'Ejercicio booleano' stamp: 'af 3/23/2023 20:36:05'!
BooleanoTest class
	instanceVariableNames: ''!

!classDefinition: #Falso category: 'Ejercicio booleano' stamp: 'af 3/23/2023 20:43:30'!
DenotativeObject subclass: #Falso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio booleano'!

!classDefinition: #Verdadero category: 'Ejercicio booleano' stamp: 'af 3/23/2023 20:43:38'!
DenotativeObject subclass: #Verdadero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Ejercicio booleano'!
!BooleanoTest class methodsFor: 'nil' stamp: 'af 3/23/2023 20:43:26'!
test01FalsoNegadoDevuelveVerdadero
	Assert that: Falso no isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:44:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:44:29'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:44:35'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:44:35'!
ERROR!

	Assert that: Falso no isEqualTo: Verdadero!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 20:47:50'!
test02VerdaderoNegadoDevuelveFalso
	Assert that: Verdadero no isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:48:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:48:05'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:48:21'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:48:21'!
ERROR!
!Verdadero class methodsFor: 'operaciones' stamp: 'af 3/23/2023 20:48:38'!
no
	self shouldBeImplemented.! !
!Verdadero class methodsFor: 'operaciones' stamp: 'af 3/23/2023 20:49:09' prior: 50604291!
no
	^Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:49:16'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:49:31'!
ERROR!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:49:31'!
ERROR!
!Falso class methodsFor: 'operaciones' stamp: 'af 3/23/2023 20:49:40'!
no
	self shouldBeImplemented.! !
!Falso class methodsFor: 'operaciones' stamp: 'af 3/23/2023 20:49:57' prior: 50604307!
no
	^Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:50:13'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 20:50:13'!
PASSED!
!Falso class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:00:40'!
y:Booleano
	^Falso! !
!Verdadero class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:01:08'!
y:Booleano
	^Booleano! !
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:02:21'!
test03VerdaderoyVerdaderoDevuelveVerdadero
	Assert that: Verdadero y: Verdadero no isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:02:30'!
ERROR!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:03:23' prior: 50604328!
test03VerdaderoyVerdaderoDevuelveVerdadero
	Assert that: (Verdadero y: Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:03:27'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:03:33'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:04:30'!
test04FalsoyVerdaderoDevuelveFalso
	Assert that: (Falso y: Verdadero) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:04:33'!
PASSED!
!Falso class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:06:08'!
o:Booleano
	^Booleano! !
!Verdadero class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:06:22'!
o:Booleano
	^Verdadero! !
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:07:32'!
test05VerdaderoYFalsoDevuelveFalso
	Assert that: (Verdadero y: Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:07:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:07:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:07:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:07:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:07:37'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:07:37'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:07:55'!
test05FalsoYFalsoDevuelveFalso
	Assert that: (Falso y: Falso) isEqualTo: Falso! !
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:08:03'!
test06FalsoYFalsoDevuelveFalso
	Assert that: (Falso y: Falso) isEqualTo: Falso! !

!methodRemoval: BooleanoTest class #test05FalsoYFalsoDevuelveFalso stamp: 'af 3/23/2023 21:08:12'!
test05FalsoYFalsoDevuelveFalso
	Assert that: (Falso y: Falso) isEqualTo: Falso!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:08:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:08:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:08:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:08:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:08:26'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:08:26'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:08:50'!
test07VerdaderoOVerdaderoDevuelveVerdadero
	Assert that: (Verdadero o: Verdadero) isEqualTo: Verdadero! !
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:09:09'!
test07VerdaderoOFalsoDevuelveVerdadero
	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero! !
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:09:13'!
test08VerdaderoOFalsoDevuelveVerdadero
	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero! !

!methodRemoval: BooleanoTest class #test07VerdaderoOFalsoDevuelveVerdadero stamp: 'af 3/23/2023 21:09:21'!
test07VerdaderoOFalsoDevuelveVerdadero
	Assert that: (Verdadero o: Falso) isEqualTo: Verdadero!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:09:46'!
test09FalsoOVerdaderoDevuelveVerdadero
	Assert that: (Falso o: Verdadero) isEqualTo: Verdadero! !
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:10:12'!
test10FalsoOFalsoDevuelveFalso
	Assert that: (Falso o: Falso) isEqualTo: Falso! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:10:29'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:38:32'!
test11VerdaderoSiesVerdadero
	Assert that: (Verdadero sies: Verdadero) isEqualTo: Verdadero! !
!Verdadero class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:39:28'!
sies:Bloque
	^Bloque value! !
!Verdadero class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:39:50'!
siesVerdadero:Bloque
	^Bloque value! !

!methodRemoval: Verdadero class #sies: stamp: 'af 3/23/2023 21:39:57'!
sies:Bloque
	^Bloque value!
!Falso class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:41:17'!
siesVerdadero:Bloque! !
!Falso class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:41:37'!
siesFalso:Bloque
	^Bloque value! !
!Verdadero class methodsFor: 'operaciones' stamp: 'af 3/23/2023 21:42:06'!
siesFalso:Bloque
	! !

a:= [Verdadero no.]!

a:= [Verdadero no.]!

a:= [Verdadero no.]!

bloque:= [True].!

bloque:= [True].!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:47:44' prior: 50604491!
test11VerdaderoSiesVerdadero
	Assert that: (Verdadero siesVerdadero: Verdadero) isEqualTo: Verdadero! !

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!

!testRun: #DenotativeObjectTestCase #performRealTest stamp: 'af 3/23/2023 21:47:59'!
PASSED!
!BooleanoTest class methodsFor: 'as yet unclassified' stamp: 'af 3/23/2023 21:57:51' prior: 50604523!
test11VerdaderoSiesVerdadero
	|aClosure n1|
	n1 := 0.
	aClosure:=[n1+5].
	Assert that: (Verdadero siesVerdadero: aClosure) isEqualTo: 5.! !

----SNAPSHOT----(26 March 2023 18:10:52) CuisUniversity-5706.image priorSource: 8722165!

----STARTUP---- (13 April 2023 16:51:25) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\fridm\OneDrive\Escritorio\IngSoft1-1C2023\01-CodigoRepetido\CodigoRepetido-Ejercicio.st----!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'af 4/13/2023 16:52:51'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'af 4/13/2023 16:52:51'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'af 4/13/2023 16:52:51'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'af 4/13/2023 16:52:51'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'af 4/13/2023 16:52:51'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'af 4/13/2023 16:52:51'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'af 4/13/2023 16:52:51'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'af 4/13/2023 16:52:51'!
PASSED!

true!

true + true!

true xor: true!

true xor: false!

2424 type!

2424 class!

SmallInteger !

SmallInteger  	maxVal !

2/3 + 1/3!

(2/3 )+ (1/3)!

((2/3 )+ (1/3)) class!

((2/3 )+ (1001/3000)) class!

((2/3 )+ (1001/3000))!

((2/3 )+ (1000/3000))!

DenotativeObject Class!

DenotativeObject class!

DenotativeObject superclass!

Object superclass!

ProtoObject superclass !

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\02-Numeros\Pre-Numeros-Ejercicio.st----!
!CustomerBookTest methodsFor: 'testing' stamp: 'af 4/13/2023 21:19:24' prior: 50604641!
illegalActivity: illegalClosure expectedError: nameOfError shouldSatisfy: conditionToBeSatisfiedClosure
	
	[  illegalClosure value . self fail.]
		on: nameOfError
		do: conditionToBeSatisfiedClosure! !

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'af 4/13/2023 21:20:41'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'af 4/13/2023 21:20:41'!
ERROR!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'af 4/13/2023 21:20:41'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'af 4/13/2023 21:20:41'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'af 4/13/2023 21:20:41'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'af 4/13/2023 21:20:41'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'af 4/13/2023 21:20:41'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'af 4/13/2023 21:20:41'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'af 4/13/2023 21:20:41'!
PASSED!

!testRun: #CustomerBookTest #test01AddingCustomerShouldNotTakeMoreThan50Milliseconds stamp: 'af 4/13/2023 21:20:44'!
PASSED!

!testRun: #CustomerBookTest #test02RemovingCustomerShouldNotTakeMoreThan100Milliseconds stamp: 'af 4/13/2023 21:20:44'!
PASSED!

!testRun: #CustomerBookTest #test03CanNotAddACustomerWithEmptyName stamp: 'af 4/13/2023 21:20:44'!
PASSED!

!testRun: #CustomerBookTest #test04CanNotRemoveAnInvalidCustomer stamp: 'af 4/13/2023 21:20:44'!
PASSED!

!testRun: #CustomerBookTest #test05SuspendingACustomerShouldNotRemoveItFromCustomerBook stamp: 'af 4/13/2023 21:20:44'!
PASSED!

!testRun: #CustomerBookTest #test06RemovingASuspendedCustomerShouldRemoveItFromCustomerBook stamp: 'af 4/13/2023 21:20:44'!
PASSED!

!testRun: #CustomerBookTest #test07CanNotSuspendAnInvalidCustomer stamp: 'af 4/13/2023 21:20:44'!
PASSED!

!testRun: #CustomerBookTest #test08CanNotSuspendAnAlreadySuspendedCustomer stamp: 'af 4/13/2023 21:20:44'!
PASSED!

----SNAPSHOT----(13 April 2023 21:49:10) CuisUniversity-5706.image priorSource: 8733387!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/13/2023 21:50:26'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/13/2023 21:50:26'!
PASSED!
!NumeroTest methodsFor: 'tests' stamp: 'af 4/13/2023 21:52:47' prior: 50604955!
test01isCeroReturnsTrueWhenAskToZero
	self assert: zero isZero! !

----STARTUP---- (16 April 2023 10:42:21) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!

!NumeroTest methodsFor: 'tests' stamp: 'af 4/13/2023 21:52:47' prior: 50604955!
test01isCeroReturnsTrueWhenAskToZero
	self assert: zero isZero! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/16/2023 10:43:23'!
PASSED!

!classDefinition: #Entero category: 'Numero' stamp: 'af 4/16/2023 11:07:37'!
Object subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero'!

Entero subclass: #Numero
	instanceVariableNames: 'type value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'af 4/16/2023 11:07:38'!
Entero subclass: #Numero
	instanceVariableNames: 'type value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 11:09:48'!
FAILURE!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 11:09:48'!
FAILURE!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/16/2023 11:09:48'!
PASSED!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test07FraccionAddsWithFraccionCorrectly stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test08FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test09AparentFraccionesAreEqual stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test10AddingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 11:09:54'!
FAILURE!

!testRun: #NumeroTest #test11MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 11:09:54'!
FAILURE!

!testRun: #NumeroTest #test12AFraccionCanNotBeZero stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test13AFraccionCanNotBeOne stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test14NegationOfEnteroIsCorrect stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test15NegationOfFraccionIsCorrect stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test16SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/16/2023 11:09:54'!
PASSED!

!testRun: #NumeroTest #test17SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/16/2023 11:09:54'!
PASSED!
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 11:17:01' prior: 50605154!
type
	
	^self subclassResponsibility .! !

Object subclass: #Entero
	instanceVariableNames: 'type value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero'!

!classRemoval: #Numero stamp: 'af 4/16/2023 11:19:29'!
Entero subclass: #Numero
	instanceVariableNames: 'type value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'af 4/16/2023 11:19:29'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'af 4/16/2023 11:19:30'!
Object subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero'!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\02-Numeros\Pre-Numeros-Ejercicio.st----!

Entero subclass: #Numero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Entero category: #'Kernel-Objects' stamp: 'af 4/16/2023 11:21:50'!
Object subclass: #Entero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Kernel-Objects'!

Entero subclass: #Numero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'af 4/16/2023 11:21:50'!
Entero subclass: #Numero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'af 4/16/2023 11:22:35'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'af 4/16/2023 11:22:36'!
Entero subclass: #Numero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\02-Numeros\Pre-Numeros-Ejercicio.st----!

Numero subclass: #Enteros
	instanceVariableNames: 'type value numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Enteros
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Enteros
	instanceVariableNames: 'valueInteger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Enteros category: 'Numero-Exercise' stamp: 'af 4/16/2023 11:24:12'!
Numero subclass: #Enteros
	instanceVariableNames: 'valueInteger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Numero subclass: #Fracciones
	instanceVariableNames: 'numeratorFraction denominatorFraction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Fracciones category: 'Numero-Exercise' stamp: 'af 4/16/2023 11:26:15'!
Numero subclass: #Fracciones
	instanceVariableNames: 'numeratorFraction denominatorFraction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero methodsFor: 'testing' stamp: 'af 4/16/2023 11:35:07' prior: 50606240!
isZero	^self subclassResponsibility.! !
!Enteros methodsFor: 'no messages' stamp: 'af 4/16/2023 11:36:23' overrides: 50606380!
isZero
	^(value = 1).
! !
!Fracciones methodsFor: 'no messages' stamp: 'af 4/16/2023 11:36:56' overrides: 50606380!
isZero
	^false.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 11:38:09' prior: 50606226!
type
	^type! !
!Numero methodsFor: 'initialization' stamp: 'af 4/16/2023 11:46:25' prior: 50606251!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fracciones.
	numerator := aNumerator.
	denominator := aDenominator ! !
!Enteros class methodsFor: 'no messages' stamp: 'af 4/16/2023 11:48:44' overrides: 50606310!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^self new initializeWith: aValue! !
!Enteros class methodsFor: 'nil' stamp: 'af 4/16/2023 11:50:13' overrides: 50606305!
canNotDivideByZeroErrorDescription

	^'No se puede dividir por cero!!!!!!'! !
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 11:52:02' overrides: 50606246!
initializeWith: aValue
	value := aValue! !
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 11:52:19' prior: 50606429 overrides: 50606246!
initializeWith: aValue
	valueInteger := aValue! !

Enteros with: 4!

ent := Enteros with: 4  
!

ent!

ent!

ent    !

ent!

ent := Numero with: 5!

ent!

ent!
!Numero methodsFor: 'initialization' stamp: 'af 4/16/2023 11:57:27' prior: 50606246!
initializeWith: aValue
	
	type := #Enteros.
	value := aValue! !

ent := Numero with: 5!

ent!
!Numero class methodsFor: 'instance creation' stamp: 'af 4/16/2023 11:58:57' prior: 50606310!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	
	^Enteros new initializeWith: aValue! !

ent := Numero with: 5  
!

ent!

ent!

Object subclass: #Numero
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'af 4/16/2023 12:07:10'!
Object subclass: #Numero
	instanceVariableNames: 'type'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Numero class methodsFor: 'instance creation' stamp: 'af 4/16/2023 12:09:06' prior: 50606448!
with: aValue 
	^Enteros with: aValue! !

ent := Numero with: 5  
!

ent!
!Numero class methodsFor: 'instance creation' stamp: 'af 4/16/2023 12:10:33' prior: 50606321!
with: aDividend over: aDivisor
	^Fracciones with: aDividend over: aDivisor.! !
!Fracciones class methodsFor: 'nil' stamp: 'af 4/16/2023 12:14:20'!
asd: aDivisor asdd: aDividend
	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !
!Fracciones class methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 15:39:16' overrides: 50606478!
with: aDivisor over: aDividend
	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

!methodRemoval: Fracciones class #asd:asdd: stamp: 'af 4/16/2023 15:39:23'!
asd: aDivisor asdd: aDividend
	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	aDivisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator!
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 15:40:46' overrides: 50606396!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	
	type:=#Fracciones.
	numeratorFraction := aNumerator.
	denominatorFraction := aDenominator ! !

ent isZero!

cer := Numero with: 0 
!

cer isZero!

cer!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 15:42:18' prior: 50606384 overrides: 50606380!
isZero
	^(valueInteger = 0).
! !

cer := Numero with: 0 
!

   cer isZero 
!

ent isZero!

frac := Numero with: 3 over:5!

Numero with: 4 over: 5!

Fracciones with: 4 over: 5!
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 15:46:51' overrides: 50606266!
denominator
	^denominatorFraction ! !

!methodRemoval: Numero #denominator stamp: 'af 4/16/2023 15:47:06'!
denominator

	^denominator!

!methodRemoval: Numero #greatestCommonDivisorWith: stamp: 'af 4/16/2023 15:47:54'!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'!
!Numero methodsFor: 'initialization' stamp: 'af 4/16/2023 15:49:22'!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[ | value |^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'! !

Fracciones with: 4 over: 5!

ent := Numero with: 5  
!

Numero with: 4 over: 5!

Numero with: 4!

ent isZero
!

cer isZero 
!

frac := Numero with: 4 over: 5.  !

frac := Fracciones with: 4 over: 5.  !

3 isZero!

0 isZero!

frac := Fracciones with: 4 over: 5.  
!

frac := Fracciones with: 4 over: 5.  
!

frac := Numero with: 4 over: 5.  
!
!Numero methodsFor: 'testing' stamp: 'af 4/16/2023 17:10:11' prior: 50606229!
isNegative
	^ self subclassResponsibility 
! !
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:10:56' overrides: 50606609!
isNegative
	^valueInteger < 0! !
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:11:29' overrides: 50606609!
isNegative
	^denominatorFraction < 0.! !

frac := Numero with: 4 over: 5.  
!

frac := Fracciones with: 4 over: 5.  
!
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:12:53' prior: 50606547 overrides: 50606396!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	numeratorFraction := aNumerator.
	denominatorFraction := aDenominator ! !

frac := Fracciones with: 4 over: 5.  
!
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:13:58' prior: 50606619 overrides: 50606609!
isNegative
	^numeratorFraction < 0.! !

frac := Fracciones with: 4 over: 5.  
!
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:14:08' prior: 50606645 overrides: 50606609!
isNegative
	^denominatorFraction < 0.! !

3 isNegative!

3 < 0!

ent isNegative
!

entNeg := Numero with: -2 .
!

entNeg isNegative
!

ent isNegative
!

4 negated!
!Fracciones class methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:19:11' prior: 50606505 overrides: 50606478!
with: aDivisor over: aDividend
	| greatestCommonDivisor numerator denominator divisor|
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	divisor := Entero with: aDivisor.
	
	divisor isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

 frac := Fracciones with: 4 over: 5.  
!
!Fracciones class methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:20:02' prior: 50606661 overrides: 50606478!
with: aDivisor over: aDividend
	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	(aDivisor <0) isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

 frac := Fracciones with: 4 over: 5.  
!
!Fracciones class methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:20:27' prior: 50606686 overrides: 50606478!
with: aDivisor over: aDividend
	| greatestCommonDivisor numerator denominator |
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	(aDivisor <0) ifTrue: [ ^self with: aDividend negated over: aDivisor negated].
	
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

 frac := Fracciones with: 4 over: 5.  
!
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:21:54' prior: 50606627 overrides: 50606396!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	numeratorFraction := Entero with: aNumerator.
	denominatorFraction := Entero with: aDenominator ! !
!Fracciones class methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:25:30' prior: 50606710 overrides: 50606478!
with: aDivisor over: aDividend
	| greatestCommonDivisor numerator denominator dividendoPotencial divisorPotencial |
	dividendoPotencial := Entero with: aDividend.
	divisorPotencial := Entero with: aDivisor.
	greatestCommonDivisor := aDividend greatestCommonDivisorWith: aDivisor. 
	numerator := aDividend // greatestCommonDivisor.
	denominator := aDivisor // greatestCommonDivisor.
	
	aDivisor isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	aDividend isZero ifTrue: [ ^aDividend ].
	
	(aDivisor <0) ifTrue: [ ^self with: aDividend negated over: aDivisor negated].

	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !
!Fracciones class methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:27:20' prior: 50606751 overrides: 50606478!
with: aDivisor over: aDividend
	| greatestCommonDivisor numerator denominator dividendoPotencial divisorPotencial |
	dividendoPotencial := Entero with: aDividend.
	divisorPotencial := Entero with: aDivisor.
	greatestCommonDivisor := dividendoPotencial greatestCommonDivisorWith: divisorPotencial. 
	numerator := dividendoPotencial // greatestCommonDivisor.
	denominator := divisorPotencial // greatestCommonDivisor.
	
	divisorPotencial isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	dividendoPotencial isZero ifTrue: [ ^aDividend ].
	
	divisorPotencial isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].

	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

 frac := Fracciones with: 4 over: 5.  
!
!Fracciones class methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:29:14' prior: 50606777 overrides: 50606478!
with: aDivisor over: aDividend
	| greatestCommonDivisor numerator denominator dividendoPotencial divisorPotencial |
	dividendoPotencial := Enteros with: aDividend.
	divisorPotencial := Enteros with: aDivisor.
	greatestCommonDivisor := dividendoPotencial greatestCommonDivisorWith: divisorPotencial. 
	numerator := dividendoPotencial // greatestCommonDivisor.
	denominator := divisorPotencial // greatestCommonDivisor.
	
	divisorPotencial isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	dividendoPotencial isZero ifTrue: [ ^aDividend ].
	
	divisorPotencial isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].

	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !

 frac := Fracciones with: 4 over: 5.  
!

4 gcd: 8!

13 gcd: 29!

12353 gcd: 9371!

12356 gcd: 9372!

!methodRemoval: Numero #greatestCommonDivisorWith: stamp: 'af 4/16/2023 17:33:48'!
greatestCommonDivisorWith: anEntero 
	
	type = #Entero ifTrue:
		[ | value |^self class with: (value gcd: anEntero integerValue)].
		
	self error: 'Tipo de número no soportado'!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:34:48'!
greatestCommonDivisorWith: anEntero 
	^self integerValue gcd: anEntero.
		! !
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:34:58' prior: 50606844!
greatestCommonDivisorWith: anEntero 
	^self integerValue gcd: anEntero integerValue .
		! !

 frac := Fracciones with: 4 over: 5.  
!

ent := Numero with: 80 .
!

  cer := Numero with: 30 .
!

  entNeg := Numero with: -2 .
!

 ent integerValue gcd: cer integerValue 
!

 (ent integerValue) gcd: (cer integerValue )
!

(cer integerValue )!

  cer := Numero with: 30 .
!

  cer := Numero with: 30 .
!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:38:53'!
valueEntero
	^self valueInteger.
! !

(cer valueEntero )!

 cer := Numero with: 30 .
!

ent := Numero with: 80 .
!

cer!

cer valueEntero!

cer!

cer!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:40:23' prior: 50606865!
valueEntero
	^  valueInteger.
! !

cer valueEntero!

(ent valueEntero ) gcd: (cer valueEntero )!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:41:22' prior: 50606850!
greatestCommonDivisorWith: anEntero 
	^(self valueEntero ) gcd: (anEntero valueEntero ).
		! !

 frac := Fracciones with: 4 over: 5.  
!
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 17:43:38' prior: 50606192!
// aDivisor 
	^self subclassResponsibility .! !

456 // 214!

956 // 214!

 (ent valueEntero ) // (cer valueEntero )
!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:45:31' overrides: 50606887!
// aDivisor 
	^self valueEntero // aDivisor valueEntero .
		! !

 frac := Fracciones with: 4 over: 5.  
!

ent // cer
!

   cer := Numero with: 20 .
!

ent // cer
!
!Fracciones class methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:48:10' prior: 50606806 overrides: 50606478!
with: aDivisor over: aDividend
	| greatestCommonDivisor numerator denominator dividendoPotencial divisorPotencial |
	dividendoPotencial := Enteros with: aDividend.
	divisorPotencial := Enteros with: aDivisor.
	greatestCommonDivisor := dividendoPotencial greatestCommonDivisorWith: divisorPotencial. 
	numerator := Enteros with: (dividendoPotencial // greatestCommonDivisor).
	denominator := Enteros with: (divisorPotencial // greatestCommonDivisor).
	
	divisorPotencial isZero ifTrue: [ self error: self canNotDivideByZeroErrorDescription ].
	dividendoPotencial isZero ifTrue: [ ^aDividend ].
	
	divisorPotencial isNegative ifTrue: [ ^self with: aDividend negated over: aDivisor negated].

	
	denominator isOne ifTrue: [ ^numerator ].

	^self new initializeWith: numerator over: denominator! !
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:48:48' prior: 50606733 overrides: 50606396!
initializeWith: aNumerator over: aDenominator

	"Estas precondiciones estan por si se comenten errores en la implementacion - Hernan"
	aNumerator isZero ifTrue: [ self error: 'una fraccion no puede ser cero' ].
	aDenominator isOne ifTrue: [ self error: 'una fraccion no puede tener denominador 1 porque sino es un entero' ].
	numeratorFraction :=aNumerator.
	denominatorFraction := aDenominator ! !

 frac := Fracciones with: 4 over: 5.  
!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:49:32' prior: 50606894 overrides: 50606887!
// aDivisor 
	^self valueEntero // (aDivisor valueEntero) .
		! !

 frac := Fracciones with: 4 over: 5.  
!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 17:50:54' prior: 50606879!
greatestCommonDivisorWith: anEntero 
	^Enteros with: ((self valueEntero ) gcd: (anEntero valueEntero )).
		! !

 frac := Fracciones with: 4 over: 5.  
!

 frac := Fracciones with: 4 over: 5.  
!
!Enteros methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 18:02:57' overrides: 50606235!
isOne
	^(valueInteger = 1).
! !

 frac := Fracciones with: 4 over: 5.  
!

frac!
!Fracciones methodsFor: 'as yet unclassified' stamp: 'af 4/16/2023 18:03:48' overrides: 50606276!
numerator
	^numeratorFraction ! !

frac numerator 
!

frac numerator 
!

 frac := Numero with: 4 over: 5. 
!

  frac numerator 
!

frac!

!methodRemoval: Numero #type stamp: 'af 4/16/2023 18:05:40'!
type
	^type!

 frac := Numero with: 4 over: 5. 
!

frac!

Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Numero category: 'Numero-Exercise' stamp: 'af 4/16/2023 18:06:01'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

 frac := Numero with: 4 over: 5. 
!

frac!

ent := Numero with: 80 .
!

ent!

 frac := Numero with: 1 over: 2. 
!

frac!

 frac := Numero with: 1 over: 2. 
!

frac!

frac!

Numero with: 1 over: 2. !

 frac := Fracciones with: 1 over: 2. 
!

frac!

frac!

cero = Numero with: 0!

cero := Numero with: 0!

cero := Numero with: 0  !

uno := Numero with: 1!

uno!

fracs := Fracciones with: 3 over: 3.!

fracs!

fracs := Fracciones with: 7 over: 11.  !

fracs!

2 hash!

2 hash !

----SNAPSHOT----(16 April 2023 18:39:41) CuisUniversity-5706.image priorSource: 8758269!

----SNAPSHOT----(16 April 2023 18:39:45) CuisUniversity-5706.image priorSource: 8811476!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\02-Numeros\Ejercicio Numeros\Pre-Numeros-Ejercicio Solu.st----!

!classRemoval: #Fracciones stamp: 'af 4/16/2023 18:45:42'!
Numero subclass: #Fracciones
	instanceVariableNames: 'numeratorFraction denominatorFraction'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Fraccion stamp: 'af 4/16/2023 18:45:42'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Enteros stamp: 'af 4/16/2023 18:45:43'!
Numero subclass: #Enteros
	instanceVariableNames: 'valueInteger'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'af 4/16/2023 18:45:43'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'af 4/16/2023 18:45:43'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'af 4/16/2023 18:45:43'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo negativeOneHalf'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\02-Numeros\Ejercicio Numeros\Pre-Numeros-Ejercicio Solu.st----!

Fraccion with:  6 over: 13!

fr := Fraccion with:  6 over: 13!

fr := Numero with:  6 over: 13!

	zero := Entero with: 0.
	one := Entero with: 1.
	two := Entero with: 2.
	three:= Entero with: 3.
	four := Entero with: 4.
	five := Entero with: 5.
	eight := Entero with: 8.
	negativeOne := Entero with: -1.
	negativeTwo := Entero with: -2.
	
	oneHalf := Fraccion with: one over: two.!

oneHalf!

	oneHalf + oneHalf!

	oneHalf + one!

	one + oneHalf!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\02-Numeros\Ejercicio Numeros\Numeros-Ejercicio.st----!

!classRemoval: #Fraccion stamp: 'af 4/16/2023 18:58:30'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Entero stamp: 'af 4/16/2023 18:58:31'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Numero stamp: 'af 4/16/2023 18:58:31'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #NumeroTest stamp: 'af 4/16/2023 18:58:31'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\02-Numeros\Ejercicio Numeros\Numeros-Ejercicio.st----!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/16/2023 18:59:40'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/16/2023 18:59:40'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/16/2023 18:59:40'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/16/2023 18:59:40'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/16/2023 18:59:40'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/16/2023 18:59:40'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/16/2023 18:59:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/16/2023 18:59:41'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/16/2023 18:59:41'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/16/2023 18:59:41'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/16/2023 18:59:41'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/16/2023 18:59:41'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/16/2023 18:59:41'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/16/2023 18:59:41'!
ERROR!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/16/2023 19:00:28'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/16/2023 19:01:09'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/16/2023 19:01:52'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/16/2023 19:02:24'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/16/2023 19:02:43'!
ERROR!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/16/2023 19:02:43'!
ERROR!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/16/2023 19:02:53'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/16/2023 19:02:53'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/16/2023 19:02:53'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/16/2023 19:02:53'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/16/2023 19:02:53'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/16/2023 19:02:53'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/16/2023 19:02:53'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/16/2023 19:02:54'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/16/2023 19:02:54'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/16/2023 19:02:54'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/16/2023 19:02:54'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/16/2023 19:02:54'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/16/2023 19:02:54'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/16/2023 19:02:54'!
ERROR!

seis := Entero with: 6.
ocho := Entero with: 8.!

seis + ocho!

seis / ocho!

seis / ocho!

seis := Entero with: 6.
cinco := Entero with: 5.
frac := seis / cinco!

frac = Fraccion with: seis over: cinco!

Fraccion with: seis over: cinco!

frac!

frac == Fraccion with: seis over: cinco !

frac!

Fraccion with: seis over: cinco !

frac = Fraccion with: seis over: cinco !

seis := Entero with: 6.
cinco := Entero with: 5.
frac1 := seis / cinco.
frac2 := Fraccion with: seis over: cinco.!

frac1 = frac2!

frac2 := Fraccion with: seis over: (Entero with: 3).
!

frac2!

cinco / 2!

cinco // 2!

cinco / 2!

cinco / (Entero with: 2)!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:18:41' prior: 50608939 overrides: 50608868!
+ anAdder 
	| fractionTemp |
	fractionTemp := 1.
	
	^self class with: value + anAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:20:47' prior: 50609485 overrides: 50608868!
+ anAdder 
	| fractionTemp asdas|
	fractionTemp := value / (value + 1).
	asdas := anAdder / (value + 1)
	^self class with: value + anAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:24:21' prior: 50609492 overrides: 50608868!
+ anAdder 
	"| fractionTemp asdas|
	fractionTemp := value / (value + 1).
	asdas := anAdder / (value + 1)"
	^self class with: value + anAdder integerValue
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:36:41' prior: 50609501 overrides: 50608868!
+ anAdder 
	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [anAdder class with: ((value+1)*(anAdder numerator))  over: (anAdder denominator )
		].! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/16/2023 19:36:49'!
ERROR!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/16/2023 19:36:49'!
ERROR!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/16/2023 19:36:49'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/16/2023 19:36:49'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/16/2023 19:36:49'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/16/2023 19:36:49'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/16/2023 19:36:49'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/16/2023 19:36:49'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/16/2023 19:36:50'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/16/2023 19:36:50'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/16/2023 19:36:50'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/16/2023 19:36:50'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/16/2023 19:36:50'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/16/2023 19:36:50'!
ERROR!

frac2 := Fraccion with: seis over: (Entero with: 11).
!

cinco + frac2!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:38:38' prior: 50609510 overrides: 50608868!
+ anAdder 
	| one |
	one := Entero with: 1.
	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [anAdder class with: ((value+1)*(anAdder numerator))  over: (anAdder denominator )
		].! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:39:00' prior: 50609658 overrides: 50608868!
+ anAdder 
	| one |
	one := Entero with: 1.
	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [anAdder class with: ((self + one)*(anAdder numerator))  over: (anAdder denominator )
		].! !

cinco + frac2!

one := Entero with: 1.
!

cinco + one!

dos := Entero with: 2.
!

frac2 := Fraccion with: one over: dos.
!

one + frac2!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:41:34' prior: 50609669 overrides: 50608868!
+ anAdder 
	| one |
	one := Entero with: 1.
	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self + one)*(anAdder numerator))  over: (anAdder denominator ))
		].! !

one + frac2!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:41:56'!
aef
! !

one aef!

!methodRemoval: Entero #aef stamp: 'af 4/16/2023 19:42:18'!
aef
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:42:58' prior: 50609685 overrides: 50608868!
+ anAdder 
	| one |
	one := Entero with: 1.
	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(Fraccion with: ((self + one)*(anAdder numerator))  over: (anAdder denominator ))
		].! !

one + frac2!

one + frac2!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:43:29' prior: 50609703 overrides: 50608868!
+ anAdder 
	| one |
	one := Entero with: 1.
	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self + one)*(anAdder numerator))  over: (anAdder denominator ))
		].! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:44:50' prior: 50609715 overrides: 50608868!
+ anAdder 
	| one |
	one := Entero with: 1.
	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self + one)*(anAdder denominator ))  over: (anAdder denominator ))
		].! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:45:50' prior: 50609727 overrides: 50608868!
+ anAdder 
	| one |
	one := Entero with: 1.
	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self * anAdder denominator )+ ( anAdder numerator ))  over: (anAdder denominator ))
		].! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:45:58' prior: 50609739 overrides: 50608868!
+ anAdder 

	(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self * anAdder denominator )+ ( anAdder numerator ))  over: (anAdder denominator ))
		].! !

one + frac2!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:49:13' prior: 50609061 overrides: 50608868!
+ anAdder 
	
	| newNumerator newDenominator |
	
	(anAdder isKindOf: self class) 
	ifTrue:  
	[newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator .]
	 ifFalse: 
	[^anAdder + self].
	
	! !

one + frac2!

frac2 + one!

frac2 + frac2!

frac2 := Fraccion with: one over: cinco.
!

frac2 + frac2!

frac2 + one!

one + frac2!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/16/2023 19:51:39'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/16/2023 19:51:40'!
ERROR!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/16/2023 19:51:40'!
ERROR!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/16/2023 19:51:40'!
ERROR!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/16/2023 19:51:40'!
ERROR!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/16/2023 19:51:40'!
FAILURE!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/16/2023 19:51:40'!
ERROR!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/16/2023 19:51:40'!
ERROR!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/16/2023 19:51:40'!
ERROR!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/16/2023 19:51:40'!
ERROR!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/16/2023 19:51:40'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/16/2023 19:51:40'!
ERROR!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 19:58:58' prior: 50608933 overrides: 50608863!
* aMultiplier 
	

	(aMultiplier isKindOf: self class) ifTrue:  [self class with: value * aMultiplier integerValue.]
	 ifFalse: [^ aMultiplier class with: (value * aMultiplier numerator integerValue) over: (aMultiplier denominator integerValue)] .
		! !

one * frac2 !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 20:01:00' prior: 50609917 overrides: 50608863!
* aMultiplier 
	

	(aMultiplier isKindOf: self class) ifTrue:  [^(self class with: value * aMultiplier integerValue).]
	 ifFalse: [^ (aMultiplier class with: (self * aMultiplier numerator) over: (aMultiplier denominator))] .
		! !

one * frac2 !

dos * frac2 !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/16/2023 20:15:30' prior: 50609054 overrides: 50608863!
* aMultiplier 
	
	
	
	(aMultiplier isKindOf: self class) ifTrue:  [^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).]
	 ifFalse: [^ (aMultiplier * self)] .! !

dos * frac2 !

frac2 * cinco!

frac2 * dos!

----SNAPSHOT----(16 April 2023 20:16:17) CuisUniversity-5706.image priorSource: 8811566!

cinco fibonacci !

seis := Entero with: 6.
!

seis fibonacci !

----SNAPSHOT----(16 April 2023 20:19:10) CuisUniversity-5706.image priorSource: 8905609!

0+0!

0/0!

10/0!

10/100000000000!

10^10!

1 / (10^1000 )!

a := 1 / (10^100000)!

a = 0!

a!

a := 1 / (10^(10^10))
!

----STARTUP---- (17 April 2023 20:17:54) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


13/ April!

13 / 11/ April!

13 / April / 2020!

12 / April / 2020!

12 / April / 12!

April / 12 / 2020!

April / 12 / 2027!

April / 12 / 2027!

February / 12 / 2027!

February / 29 / 2027!

February / 29 / 2028!

February / 29 / 1928!

February / 29 / 1929!

February / 29 / 0!

February / 29 / 4!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:53:30' prior: 50609751 overrides: 50608868!
+ anAdder 
	^ anAdder sumarEntero self.
	"(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self * anAdder denominator )+ ( anAdder numerator ))  over: (anAdder denominator ))
		]."! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:00'!
sumarEntero: anAdderEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:12'!
restarEntero: anAdderEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:23' prior: 50609993!
restarEntero: anRestarEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:33'!
multiplicarEntero: anRestarEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:55:10'!
dividirEntero: aDivisorEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:55:33' prior: 50610003!
multiplicarEntero: aProductoEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:56:10'!
sumarFraccion: anAdderFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:56:36'!
multiplicarFraccion: aProductFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:57:07'!
restarFraccion: anRestarFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:57:30'!
dividirFraccion: aDivisorFraccion

	self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:59:36' overrides: 50609988!
sumarEntero: anAdderEntero
	^self class with: value + anAdderEntero integerValue.! !

seis := Entero with: 6.
cinco := Entero with: 5.!

seis + cinco
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:00:25' prior: 50609977 overrides: 50608868!
+ anAdder 
	^ anAdder sumarEntero: self.
	"(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self * anAdder denominator )+ ( anAdder numerator ))  over: (anAdder denominator ))
		]."! !

seis + cinco
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:02:59' overrides: 50610018!
sumarFraccion: anAdderFraccion
	^ anAdderFraccion class with: ((self integerValue * anAdderFraccion denominator )+ ( anAdderFraccion numerator ))  over: (anAdderFraccion denominator ).! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:03:25' prior: 50610060 overrides: 50610018!
sumarFraccion: anAdderFraccion
	^ anAdderFraccion class with: ((value * anAdderFraccion denominator )+ ( anAdderFraccion numerator ))  over: (anAdderFraccion denominator ).! !

frac2 := Fraccion with: one over: cinco.
!

frac2 + seis
!

seis +  frac2
!

seis +  frac2
!

seis!

frac2!

frac2 +  seis
!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:06:31' overrides: 50609988!
sumarEntero: anAdderEntero
	^anAdderEntero sumarFraccion: self.
	
	! !

frac2 +  seis
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:07:24' prior: 50610070 overrides: 50610018!
sumarFraccion: anAdderFraccion
	^ anAdderFraccion class with: ((self * anAdderFraccion denominator )+ ( anAdderFraccion numerator ))  over: (anAdderFraccion denominator ).! !

frac2 +  seis
!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:08:56' prior: 50609763 overrides: 50608868!
+ anAdder 
	anAdder sumarFraccion: self.
	"
	| newNumerator newDenominator |
	
	(anAdder isKindOf: self class) 
	ifTrue:  
	[newNumerator := (numerator * anAdder denominator) + (denominator * anAdder numerator).
	newDenominator := denominator * anAdder denominator.
	
	^newNumerator / newDenominator .]
	 ifFalse: 
	[^anAdder + self]."
	
	! !

frac2 +  seis
!

seis!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:11:06' prior: 50609941 overrides: 50608863!
* aMultiplier 
	aMultiplier multiplicarFraccion: self.
	
	"
	(aMultiplier isKindOf: self class) ifTrue:  [^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).]
	 ifFalse: [^ (aMultiplier * self)] ."! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:11:55' prior: 50609072 overrides: 50608872!
- aSubtrahend 
	aSubtrahend restarFraccion: self.
	"| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:12:39' prior: 50609083 overrides: 50608877!
/ aDivisor 
	aDivisor dividirFraccion: self.
	"^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:41:05' prior: 50609929 overrides: 50608863!
* aMultiplier 
	aMultiplier multiplicarEntero: self.
	"
	(aMultiplier isKindOf: self class) ifTrue:  [^(self class with: value * aMultiplier integerValue).]
	 ifFalse: [^ (aMultiplier class with: (self * aMultiplier numerator) over: (aMultiplier denominator))] ."
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:41:37' prior: 50608945 overrides: 50608872!
- aSubtrahend 
	^aSubtrahend restarEntero: self.
	"^ self class with: value - aSubtrahend integerValue."! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:43:05' prior: 50608951 overrides: 50608877!
/ aDivisor 
	^ aDivisor dividirEntero: self.
	"^Fraccion with: self over: aDivisor"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:03:33'!
RestarEntero: aNumberToSuprahendEntero
	^self class with: aNumberToSuprahendEntero integerValue - value.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:03:39' overrides: 50609998!
restarEntero: aNumberToSuprahendEntero
	^self class with: aNumberToSuprahendEntero integerValue - value.! !

!methodRemoval: Entero #RestarEntero: stamp: 'af 4/19/2023 16:03:44'!
RestarEntero: aNumberToSuprahendEntero
	^self class with: aNumberToSuprahendEntero integerValue - value.!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:08:31' overrides: 50610028!
restarFraccion: aFractionToBeSuprahended
	^ aFractionToBeSuprahended class with: 
		(( aFractionToBeSuprahended numerator )-
		(self * aFractionToBeSuprahended denominator ) )  	
	over: (aFractionToBeSuprahended denominator ).! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:09:30' overrides: 50610013!
multiplicarEntero: aProductoEntero
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:09:41' overrides: 50610023!
multiplicarFraccion: aProductFraccion
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:09:55' overrides: 50610008!
dividirEntero: aDivisorEntero
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:10:08' prior: 50610208 overrides: 50610023!
multiplicarFraccion: aProductFraccion
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:10:18' overrides: 50610033!
dividirFraccion: aDivisorFraccion
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:10:53' prior: 50610203 overrides: 50610013!
multiplicarEntero: aProductoEntero

! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:11:33' prior: 50610228 overrides: 50610013!
multiplicarEntero: aProductoEntero
	^(self class with: (value * aProductoEntero integerValue)).
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:13:23' prior: 50610218 overrides: 50610023!
multiplicarFraccion: aProductFraccion
	^ (aProductFraccion class with: (self * aProductFraccion numerator) over: (aProductFraccion denominator))! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:14:11' prior: 50610213 overrides: 50610008!
dividirEntero: enteroASerDividido
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:14:37' prior: 50610223 overrides: 50610033!
dividirFraccion: fractionToBeDivided
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:14:49' prior: 50610249 overrides: 50610008!
dividirEntero: enteroToBeDivided
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:16:33' prior: 50610259 overrides: 50610008!
dividirEntero: enteroToBeDivided
	^Fraccion with: enteroToBeDivided over: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:17:53' prior: 50610254 overrides: 50610033!
dividirFraccion: fractionToBeDivided
	^Fraccion 
	with: (fractionToBeDivided numerator) 
	over: (fractionToBeDivided denominator * self ) .! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:22:48' overrides: 50610023!
multiplicarFraccion: aProductFraccion
	^self class " (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).]
	 ifFalse: [^ (aMultiplier * self)] ."! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:25:54' prior: 50610279 overrides: 50610023!
multiplicarFraccion: aProductFraccion
	^self class with:  (numerator * aProductFraccion numerator) over: (denominator * aProductFraccion denominator).! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:29:52' overrides: 50610013!
multiplicarEntero: aProductoEntero
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:06' overrides: 50609998!
restarEntero: aNumberToSuprahendEntero
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:14' overrides: 50610028!
restarFraccion: aFractionToBeSuprahended
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:20' prior: 50610083 overrides: 50609988!
sumarEntero: anAdderEntero
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:30' overrides: 50610018!
sumarFraccion: anAdderFraccion
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:54' overrides: 50610008!
dividirEntero: enteroToBeDivided
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:31:02' overrides: 50610033!
dividirFraccion: fractionToBeDivided
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:33:48' prior: 50610297 overrides: 50610013!
multiplicarEntero: aProductoEntero
	^ self class with: numerator * aProductoEntero  over: denominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:35:49' prior: 50610312 overrides: 50609988!
sumarEntero: anAdderEntero
	^anAdderEntero + self.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:36:56' prior: 50610339 overrides: 50609988!
sumarEntero: anAdderEntero
	^anAdderEntero + self. "Usando la simetria"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:37:04' prior: 50610345 overrides: 50609988!
sumarEntero: anAdderEntero
	^anAdderEntero + self. "Usando la simetria conmutativa"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:38:55' prior: 50610317 overrides: 50610018!
sumarFraccion: anAdderFraccion
	
	| newNumerator newDenominator |
	newNumerator := 
	(numerator * anAdderFraccion denominator) + (denominator * anAdderFraccion numerator).
	
	newDenominator := denominator * anAdderFraccion denominator.
	
	^ self class with: newNumerator over: newDenominator .! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:42:05' prior: 50610302 overrides: 50609998!
restarEntero: aNumberToSuprahendEntero
	^self class with: ((aNumberToSuprahendEntero * denominator ) - numerator )over: denominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:47:01' prior: 50610307 overrides: 50610028!
restarFraccion: aFractionToBeSuprahended
	| newNumerator newDenominator |
	newNumerator := 
	(denominator * aFractionToBeSuprahended numerator) - (numerator * aFractionToBeSuprahended denominator ).
	
	newDenominator := denominator * aFractionToBeSuprahended denominator.
	
	^ self class with: newNumerator over: newDenominator .! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:51:15' prior: 50610327 overrides: 50610033!
dividirFraccion: fractionToBeDivided
	^self class with:  (denominator * fractionToBeDivided numerator) over: (numerator * fractionToBeDivided denominator ).! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:52:32' prior: 50610322 overrides: 50610008!
dividirEntero: enteroToBeDivided
	^self class with: enteroToBeDivided * denominator over: numerator .! !

seis := Entero with: 6.
cinco := Entero with: 5.
seis + cinco!

dos := Entero with: 2.
!

seisQuintos := seis / cinco.
unQuinto := Fraccion with: one over: cinco.!

seisQuintos!

cuatro := Entero with: 4.
!

unCuarto := Fraccion with: one over: cuatro .
!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/19/2023 16:54:35'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/19/2023 16:54:35'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/19/2023 16:54:35'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/19/2023 16:54:35'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/19/2023 16:54:35'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/19/2023 16:54:35'!
FAILURE!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/19/2023 16:54:35'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/19/2023 16:54:35'!
FAILURE!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/19/2023 16:54:35'!
FAILURE!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/19/2023 16:54:35'!
FAILURE!

----STARTUP---- (19 April 2023 16:57:48) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!

!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:53:30' prior: 50609751 overrides: 50608868!
+ anAdder 
	^ anAdder sumarEntero self.
	"(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self * anAdder denominator )+ ( anAdder numerator ))  over: (anAdder denominator ))
		]."! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:00'!
sumarEntero: anAdderEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:12'!
restarEntero: anAdderEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:23' prior: 50610470!
restarEntero: anRestarEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:33'!
multiplicarEntero: anRestarEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:55:10'!
dividirEntero: aDivisorEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:55:33' prior: 50610480!
multiplicarEntero: aProductoEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:56:10'!
sumarFraccion: anAdderFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:56:36'!
multiplicarFraccion: aProductFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:57:07'!
restarFraccion: anRestarFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:57:30'!
dividirFraccion: aDivisorFraccion

	self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:59:36' overrides: 50610465!
sumarEntero: anAdderEntero
	^self class with: value + anAdderEntero integerValue.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:00' prior: 50610465!
sumarEntero: anAdderEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:12' prior: 50610475!
restarEntero: anAdderEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:23' prior: 50610527!
restarEntero: anRestarEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:33' prior: 50610490!
multiplicarEntero: anRestarEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:55:10' prior: 50610485!
dividirEntero: aDivisorEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:55:33' prior: 50610537!
multiplicarEntero: aProductoEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:56:10' prior: 50610495!
sumarFraccion: anAdderFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:56:36' prior: 50610500!
multiplicarFraccion: aProductFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:57:07' prior: 50610505!
restarFraccion: anRestarFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:57:30' prior: 50610510!
dividirFraccion: aDivisorFraccion

	self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:59:36' prior: 50610516 overrides: 50610522!
sumarEntero: anAdderEntero
	^self class with: value + anAdderEntero integerValue.! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:00' prior: 50610522!
sumarEntero: anAdderEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:12' prior: 50610532!
restarEntero: anAdderEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:23' prior: 50610586!
restarEntero: anRestarEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:54:33' prior: 50610547!
multiplicarEntero: anRestarEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:55:10' prior: 50610542!
dividirEntero: aDivisorEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:55:33' prior: 50610596!
multiplicarEntero: aProductoEntero

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:56:10' prior: 50610553!
sumarFraccion: anAdderFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:56:36' prior: 50610558!
multiplicarFraccion: aProductFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:57:07' prior: 50610564!
restarFraccion: anRestarFraccion

	self subclassResponsibility ! !
!Numero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:57:30' prior: 50610569!
dividirFraccion: aDivisorFraccion

	self subclassResponsibility ! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 14:59:36' prior: 50610575 overrides: 50610581!
sumarEntero: anAdderEntero
	^self class with: value + anAdderEntero integerValue.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:11:06' prior: 50609941 overrides: 50608863!
* aMultiplier 
	aMultiplier multiplicarFraccion: self.
	
	"
	(aMultiplier isKindOf: self class) ifTrue:  [^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).]
	 ifFalse: [^ (aMultiplier * self)] ."! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:11:06' prior: 50610641 overrides: 50608863!
* aMultiplier 
	aMultiplier multiplicarFraccion: self.
	
	"
	(aMultiplier isKindOf: self class) ifTrue:  [^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).]
	 ifFalse: [^ (aMultiplier * self)] ."! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:03:33'!
RestarEntero: aNumberToSuprahendEntero
	^self class with: aNumberToSuprahendEntero integerValue - value.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:11:06' prior: 50610652 overrides: 50608863!
* aMultiplier 
	aMultiplier multiplicarFraccion: self.
	
	"
	(aMultiplier isKindOf: self class) ifTrue:  [^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).]
	 ifFalse: [^ (aMultiplier * self)] ."! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:11:55' prior: 50609072 overrides: 50608872!
- aSubtrahend 
	aSubtrahend restarFraccion: self.
	"| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:12:39' prior: 50609083 overrides: 50608877!
/ aDivisor 
	aDivisor dividirFraccion: self.
	"^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:41:05' prior: 50609929 overrides: 50608863!
* aMultiplier 
	aMultiplier multiplicarEntero: self.
	"
	(aMultiplier isKindOf: self class) ifTrue:  [^(self class with: value * aMultiplier integerValue).]
	 ifFalse: [^ (aMultiplier class with: (self * aMultiplier numerator) over: (aMultiplier denominator))] ."
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:41:37' prior: 50608945 overrides: 50608872!
- aSubtrahend 
	^aSubtrahend restarEntero: self.
	"^ self class with: value - aSubtrahend integerValue."! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 15:43:05' prior: 50608951 overrides: 50608877!
/ aDivisor 
	^ aDivisor dividirEntero: self.
	"^Fraccion with: self over: aDivisor"! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:03:33' prior: 50610662!
RestarEntero: aNumberToSuprahendEntero
	^self class with: aNumberToSuprahendEntero integerValue - value.! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:03:39' overrides: 50610591!
restarEntero: aNumberToSuprahendEntero
	^self class with: aNumberToSuprahendEntero integerValue - value.! !

!methodRemoval: Entero #RestarEntero: stamp: 'af 4/19/2023 17:06:06'!
RestarEntero: aNumberToSuprahendEntero
	^self class with: aNumberToSuprahendEntero integerValue - value.!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:08:31' overrides: 50610623!
restarFraccion: aFractionToBeSuprahended
	^ aFractionToBeSuprahended class with: 
		(( aFractionToBeSuprahended numerator )-
		(self * aFractionToBeSuprahended denominator ) )  	
	over: (aFractionToBeSuprahended denominator ).! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:09:30' overrides: 50610606!
multiplicarEntero: aProductoEntero
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:09:41' overrides: 50610617!
multiplicarFraccion: aProductFraccion
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:09:55' overrides: 50610601!
dividirEntero: aDivisorEntero
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:10:08' prior: 50610761 overrides: 50610617!
multiplicarFraccion: aProductFraccion
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:10:18' overrides: 50610628!
dividirFraccion: aDivisorFraccion
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:10:53' prior: 50610756 overrides: 50610606!
multiplicarEntero: aProductoEntero

! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:11:33' prior: 50610781 overrides: 50610606!
multiplicarEntero: aProductoEntero
	^(self class with: (value * aProductoEntero integerValue)).
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:13:23' prior: 50610771 overrides: 50610617!
multiplicarFraccion: aProductFraccion
	^ (aProductFraccion class with: (self * aProductFraccion numerator) over: (aProductFraccion denominator))! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:14:11' prior: 50610766 overrides: 50610601!
dividirEntero: enteroASerDividido
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:14:37' prior: 50610776 overrides: 50610628!
dividirFraccion: fractionToBeDivided
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:13:23' prior: 50610793 overrides: 50610617!
multiplicarFraccion: aProductFraccion
	^ (aProductFraccion class with: (self * aProductFraccion numerator) over: (aProductFraccion denominator))! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:14:11' prior: 50610802 overrides: 50610601!
dividirEntero: enteroASerDividido
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:14:37' prior: 50610807 overrides: 50610628!
dividirFraccion: fractionToBeDivided
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:14:49' prior: 50610821 overrides: 50610601!
dividirEntero: enteroToBeDivided
! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:16:33' prior: 50610831 overrides: 50610601!
dividirEntero: enteroToBeDivided
	^Fraccion with: enteroToBeDivided over: self! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:17:53' prior: 50610826 overrides: 50610628!
dividirFraccion: fractionToBeDivided
	^Fraccion 
	with: (fractionToBeDivided numerator) 
	over: (fractionToBeDivided denominator * self ) .! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:22:48' overrides: 50610617!
multiplicarFraccion: aProductFraccion
	^self class " (numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).]
	 ifFalse: [^ (aMultiplier * self)] ."! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:25:54' prior: 50610851 overrides: 50610617!
multiplicarFraccion: aProductFraccion
	^self class with:  (numerator * aProductFraccion numerator) over: (denominator * aProductFraccion denominator).! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:29:52' overrides: 50610606!
multiplicarEntero: aProductoEntero
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:06' overrides: 50610591!
restarEntero: aNumberToSuprahendEntero
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:14' overrides: 50610623!
restarFraccion: aFractionToBeSuprahended
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:20' overrides: 50610581!
sumarEntero: anAdderEntero
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:30' overrides: 50610612!
sumarFraccion: anAdderFraccion
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:30:54' overrides: 50610601!
dividirEntero: enteroToBeDivided
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:31:02' overrides: 50610628!
dividirFraccion: fractionToBeDivided
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:33:48' prior: 50610869 overrides: 50610606!
multiplicarEntero: aProductoEntero
	^ self class with: numerator * aProductoEntero  over: denominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:35:49' prior: 50610884 overrides: 50610581!
sumarEntero: anAdderEntero
	^anAdderEntero + self.! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:36:56' prior: 50610911 overrides: 50610581!
sumarEntero: anAdderEntero
	^anAdderEntero + self. "Usando la simetria"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:37:04' prior: 50610917 overrides: 50610581!
sumarEntero: anAdderEntero
	^anAdderEntero + self. "Usando la simetria conmutativa"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:38:55' prior: 50610889 overrides: 50610612!
sumarFraccion: anAdderFraccion
	
	| newNumerator newDenominator |
	newNumerator := 
	(numerator * anAdderFraccion denominator) + (denominator * anAdderFraccion numerator).
	
	newDenominator := denominator * anAdderFraccion denominator.
	
	^ self class with: newNumerator over: newDenominator .! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:42:05' prior: 50610874 overrides: 50610591!
restarEntero: aNumberToSuprahendEntero
	^self class with: ((aNumberToSuprahendEntero * denominator ) - numerator )over: denominator ! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:47:01' prior: 50610879 overrides: 50610623!
restarFraccion: aFractionToBeSuprahended
	| newNumerator newDenominator |
	newNumerator := 
	(denominator * aFractionToBeSuprahended numerator) - (numerator * aFractionToBeSuprahended denominator ).
	
	newDenominator := denominator * aFractionToBeSuprahended denominator.
	
	^ self class with: newNumerator over: newDenominator .! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:51:15' prior: 50610899 overrides: 50610628!
dividirFraccion: fractionToBeDivided
	^self class with:  (denominator * fractionToBeDivided numerator) over: (numerator * fractionToBeDivided denominator ).! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:52:32' prior: 50610894 overrides: 50610601!
dividirEntero: enteroToBeDivided
	^self class with: enteroToBeDivided * denominator over: numerator .! !

seis := Entero with: 6.
cinco := Entero with: 5.
cuatro := Entero with: 4.
tres := Entero with: 3.
dos := Entero with: 2.!

one := Entero with: 1.
!

seisQuintos := seis / cinco.
!

unQuinto := Fraccion with: one over: cinco.
!

unCuarto := Fraccion with: one over: cuatro.
!

tresCuartos :=Fraccion with: tres over: cuatro.
!

dosTercios := Fraccion with: dos over: tres.
!

----SNAPSHOT----(19 April 2023 17:09:25) CuisUniversity-5706.image priorSource: 8905763!

cinco / (Entero with: 2)
!

seis + cuatro
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:10:07' prior: 50610454 overrides: 50608868!
+ anAdder 
	^ anAdder sumarEntero: self.
	"(anAdder isKindOf: self class) ifTrue:  [^self class with: value + anAdder integerValue.]
	 ifFalse: [^(anAdder class with: ((self * anAdder denominator )+ ( anAdder numerator ))  over: (anAdder denominator ))
		]."! !

seis + cuatro
!

tres - dos
!

dos - tres
!

unQuinto + unCuarto
!

unQuinto + unCuarto
!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:38:55' prior: 50610930 overrides: 50610612!
sumarFraccion: anAdderFraccion
	
	| newNumerator newDenominator |
	newNumerator := 
	(numerator * anAdderFraccion denominator) + (denominator * anAdderFraccion numerator).
	
	newDenominator := denominator * anAdderFraccion denominator.
	
	^ self class with: newNumerator over: newDenominator .! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:37:04' prior: 50610923 overrides: 50610581!
sumarEntero: anAdderEntero
	^anAdderEntero + self. "Usando la simetria conmutativa"! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 16:38:55' prior: 50611012 overrides: 50610612!
sumarFraccion: anAdderFraccion
	
	| newNumerator newDenominator |
	newNumerator := 
	(numerator * anAdderFraccion denominator) + (denominator * anAdderFraccion numerator).
	
	newDenominator := denominator * anAdderFraccion denominator.
	
	^ self class with: newNumerator over: newDenominator .! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:13:44' prior: 50609763 overrides: 50608868!
+ anAdder 
	
	anAdder multiplicarFraccion: self.
	
	! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:17:02' overrides: 50610612!
sumarFraccion: anAdderFraccion
	^anAdderFraccion class with: ((self * (anAdderFraccion denominator)) + (anAdderFraccion numerator ) )
	over: anAdderFraccion denominator .! !

seis + cuatro
!

cinco / (Entero with: 2)
!

dos - tres
!

unQuinto + unCuarto
!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:18:47' prior: 50611045 overrides: 50608868!
+ anAdder 
	
	anAdder sumarFraccion: self.
	
	! !

unQuinto + unCuarto
!

unCuarto!

unQuinto!

unQuinto + unCuarto
!

seis * cuatro
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:21:59' prior: 50610786 overrides: 50610606!
multiplicarEntero: aProductoEntero
	^(self class with: (value * (aProductoEntero integerValue))).
! !

seis * cuatro
!

seis integerValue 
!

cuatro!

seis * cuatro
!

testMultEnt := seis * cuatro.
!

testMultEnt!

2 *6
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:25:06' prior: 50611070 overrides: 50610606!
multiplicarEntero: aProductoEntero
	^self class with: (value * (aProductoEntero integerValue) ) .
! !

2 *6
!

testMultEnt := seis * cuatro.
!

seis + cuatro
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:25:40' prior: 50611081 overrides: 50610606!
multiplicarEntero: aProductoEntero
	^self class with: ((aProductoEntero integerValue)*value ) .
! !

testMultEnt := seis * cuatro.
!

testMultEnt := seis * cuatro.
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:26:55' prior: 50611090 overrides: 50610606!
multiplicarEntero: aProductoEntero
	^self class with: 2000"((aProductoEntero integerValue)*value ) ."
! !

testMultEnt := seis * cuatro.
!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:27:14' prior: 50610701 overrides: 50608863!
* aMultiplier 
	^aMultiplier multiplicarEntero: self.
	"
	(aMultiplier isKindOf: self class) ifTrue:  [^(self class with: value * aMultiplier integerValue).]
	 ifFalse: [^ (aMultiplier class with: (self * aMultiplier numerator) over: (aMultiplier denominator))] ."
		! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:27:21' prior: 50611099 overrides: 50610606!
multiplicarEntero: aProductoEntero
	^self class with: ((aProductoEntero integerValue)*value ) .
! !

testMultEnt := seis * cuatro.
!

testMultEnt!

veintiCuatro := seis * cuatro.
!

quince := cinco * tres
!

dos - tres
!

menosUno := dos - tres
!

menosUno!

veintiCuatro / quince
!

unQuinto + unCuarto
!
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:31:21' prior: 50611062 overrides: 50608868!
+ anAdder 
	
	^anAdder sumarFraccion: self.
	
	! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:31:27' prior: 50610669 overrides: 50608863!
* aMultiplier 
	^aMultiplier multiplicarFraccion: self.
	
	"
	(aMultiplier isKindOf: self class) ifTrue:  [^(numerator * aMultiplier numerator) / (denominator * aMultiplier denominator).]
	 ifFalse: [^ (aMultiplier * self)] ."! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:31:33' prior: 50610680 overrides: 50608872!
- aSubtrahend 
	^aSubtrahend restarFraccion: self.
	"| newNumerator newDenominator |
	
	newNumerator := (numerator * aSubtrahend denominator) - (denominator * aSubtrahend numerator).
	newDenominator := denominator * aSubtrahend denominator.
	
	^newNumerator / newDenominator "
! !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:31:37' prior: 50610693 overrides: 50608877!
/ aDivisor 
	^aDivisor dividirFraccion: self.
	"^(numerator * aDivisor denominator) / (denominator * aDivisor numerator)"! !

veintiCuatro := seis * cuatro.
!

veintiCuatro / quince
!

unQuinto + unCuarto!

unCuarto - unQuinto!

unQuinto - unCuarto!

tresCuartos * dosTercios
!

tresCuartos / dosTercios
!

----SNAPSHOT----(19 April 2023 17:34:02) CuisUniversity-5706.image priorSource: 8938912!

tresCuartos + 2!

tresCuartos + dos!

tres + unQuinto !

tres + unQuinto !
!Fraccion methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:38:37' prior: 50611025 overrides: 50610581!
sumarEntero: anAdderEntero
	^self class with: (( anAdderEntero * denominator) + numerator)
	  over: denominator .! !

tres + unQuinto !

tresCuartos + dos
!

tresCuartos / dosTercios
!

tresCuartos * dosTercios
!

veintiCuatro * dosTercios !

veintiCuatro * dosTercios!

unQuinto!

quince * dosTercios!

unQuinto * veintiCuatro !

quince / dosTercios!

dos / seisQuintos !

seisQuintos / dos
!

----SNAPSHOT----(19 April 2023 17:42:22) CuisUniversity-5706.image priorSource: 8944785!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/19/2023 17:42:25'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/19/2023 17:42:26'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/19/2023 17:42:26'!
PASSED!

----SNAPSHOT----(19 April 2023 17:45:16) CuisUniversity-5706.image priorSource: 8945481!

Entero subclass: #Uno
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Uno category: 'Numero-Exercise' stamp: 'af 4/19/2023 17:51:03'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Cero category: 'Numero-Exercise' stamp: 'af 4/19/2023 17:51:14'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

Entero subclass: #Zero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #Zero category: 'Numero-Exercise' stamp: 'af 4/19/2023 17:51:24'!
Entero subclass: #Zero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Zero stamp: 'af 4/19/2023 17:51:42'!
Entero subclass: #Zero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/19/2023 17:52:24' prior: 50608961!
fibonacci
	^self subclassResponsibility .
	"| one two |
	
	one := Entero with: 1.
	two := Entero with: 2.
	
	self isNegative ifTrue: [self error: Entero negativeFibonacciErrorDescription ].	
	(self isZero or: [self isOne]) ifTrue: [^one].
	
	^ (self - one) fibonacci + (self - two) fibonacci"
		! !

seis := Entero with: 6.
cinco := Entero with: 5.
cuatro := Entero with: 4.
tres := Entero with: 3.
dos := Entero with: 2.
one := Entero with: 1.!

one := Entero with: 1.
!

one := Entero with: 1.
!

Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroNegativo category: 'Numero-Exercise' stamp: 'af 4/19/2023 17:54:03'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Cero methodsFor: 'no messages' stamp: 'af 4/19/2023 17:54:17' overrides: 50611381!
fibonacci! !
!EnteroNegativo methodsFor: 'nil' stamp: 'af 4/19/2023 17:54:22' overrides: 50611381!
fibonacci! !
!Uno methodsFor: 'no messages' stamp: 'af 4/19/2023 17:54:27' overrides: 50611381!
fibonacci! !

Entero subclass: #EnteroMayorA1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroMayorA1 category: 'Numero-Exercise' stamp: 'af 4/19/2023 17:56:28'!
Entero subclass: #EnteroMayorA1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!Uno methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 18:10:25' prior: 50611418 overrides: 50611381!
fibonacci
	^self.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/19/2023 18:14:57'!
ERROR!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/19/2023 18:14:57'!
ERROR!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/19/2023 18:14:57'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/19/2023 18:14:57'!
FAILURE!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/19/2023 18:14:57'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/19/2023 18:14:57'!
PASSED!
!Cero methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 18:20:55' prior: 50611411 overrides: 50611381!
fibonacci
	^Entero with: 1.! !
!Uno methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 18:21:27' prior: 50611434 overrides: 50611381!
fibonacci
	^Entero with: 1.! !

Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classDefinition: #EnteroPositivo category: 'Numero-Exercise' stamp: 'af 4/19/2023 21:08:21'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #EnteroMayorA1 stamp: 'af 4/19/2023 21:08:39'!
Entero subclass: #EnteroMayorA1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

!classRemoval: #Uno stamp: 'af 4/19/2023 21:08:55'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!
!EnteroNegativo class methodsFor: 'nil' stamp: 'af 4/19/2023 21:10:20' overrides: 50609023!
negativeFibonacciErrorDescription
	^ ' Fibonacci no está definido aquí para Enteros Negativos!!!!!!'! !
!Entero class methodsFor: 'instance creation' stamp: 'af 4/19/2023 21:12:19' prior: 50609030!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	aValue<0 ifTrue: [^EnteroNegativo new initalizeWith: aValue].
	aValue>0 ifTrue: [^EnteroPositivo new initalizeWith: aValue].
	aValue=0 ifTrue: [^Cero new initalizeWith: aValue].! !

cuatro := Entero with: 4.
!

cuatro!

menosUno := dos - tres
!

menosUno!

cer := one - one
!

cer!
!EnteroPositivo methodsFor: 'nil' stamp: 'af 4/19/2023 21:14:21' overrides: 50611381!
fibonacci
	| one two |
	one := Entero with: 1.
	two := Entero with: 2.
	^ (self - one) fibonacci + (self - two) fibonacci
		! !
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 21:14:24' prior: 50611634 overrides: 50611381!
fibonacci
	| one two |
	one := Entero with: 1.
	two := Entero with: 2.
	^ (self - one) fibonacci + (self - two) fibonacci.
		! !
!Cero methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 21:15:00' prior: 50611575 overrides: 50611381!
fibonacci
	^self.! !
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 21:16:25' prior: 50611642 overrides: 50611381!
fibonacci
	| one two |
	one := Entero with: 1.
	two := Entero with: 2.
	value = one ifTrue: [^self].
	^ (self - one) fibonacci + (self - two) fibonacci.
		! !
!EnteroNegativo methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 21:17:04' prior: 50611415 overrides: 50611381!
fibonacci
	self error: Entero negativeFibonacciErrorDescription ! !

----SNAPSHOT----(19 April 2023 21:17:10) CuisUniversity-5706.image priorSource: 8949926!

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/19/2023 21:17:14'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/19/2023 21:17:14'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/19/2023 21:17:14'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/19/2023 21:17:15'!
FAILURE!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/19/2023 21:17:15'!
ERROR!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/19/2023 21:17:15'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/19/2023 21:17:15'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/19/2023 21:17:15'!
PASSED!
!Cero methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 21:17:32' prior: 50611650 overrides: 50611381!
fibonacci
	^Entero with: 1.! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/19/2023 21:17:39'!
ERROR!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/19/2023 21:17:39'!
ERROR!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/19/2023 21:17:39'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/19/2023 21:17:39'!
PASSED!
!EnteroPositivo methodsFor: 'as yet unclassified' stamp: 'af 4/19/2023 21:17:58' prior: 50611655 overrides: 50611381!
fibonacci
	| one two |
	one := Entero with: 1.
	two := Entero with: 2.
	value = 1 ifTrue: [^self].
	^ (self - one) fibonacci + (self - two) fibonacci.
		! !

!testRun: #NumeroTest #test01isCeroReturnsTrueWhenAskToZero stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test02isCeroReturnsFalseWhenAskToOthersButZero stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test03isOneReturnsTrueWhenAskToOne stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test04isOneReturnsFalseWhenAskToOtherThanOne stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test05EnteroAddsWithEnteroCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test06EnteroMultipliesWithEnteroCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test07EnteroDividesEnteroCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test08FraccionAddsWithFraccionCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test09FraccionMultipliesWithFraccionCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test10FraccionDividesFraccionCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test11EnteroAddsFraccionCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test12FraccionAddsEnteroCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test13EnteroMultipliesFraccionCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test14FraccionMultipliesEnteroCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test15EnteroDividesFraccionCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test16FraccionDividesEnteroCorrectly stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test17AFraccionCanBeEqualToAnEntero stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test18AparentFraccionesAreEqual stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test19AddingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test20MultiplyingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:18:07'!
PASSED!

!testRun: #NumeroTest #test21DividingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test22DividingEnterosCanReturnAFraccion stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test23CanNotDivideEnteroByZero stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test24CanNotDivideFraccionByZero stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test25AFraccionCanNotBeZero stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test26AFraccionCanNotBeOne stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test27EnteroSubstractsEnteroCorrectly stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test28FraccionSubstractsFraccionCorrectly stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test29EnteroSubstractsFraccionCorrectly stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test30FraccionSubstractsEnteroCorrectly stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test31SubstractingFraccionesCanReturnAnEntero stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test32SubstractingSameEnterosReturnsZero stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test33SubstractingSameFraccionesReturnsZero stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test34SubstractingAHigherValueToANumberReturnsANegativeNumber stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test35FibonacciZeroIsOne stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test36FibonacciOneIsOne stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test37FibonacciEnteroReturnsAddingPreviousTwoFibonacciEnteros stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test38FibonacciNotDefinedForNegativeNumbers stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test39NegationOfEnteroIsCorrect stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test40NegationOfFraccionIsCorrect stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test41SignIsCorrectlyAssignedToFractionWithTwoNegatives stamp: 'af 4/19/2023 21:18:08'!
PASSED!

!testRun: #NumeroTest #test42SignIsCorrectlyAssignedToFractionWithNegativeDivisor stamp: 'af 4/19/2023 21:18:08'!
PASSED!

----SNAPSHOT----(19 April 2023 21:19:19) CuisUniversity-5706.image priorSource: 8960579!

----STARTUP---- (20 April 2023 18:59:19) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\fridm\OneDrive\Escritorio\2023-1c\03-Stack\Stack-Exercise.st----!
!OOStack class methodsFor: 'error descriptions' stamp: 'af 4/20/2023 21:03:43' overrides: 16785646!
new
	^self! !

Object subclass: #OOStack
	instanceVariableNames: 'lista'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'af 4/20/2023 21:04:29'!
Object subclass: #OOStack
	instanceVariableNames: 'lista'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

list!

heap!
!OOStack methodsFor: 'nil' stamp: 'af 4/20/2023 21:08:24'!
initalize
^  LinkedList new .! !

OOStack!

OOStack new!

s := OOStack new!

s := OOStack new!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:10:42' prior: 50612276!
initalize
^ LinkedList new .! !

!classDefinition: 'OOStack class' category: 'Stack-Exercise' stamp: 'af 4/20/2023 21:11:01'!
OOStack class
	instanceVariableNames: 'initalize'!
!OOStack class methodsFor: 'error descriptions' stamp: 'af 4/20/2023 21:10:57' prior: 50612262 overrides: 16785646!
new
	^initalize.! !

s := OOStack new !

s!

s := OOStack new!

!methodRemoval: OOStack class #new stamp: 'af 4/20/2023 21:12:48'!
new
	^initalize.!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:13:33' prior: 50612282!
initalize
^ lista := LinkedList new .! !

s := OOStack new!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:14:41'!
isEmpty
^ lista isEmpty .! !

s := OOStack new!

s isEmpty!

s isEmpty!

LinkedList!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:16:13' prior: 50612305!
isEmpty
^ lista isEmpty.! !

s isEmpty!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:17:02' prior: 50612300!
initalize
	lista := LinkedList new .! !

s := OOStack new
!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:18:28'!
pop
! !

s := OOStack new
!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:19:55' overrides: 16920235!
initialize
	lista := LinkedList new .! !

!methodRemoval: OOStack #initalize stamp: 'af 4/20/2023 21:19:59'!
initalize
	lista := LinkedList new .!

s := OOStack new
!

s!

 s isEmpty!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:20:26'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:20:26'!
ERROR!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:20:26'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:20:26'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:20:26'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:20:26'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:20:26'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:20:26'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:20:27'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:20:27'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:21:45'!
push: anElementToBeAdded
	^lista addLast: anElementToBeAdded! !

s := OOStack new
!

 s push: 4!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:23:02' prior: 50612325 overrides: 16920235!
initialize
	lista := OrderedCollection new .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:23:24' prior: 50612373 overrides: 16920235!
initialize
	| colecccion |
	colecccion := OrderedCollection new .! !

Object subclass: #OOStack
	instanceVariableNames: 'colecccion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:23:50' prior: 50612378 overrides: 16920235!
initialize
	| colecccion1 |
	colecccion1 := OrderedCollection new .! !

Object subclass: #OOStack
	instanceVariableNames: 'colecccion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'af 4/20/2023 21:23:59'!
Object subclass: #OOStack
	instanceVariableNames: 'colecccion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:24:06' prior: 50612388 overrides: 16920235!
initialize

	colecccion := OrderedCollection new .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:24:11' prior: 50612406 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:26:08' prior: 50612311!
isEmpty
^ colecccion isEmpty.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:26:18' prior: 50612366!
push: anElementToBeAdded
	^colecccion addLast: anElementToBeAdded! !

s := OOStack new
!

s!

 s push:4
!

s!

 s push:6
!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:28:52' prior: 50612321!
pop
	^colecccion removeLast! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:28:57'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:28:57'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:28:57'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:28:57'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:28:57'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:28:57'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:28:57'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:28:57'!
FAILURE!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:28:57'!
FAILURE!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:28:57'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:30:16' prior: 50612428!
pop
	colecccion isEmpty ifTrue: [].
	^colecccion removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:30:38' prior: 50612465!
pop
	colecccion isEmpty ifTrue: [^self stackEmptyErrorDescription].
	^colecccion removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:30:49'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:30:49'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:30:49'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:30:49'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:30:49'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:30:49'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:30:49'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:30:49'!
ERROR!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:30:49'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:30:49'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:32:02' prior: 50612470!
pop
	colecccion isEmpty ifTrue: [^self error: OOStack  ].
	^colecccion removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:32:16' prior: 50612509!
pop
	colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	^colecccion removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:32:23'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:32:23'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:32:23'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:32:23'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:32:23'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:32:23'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:32:23'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:32:23'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:32:23'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:32:23'!
ERROR!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:32:56'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:32:56'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:32:56'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:32:56'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:32:56'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:32:56'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:32:56'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:32:56'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:32:56'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:32:56'!
ERROR!

s pop!

s pop!

s pop!

s := OOStack new
!

s := OOStack new
!

 s push:6
!

s pop!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:34:29'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:34:29'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:34:29'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:34:29'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:34:29'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:34:29'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:34:29'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:34:29'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:34:29'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:34:29'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:35:00' overrides: 16901663!
size 
	^colecccion length ! !

s := OOStack new
!

 s push:6
!

s size!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:35:48' prior: 50612622 overrides: 16901663!
size 
	^colecccion size ! !

s size!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:35:57'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:35:57'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:35:57'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:35:57'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:35:57'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:35:57'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:35:57'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:35:57'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:35:57'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:35:57'!
ERROR!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:36:31'!
top 
	^colecccion last ! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:37:33' prior: 50612665!
top 
	^colecccion at: (colecccion lastIndex) ! !

s := OOStack new
!

 s push:6
!

 s size!

s top!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:40:36' prior: 50612669!
top 
	| elementTop |
	elementTop := self pop.
	self push: elementTop.
	^elementTop.! !

s := OOStack new
!

 s push:6
!

 s push:4
!

 s size
!

s top!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:41:04'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:41:05'!
PASSED!

OOStack subclass: #OOEmptyStack
	instanceVariableNames: 'colecccion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOEmptyStack
	instanceVariableNames: 'colecccion1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOEmptyStack category: 'Stack-Exercise' stamp: 'af 4/20/2023 21:44:31'!
OOStack subclass: #OOEmptyStack
	instanceVariableNames: 'colecccion1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OONonEmptyStack
	instanceVariableNames: 'colecccion1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONonEmptyStack category: 'Stack-Exercise' stamp: 'af 4/20/2023 21:44:46'!
OOStack subclass: #OONonEmptyStack
	instanceVariableNames: 'colecccion1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OOEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOEmptyStack category: 'Stack-Exercise' stamp: 'af 4/20/2023 21:45:10'!
OOStack subclass: #OOEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

OOStack subclass: #OONonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OONonEmptyStack category: 'Stack-Exercise' stamp: 'af 4/20/2023 21:45:15'!
OOStack subclass: #OONonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:47:04'!
PASSED!

!classRemoval: #OOEmptyStack stamp: 'af 4/20/2023 21:49:28'!
OOStack subclass: #OOEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OONonEmptyStack stamp: 'af 4/20/2023 21:49:52'!
OOStack subclass: #OONonEmptyStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/20/2023 21:50:16'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/20/2023 21:50:16'!
PASSED!

Object subclass: #OOStack
	instanceVariableNames: 'colecccion esVacia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'af 4/20/2023 21:51:25'!
Object subclass: #OOStack
	instanceVariableNames: 'colecccion esVacia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:51:42' prior: 50612412 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .
	esVacia  := True.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:52:05' prior: 50612421!
push: anElementToBeAdded
	esVacia := False.
	^colecccion addLast: anElementToBeAdded! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:52:48' prior: 50612515!
pop
	colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	colecccion size = 1 ifTrue: [esVacia := True].
	^colecccion removeLast.! !

s top!

s!

s pop
!

s pop
!

s!

s := OOStack new
!

 s push:6
!

 s push:4
!

s!

s pop
!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/20/2023 21:54:40' prior: 50612417!
isEmpty
^  esVacia.! !

----SNAPSHOT----(20 April 2023 22:06:13) CuisUniversity-5706.image priorSource: 8974175!

Object subclass: #Flag
	instanceVariableNames: 'booleano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Flag category: 'Stack-Exercise' stamp: 'af 4/21/2023 11:09:24'!
Object subclass: #Flag
	instanceVariableNames: 'booleano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Flag methodsFor: 'nil' stamp: 'af 4/21/2023 11:10:55' overrides: 16920235!
initialize
	booleano := True.! !

Flag subclass: #FlagTrue
	instanceVariableNames: 'booleano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Flag subclass: #FlagTrue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #FlagTrue category: 'Stack-Exercise' stamp: 'af 4/21/2023 11:12:16'!
Flag subclass: #FlagTrue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Flag subclass: #FlagFalse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #FlagFalse category: 'Stack-Exercise' stamp: 'af 4/21/2023 11:12:21'!
Flag subclass: #FlagFalse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:13:49' prior: 50612897 overrides: 16920235!
initialize
	"booleano := True."
	FlagTrue initialize.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:14:10' prior: 50612928 overrides: 16920235!
initialize
	"booleano := True."
	^FlagTrue initialize.! !
!FlagTrue methodsFor: 'nil' stamp: 'af 4/21/2023 11:14:44' overrides: 50612934!
initialize
	booleano := True.! !
!FlagTrue methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:15:16' prior: 50612939 overrides: 50612934!
initialize
	"booleano := True."! !
!FlagFalse methodsFor: 'nil' stamp: 'af 4/21/2023 11:15:28' overrides: 50612934!
initialize
	"booleano := True."! !

f := Flag new!

f!

f!

s := OOStack new
!

s!

f := Flag new!

f!
!FlagTrue methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:17:49' prior: 50612944 overrides: 50612934!
initialize
	booleano := True.! !
!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:18:11' prior: 50612948 overrides: 50612934!
initialize
	booleano := False.! !

f := Flag new!

f!

f := Flag new!
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:20:34'!
makeTrue
	"booleano := True."
	^FlagTrue initialize.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:20:47'!
makeFalse
	"booleano := True."
	^FlagFalse initialize.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:22:20' prior: 50612880!
isEmpty
^  self size =0.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/21/2023 11:22:28'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/21/2023 11:22:28'!
PASSED!

Object subclass: #OOStack
	instanceVariableNames: 'colecccion flagStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'af 4/21/2023 11:23:21'!
Object subclass: #OOStack
	instanceVariableNames: 'colecccion flagStack'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:23:33' prior: 50612857 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .
	flagStack  := Flag .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:23:46' prior: 50612869!
pop
	colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	"colecccion size = 1 ifTrue: [esVacia := True]."
	^colecccion removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:23:55' prior: 50612863!
push: anElementToBeAdded
	"esVacia := False."
	^colecccion addLast: anElementToBeAdded! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:26:28' prior: 50613029!
pop
	flagStack TellMeIfIAmEmpty.
	colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	"colecccion size = 1 ifTrue: [esVacia := True]."
	^colecccion removeLast.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:26:54'!
TellMeIfIAmEmpty
	^self subclassResponsibility .! !
!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:27:02' overrides: 50613052!
TellMeIfIAmEmpty! !
!FlagTrue methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:27:09' overrides: 50613052!
TellMeIfIAmEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:28:06'!
popFromEmpty
	flagStack TellMeIfIAmEmpty.
	colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	"colecccion size = 1 ifTrue: [esVacia := True]."
	^colecccion removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:28:11'!
popFromNonEmpty
	flagStack TellMeIfIAmEmpty.
	colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	"colecccion size = 1 ifTrue: [esVacia := True]."
	^colecccion removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:28:30' prior: 50613064!
popFromEmpty
	^self error: OOStack stackEmptyErrorDescription.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:28:46' prior: 50613073!
popFromNonEmpty
	^colecccion removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:29:04' prior: 50613043!
pop
	flagStack TellMeIfIAmEmpty.
	"colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	colecccion size = 1 ifTrue: [esVacia := True].
	^colecccion removeLast."! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:30:10' prior: 50613093!
pop
	flagStack TellMeIfIAmEmpty: self.
	"colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	colecccion size = 1 ifTrue: [esVacia := True].
	^colecccion removeLast."! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:30:23'!
TellMeIfIAmEmpty: stack
	^self subclassResponsibility .! !

!methodRemoval: Flag #TellMeIfIAmEmpty stamp: 'af 4/21/2023 11:30:29'!
TellMeIfIAmEmpty
	^self subclassResponsibility .!
!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:30:38' overrides: 50613111!
TellMeIfIAmEmpty: stack! !

!methodRemoval: FlagFalse #TellMeIfIAmEmpty stamp: 'af 4/21/2023 11:30:42'!
TellMeIfIAmEmpty!
!FlagTrue methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:30:49' overrides: 50613111!
TellMeIfIAmEmpty: stack! !

!methodRemoval: FlagTrue #TellMeIfIAmEmpty stamp: 'af 4/21/2023 11:30:55'!
TellMeIfIAmEmpty!
!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:31:16' prior: 50613120 overrides: 50613111!
TellMeIfIAmEmpty: stack
! !
!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:31:43' prior: 50613135 overrides: 50613111!
TellMeIfIAmEmpty: stack
	^stack popFromNonEmpty! !
!FlagTrue methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:31:58' prior: 50613127 overrides: 50613111!
TellMeIfIAmEmpty: stack
	^stack popFromEmpty ! !

----SNAPSHOT----(21 April 2023 11:32:22) CuisUniversity-5706.image priorSource: 8999446!
!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:34:10' prior: 50613140 overrides: 50613111!
TellMeIfIAmEmpty: stack
	
	^stack popFromNonEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:53:34' prior: 50613037!
push: anElementToBeAdded
	"esVacia := False."
	flagStack := flagStack makeTrue.
	^colecccion addLast: anElementToBeAdded! !

s := OOStack new
!

s pop
!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:54:43' prior: 50613102!
pop
	^flagStack TellMeIfIAmEmpty: self.
	"colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	colecccion size = 1 ifTrue: [esVacia := True].
	^colecccion removeLast."! !

s := OOStack new
!

s pop
!
!FlagTrue methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:55:40' prior: 50613146 overrides: 50613111!
TellMeIfIAmEmpty: stack
	^stack popFromEmpty.! !
!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:55:46' prior: 50613154 overrides: 50613111!
TellMeIfIAmEmpty: stack
	
	^stack popFromNonEmpty.! !

s := OOStack new
!

s!

s!
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:57:03' prior: 50612934 overrides: 16920235!
initialize
	"booleano := True."
	^FlagTrue new.! !

s := OOStack new
!

s!

f := Flag new!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:57:47' prior: 50613023 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .
	flagStack  := FlagTrue .! !

s := OOStack new
!

s!

s pop
!

s pop
!
!FlagTrue class methodsFor: 'response' stamp: 'af 4/21/2023 12:00:01'!
TellMeIfIAmEmpty: anOOStack 
	self shouldBeImplemented.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:00:58' prior: 50613197 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .
	flagStack  := FlagTrue new.! !

!methodRemoval: FlagTrue class #TellMeIfIAmEmpty: stamp: 'af 4/21/2023 12:01:09'!
TellMeIfIAmEmpty: anOOStack 
	self shouldBeImplemented.!

s := OOStack new
!

s!

s pop
!

 s push:6
!

s!

s pop
!

s!

s := OOStack new
!

s!

s pop
!

s!

 s push:4
!

s!
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:02:52' prior: 50612965!
makeTrue
	"booleano := True."
	^FlagTrue new.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:02:56' prior: 50612969!
makeFalse
	"booleano := True."
	^FlagFalse new.! !

s := OOStack new
!

s!

 s push:6
!

s!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:04:02' prior: 50613159!
push: anElementToBeAdded
	"esVacia := False."
	flagStack := flagStack makeFalse.
	^colecccion addLast: anElementToBeAdded! !

s := OOStack new
!

s!

 s push:6
!

s!

s pop
!

s!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:12:20' prior: 50613088!
popFromNonEmpty
	flagStack estoyRemoviendoElementoFijateSiHayQueCambiarFlag: (self size)
	^colecccion removeLast.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:13:13'!
estoyRemoviendoElementoFijateSiHayQueCambiarFlag: tamanioLista
.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:13:18' prior: 50613249!
estoyRemoviendoElementoFijateSiHayQueCambiarFlag: tamanioLista
! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:20:20' prior: 50613243!
popFromNonEmpty
	flagStack := flagStack estoyRemoviendoElementoFijateSiHayQueCambiarFlag: (self size)
	^colecccion removeLast.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:20:50' prior: 50613254!
estoyRemoviendoElementoFijateSiHayQueCambiarFlag: tamanioLista
	tamanioLista = 1
! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:25:50' prior: 50613266!
estoyRemoviendoElementoFijateSiHayQueCambiarFlag: tamanioLista
	tamanioLista = 1 ifTrue: [^ self makeTrue].
! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/21/2023 12:26:07'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/21/2023 12:26:07'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/21/2023 12:26:07'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/21/2023 12:26:07'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/21/2023 12:26:07'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/21/2023 12:26:07'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/21/2023 12:26:07'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/21/2023 12:26:07'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/21/2023 12:26:07'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/21/2023 12:26:07'!
PASSED!

s := OOStack new
!

s!

 s push:6
!

s!

s pop
!

s!

 s push:4
!

s!

 s push:6
!

s!

s pop
!

s!

s top!

s top!

s!

s := OOStack new
!

 s push:4
!

 s push:4
!

s!

s pop
!

s top
!

s := OOStack new
!

s!

 s push:4
!

s!

s pop
!

s!

 s push:4
!

s!

s pop
!

s!

 s push:4
!

s top
!

s!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/21/2023 12:31:23'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/21/2023 12:31:23'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/21/2023 12:31:23'!
ERROR!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/21/2023 12:31:23'!
ERROR!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/21/2023 12:31:23'!
ERROR!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/21/2023 12:31:23'!
ERROR!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/21/2023 12:31:23'!
ERROR!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/21/2023 12:31:23'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/21/2023 12:31:23'!
ERROR!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/21/2023 12:31:23'!
PASSED!

s := OOStack new
!

 s push:6
!

 s size
!

 s push:4
!

 s size
!

s pop
!

 s size
!

s pop
!

 s size
!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:40:40' prior: 50613234!
push: anElementToBeAdded
	"esVacia := False."
	flagStack := flagStack makeFalse.
	colecccion addLast: anElementToBeAdded.
	! !

s := OOStack new
!

 s push:6
!

s top
!

----STARTUP---- (22 April 2023 10:57:26) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!

!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:34:10' prior: 50613140 overrides: 50613111!
TellMeIfIAmEmpty: stack
	
	^stack popFromNonEmpty! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:53:34' prior: 50613037!
push: anElementToBeAdded
	"esVacia := False."
	flagStack := flagStack makeTrue.
	^colecccion addLast: anElementToBeAdded! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:54:43' prior: 50613102!
pop
	^flagStack TellMeIfIAmEmpty: self.
	"colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	colecccion size = 1 ifTrue: [esVacia := True].
	^colecccion removeLast."! !
!FlagTrue methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:55:40' prior: 50613146 overrides: 50613111!
TellMeIfIAmEmpty: stack
	^stack popFromEmpty.! !
!FlagFalse methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:55:46' prior: 50613369 overrides: 50613111!
TellMeIfIAmEmpty: stack
	
	^stack popFromNonEmpty.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:57:03' prior: 50612934 overrides: 16920235!
initialize
	"booleano := True."
	^FlagTrue new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 11:57:47' prior: 50613023 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .
	flagStack  := FlagTrue .! !
!FlagTrue class methodsFor: 'response' stamp: 'af 4/21/2023 12:00:01'!
TellMeIfIAmEmpty: anOOStack 
	self shouldBeImplemented.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:00:58' prior: 50613409 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .
	flagStack  := FlagTrue new.! !

!methodRemoval: FlagTrue class #TellMeIfIAmEmpty: stamp: 'af 4/22/2023 10:57:29'!
TellMeIfIAmEmpty: anOOStack 
	self shouldBeImplemented.!
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:02:52' prior: 50612965!
makeTrue
	"booleano := True."
	^FlagTrue new.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:02:56' prior: 50612969!
makeFalse
	"booleano := True."
	^FlagFalse new.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:04:02' prior: 50613374!
push: anElementToBeAdded
	"esVacia := False."
	flagStack := flagStack makeFalse.
	^colecccion addLast: anElementToBeAdded! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:12:20' prior: 50613088!
popFromNonEmpty
	flagStack estoyRemoviendoElementoFijateSiHayQueCambiarFlag: (self size)
	^colecccion removeLast.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:13:13'!
estoyRemoviendoElementoFijateSiHayQueCambiarFlag: tamanioLista
.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:13:18' prior: 50613453!
estoyRemoviendoElementoFijateSiHayQueCambiarFlag: tamanioLista
! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:20:20' prior: 50613447!
popFromNonEmpty
	flagStack := flagStack estoyRemoviendoElementoFijateSiHayQueCambiarFlag: (self size)
	^colecccion removeLast.! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:20:50' prior: 50613458!
estoyRemoviendoElementoFijateSiHayQueCambiarFlag: tamanioLista
	tamanioLista = 1
! !
!Flag methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:25:50' prior: 50613470!
estoyRemoviendoElementoFijateSiHayQueCambiarFlag: tamanioLista
	tamanioLista = 1 ifTrue: [^ self makeTrue].
! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/21/2023 12:40:40' prior: 50613440!
push: anElementToBeAdded
	"esVacia := False."
	flagStack := flagStack makeFalse.
	colecccion addLast: anElementToBeAdded.
	! !

Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Numero category: 'Stack-Exercise' stamp: 'af 4/22/2023 10:58:01'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Entero category: 'Stack-Exercise' stamp: 'af 4/22/2023 10:58:21'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Cero category: 'Stack-Exercise' stamp: 'af 4/22/2023 10:58:45'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EnteroNegativo category: 'Stack-Exercise' stamp: 'af 4/22/2023 10:58:54'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EnteroPositivo category: 'Stack-Exercise' stamp: 'af 4/22/2023 10:59:04'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Fraccion category: 'Stack-Exercise' stamp: 'af 4/22/2023 10:59:12'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #Uno category: 'Stack-Exercise' stamp: 'af 4/22/2023 11:00:01'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

Entero subclass: #EnteroPositivoMayorA1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #EnteroPositivoMayorA1 category: 'Stack-Exercise' stamp: 'af 4/22/2023 11:00:09'!
Entero subclass: #EnteroPositivoMayorA1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!EnteroPositivoMayorA1 methodsFor: 'nil' stamp: 'af 4/22/2023 11:00:39' overrides: 50611381!
fibonacci
	| one two |
	one := Entero with: 1.
	two := Entero with: 2.
	^ (self - one) fibonacci + (self - two) fibonacci.
		! !
!Uno methodsFor: 'nil' stamp: 'af 4/22/2023 11:00:58' overrides: 50611381!
fibonacci
	^self.
	
		! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:01:53'!
popFromNonEmptyLast
	flagStack := flagStack estoyRemoviendoElementoFijateSiHayQueCambiarFlag: (self size)
	^colecccion removeLast.! !

!methodRemoval: OOStack #popFromNonEmptyLast stamp: 'af 4/22/2023 11:02:00'!
popFromNonEmptyLast
	flagStack := flagStack estoyRemoviendoElementoFijateSiHayQueCambiarFlag: (self size)
	^colecccion removeLast.!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:02:23' prior: 50613420 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .
	"flagStack  := FlagTrue new."! !

!classRemoval: #FlagTrue stamp: 'af 4/22/2023 11:02:32'!
Flag subclass: #FlagTrue
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #FlagFalse stamp: 'af 4/22/2023 11:02:32'!
Flag subclass: #FlagFalse
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Flag stamp: 'af 4/22/2023 11:02:32'!
Object subclass: #Flag
	instanceVariableNames: 'booleano'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!Entero class methodsFor: 'instance creation' stamp: 'af 4/22/2023 11:03:32' prior: 50611615!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	aValue<0 ifTrue: [^EnteroNegativo new initalizeWith: aValue].
	aValue>1 ifTrue: [^Uno new initalizeWith: aValue].
	aValue=0 ifTrue: [^Cero new initalizeWith: aValue].! !
!Entero class methodsFor: 'instance creation' stamp: 'af 4/22/2023 11:03:38' prior: 50613630!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	aValue<0 ifTrue: [^EnteroNegativo new initalizeWith: aValue].
	aValue=1 ifTrue: [^Uno new initalizeWith: aValue].
	aValue=0 ifTrue: [^Cero new initalizeWith: aValue].! !
!Entero class methodsFor: 'instance creation' stamp: 'af 4/22/2023 11:04:06' prior: 50613645!
with: aValue 
	
	"Esta verificacion esta puesta por si se equivocan y quieren crear un Entero pasando otra cosa que un Integer - Hernan"
	aValue isInteger ifFalse: [  self error: 'aValue debe ser anInteger' ].
	aValue<0 ifTrue: [^EnteroNegativo new initalizeWith: aValue].
	aValue>1 ifTrue: [^EnteroPositivoMayorA1 new initalizeWith: aValue].
	aValue=1 ifTrue: [^Uno new initalizeWith: aValue].
	aValue=0 ifTrue: [^Cero new initalizeWith: aValue].! !

Object subclass: #OOStack
	instanceVariableNames: 'colecccion tamanioEntero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #OOStack category: 'Stack-Exercise' stamp: 'af 4/22/2023 11:04:58'!
Object subclass: #OOStack
	instanceVariableNames: 'colecccion tamanioEntero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:05:28' prior: 50613606 overrides: 16920235!
initialize
	colecccion := OrderedCollection new .
	tamanioEntero  := Entero with: 0.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:06:57' prior: 50613483!
push: anElementToBeAdded
	| uno |
	uno := Entero with: 1.
	tamanioEntero := tamanioEntero + uno
	"esVacia := False."
	colecccion addLast: anElementToBeAdded.
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:07:41' prior: 50613696!
push: anElementToBeAdded
	| uno |
	uno := Entero with: 1.
	tamanioEntero := tamanioEntero + uno.
	colecccion addLast: anElementToBeAdded.
	! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:09:35' prior: 50613381!
pop
	^tamanioEntero TellMeIfIAmEmpty: self.
	"colecccion isEmpty ifTrue: [^self error: OOStack stackEmptyErrorDescription ].
	colecccion size = 1 ifTrue: [esVacia := True].
	^colecccion removeLast."! !
!Entero methodsFor: 'arithmetic operations' stamp: 'af 4/22/2023 11:10:12'!
TellMeIfIAmEmpty: unOOstack
	^self subclassResponsibility .! !
!Cero methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:11:11' overrides: 50613721!
TellMeIfIAmEmpty: unOOstack
	^unOOstack popFromEmpty .! !
!Uno methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:12:04' overrides: 50613721!
TellMeIfIAmEmpty: unOOstack
	^unOOstack popFromNonEmpty .! !
!EnteroPositivoMayorA1 methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:12:12' overrides: 50613721!
TellMeIfIAmEmpty: unOOstack
	^unOOstack popFromNonEmpty .! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:13:08' prior: 50613463!
popFromNonEmpty
	^colecccion removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:13:40' prior: 50613083!
popFromEmpty
	| uno |
	uno := Entero with: 1.
	tamanioEntero := tamanioEntero - uno.
	^self error: OOStack stackEmptyErrorDescription.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:13:52' prior: 50613742!
popFromNonEmpty
	| uno |
	uno := Entero with: 1.
	tamanioEntero := tamanioEntero - uno.
	^colecccion removeLast.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:14:47'!
restarUno 
	| uno |
	uno := Entero with: 1.
	tamanioEntero := tamanioEntero - uno.
! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:15:11'!
restarUnoTamanioStack
	| uno |
	uno := Entero with: 1.
	tamanioEntero := tamanioEntero - uno.
! !

!methodRemoval: OOStack #restarUno stamp: 'af 4/22/2023 11:15:17'!
restarUno 
	| uno |
	uno := Entero with: 1.
	tamanioEntero := tamanioEntero - uno.
!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:15:40' prior: 50613747!
popFromEmpty
	self restarUnoTamanioStack.
	^self error: OOStack stackEmptyErrorDescription.! !
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:15:48' prior: 50613755!
popFromNonEmpty
	self restarUnoTamanioStack.

	^colecccion removeLast.! !

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 4/22/2023 11:16:02'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 4/22/2023 11:16:02'!
PASSED!
!OOStack methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:16:26' prior: 50613712!
pop
	^tamanioEntero TellMeIfIAmEmpty: self.! !

s := OOStack new
!

s!

s push:6!

s push:4!

s push:6!

s top!

s top!

s!

s pop!

s pop!

s!

s pop
!

s!

s pop
!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:26:30'!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:27:10'!
test01SentenceFinderPrefixIsNotEmpty

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty! !

!methodRemoval: SentenceFinderByPrefixTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 4/22/2023 11:27:15'!
test01StackShouldBeEmptyWhenCreated

	| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty!

Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classDefinition: #SentenceFinderByPrefix category: 'Stack-Exercise' stamp: 'af 4/22/2023 11:27:51'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!
!SentenceFinderByPrefix class methodsFor: 'nil' stamp: 'af 4/22/2023 11:30:51'!
prefixEmptyErrorDescription
	
	^ 'prefix is empty!!!!!!'! !
!SentenceFinderByPrefix class methodsFor: 'as yet unclassified' stamp: 'af 4/22/2023 11:31:30'!
prefixContainsSpacesErrorDescription
	
	^ 'a prefix should not contain spaces in between words!!!!!!'! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:33:35' prior: 50613836!
test01SentenceFinderPrefixIsNotEmpty

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:36:00'!
test01CanNotFindWhenPrefixIsEmpty

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !

!methodRemoval: SentenceFinderByPrefixTest #test01SentenceFinderPrefixIsNotEmpty stamp: 'af 4/22/2023 11:36:05'!
test01SentenceFinderPrefixIsNotEmpty

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:36:25'!
test02CanNotFindWhenPrefixContainsSpaces

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:38:07'!
test03FinderReturnsEmptyCollectionIfStackIsEmpty

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefix methodsFor: 'no messages' stamp: 'af 4/22/2023 11:40:45'!
selectAllElementsFromStack: aOOstack whichHavePrefix: aPrefix
! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:41:16'!
test01CanNotSelectFromStackWhenPrefixIsEmpty

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !

!methodRemoval: SentenceFinderByPrefixTest #test01CanNotFindWhenPrefixIsEmpty stamp: 'af 4/22/2023 11:41:21'!
test01CanNotFindWhenPrefixIsEmpty

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:41:35'!
test02CanNotSelectFromStackWhenPrefixContainsSpaces

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !

!methodRemoval: SentenceFinderByPrefixTest #test02CanNotFindWhenPrefixContainsSpaces stamp: 'af 4/22/2023 11:41:40'!
test02CanNotFindWhenPrefixContainsSpaces

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:45:18'!
test04FinderCanSelectFirstElementFromStack

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:45:31'!
test05FinderCanSelectLastElementFromStack

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !

----SNAPSHOT----(22 April 2023 11:47:33) CuisUniversity-5706.image priorSource: 9007984!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 11:48:34'!
test06FinderAfterSelectingHoldsStackIntactInSameOrder

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !

s := OOStack new
!

s1 := OOStack new
!

s = s1
!

s = s1
!

s == s1
!

s = s1
!

s1!

s!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:02:34'!
test07FinderDoesNotSelectLowerCaseWhenPrefixIsInUpperCase

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:02:48'!
test07FinderDoesNotSelectUpperCaseWhenPrefixIsInLowerCase

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:02:52'!
test08FinderDoesNotSelectUpperCaseWhenPrefixIsInLowerCase

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !

!methodRemoval: SentenceFinderByPrefixTest #test07FinderDoesNotSelectUpperCaseWhenPrefixIsInLowerCase stamp: 'af 4/22/2023 12:02:58'!
test07FinderDoesNotSelectUpperCaseWhenPrefixIsInLowerCase

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"!
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:04:05'!
test09FinderDoesNotSelectSentenceWhenPrefixIsInTheMiddleOfTheSentence

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:08:03'!
test10FinderCanSelectAllFromStack

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:08:20'!
test11FinderCanSelectNoneFromStack

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:08:59'!
test12FinderCanSelectMultipleFromStack

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:46:21'!
test12FinderCanSelectFromStackASentenceEqualToPrefix

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !
!SentenceFinderByPrefixTest methodsFor: 'test' stamp: 'af 4/22/2023 12:46:27'!
test13FinderCanSelectFromStackASentenceEqualToPrefix

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"! !

!methodRemoval: SentenceFinderByPrefixTest #test12FinderCanSelectFromStackASentenceEqualToPrefix stamp: 'af 4/22/2023 12:46:31'!
test12FinderCanSelectFromStackASentenceEqualToPrefix

	"| stack |
	
	stack := OOStack new.
	
	self assert: stack isEmpty"!

----SNAPSHOT----(22 April 2023 12:46:54) CuisUniversity-5706.image priorSource: 9033617!

----SNAPSHOT----(22 April 2023 13:36:37) CuisUniversity-5706.image priorSource: 9036441!

----STARTUP---- (24 April 2023 17:14:21) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


Object subclass: #ss
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

Object subclass: #Ss
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

!classDefinition: #Ss category: 'Feriado-Exercise' stamp: 'af 4/24/2023 18:03:32'!
Object subclass: #Ss
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

Object subclass: #TestX
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

!classDefinition: #TestX category: 'Feriado-Exercise' stamp: 'af 4/24/2023 18:04:36'!
Object subclass: #TestX
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!
!TestX methodsFor: 'nil' stamp: 'af 4/24/2023 18:04:46'!
test01! !

!classRemoval: #Ss stamp: 'af 4/24/2023 18:04:55'!
Object subclass: #Ss
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!
!TestX methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:05:30' prior: 50614077!
test01

self assert ! !

!classDefinition: #HolidayCalendar category: 'Feriado-Exercise' stamp: 'af 4/24/2023 18:07:52'!
Object subclass: #HolidayCalendar
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!
!TestX methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:08:05' prior: 50614087!
test01
	| aSunday holidayCalendar |
	holidayCalendar := HolidayCalendar new.
	aSunday := April/23/2023.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !

TestCase subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

!classDefinition: #NameOfSubclass category: 'Feriado-Exercise' stamp: 'af 4/24/2023 18:08:46'!
TestCase subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

TestCase subclass: #TestXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

!classDefinition: #TestXX category: 'Feriado-Exercise' stamp: 'af 4/24/2023 18:09:12'!
TestCase subclass: #TestXX
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!
!TestXX methodsFor: 'nil' stamp: 'af 4/24/2023 18:09:18'!
test01
	| aSunday holidayCalendar |
	holidayCalendar := HolidayCalendar new.
	aSunday := April/23/2023.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:09:25'!
ERROR!

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:09:25'!
ERROR!

!classRemoval: #NameOfSubclass stamp: 'af 4/24/2023 18:10:00'!
TestCase subclass: #NameOfSubclass
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

!classRemoval: #TestX stamp: 'af 4/24/2023 18:10:12'!
Object subclass: #TestX
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Feriado-Exercise'!

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:10:18'!
ERROR!

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:10:18'!
ERROR!
!HolidayCalendar methodsFor: 'nil' stamp: 'af 4/24/2023 18:10:49'!
isHoliday: aDate
^false.! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:10:53'!
FAILURE!

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:10:53'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:11:29' prior: 50614156!
isHoliday: aSundat
^true.! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:11:39'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:11:55' prior: 50614128!
test01
	| aSunday holidayCalendar |
	holidayCalendar := HolidayCalendar new.
	aSunday := April/23/2023.
	
	self reject: (holidayCalendar isHoliday: aSunday).! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:12:01'!
ERROR!

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:12:01'!
ERROR!
!TestXX methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:12:09' prior: 50614171!
test01
	| aSunday holidayCalendar |
	holidayCalendar := HolidayCalendar new.
	aSunday := April/23/2023.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:12:12'!
PASSED!

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:12:12'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:12:18' prior: 50614183!
test01
	| aSunday holidayCalendar |
	holidayCalendar := HolidayCalendar new.
	aSunday := April/23/2023.
	
	self deny: (holidayCalendar isHoliday: aSunday).! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:12:20'!
FAILURE!
!TestXX methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:12:29' prior: 50614196!
test01
	| aSunday holidayCalendar |
	holidayCalendar := HolidayCalendar new.
	aSunday := April/23/2023.
	
	self assert: (holidayCalendar isHoliday: aSunday).! !
!TestXX methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:16:25'!
test02
	| aMonday holidayCalendar |
	holidayCalendar := HolidayCalendar new.
	aMonday := April/24/2023.
	
	self deny: (holidayCalendar isHoliday: aMonday).! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:16:41'!
PASSED!

!testRun: #TestXX #test02 stamp: 'af 4/24/2023 18:16:41'!
FAILURE!

!testRun: #TestXX #test02 stamp: 'af 4/24/2023 18:16:41'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:17:30' prior: 50614165!
isHoliday: aSunday
^aSunday day = Sunday.! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:17:33'!
PASSED!

!testRun: #TestXX #test02 stamp: 'af 4/24/2023 18:17:33'!
PASSED!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:20:50' prior: 50614229!
isHoliday: aPotentialHoliday
^aPotentialHoliday day = Sunday.! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:20:55'!
PASSED!

!testRun: #TestXX #test02 stamp: 'af 4/24/2023 18:20:55'!
PASSED!
!TestXX methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:22:03'!
test03
	| aSaturday holidayCalendar |
	holidayCalendar := HolidayCalendar new.
	aSaturday := April/22/2023.
	
	self assert: (holidayCalendar isHoliday: aSaturday).! !

!testRun: #TestXX #test03 stamp: 'af 4/24/2023 18:22:07'!
FAILURE!

!testRun: #TestXX #test03 stamp: 'af 4/24/2023 18:22:07'!
FAILURE!
!HolidayCalendar methodsFor: 'as yet unclassified' stamp: 'af 4/24/2023 18:22:46' prior: 50614238!
isHoliday: aPotentialHoliday
^aPotentialHoliday day = Sunday or: [aPotentialHoliday day = Saturday .].! !

!testRun: #TestXX #test01 stamp: 'af 4/24/2023 18:22:51'!
PASSED!

!testRun: #TestXX #test02 stamp: 'af 4/24/2023 18:22:51'!
PASSED!

!testRun: #TestXX #test03 stamp: 'af 4/24/2023 18:22:51'!
PASSED!

!classRemoval: #SentenceFinderByPrefix stamp: 'af 4/27/2023 17:28:29'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: 'anOOstack prefix'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'af 4/27/2023 17:28:29'!
Object subclass: #OOStack
	instanceVariableNames: 'colecccion tamanioEntero'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Fraccion stamp: 'af 4/27/2023 17:28:29'!
Numero subclass: #Fraccion
	instanceVariableNames: 'numerator denominator'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Uno stamp: 'af 4/27/2023 17:28:29'!
Entero subclass: #Uno
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EnteroPositivoMayorA1 stamp: 'af 4/27/2023 17:28:29'!
Entero subclass: #EnteroPositivoMayorA1
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EnteroPositivo stamp: 'af 4/27/2023 17:28:30'!
Entero subclass: #EnteroPositivo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #EnteroNegativo stamp: 'af 4/27/2023 17:28:30'!
Entero subclass: #EnteroNegativo
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Cero stamp: 'af 4/27/2023 17:28:30'!
Entero subclass: #Cero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Entero stamp: 'af 4/27/2023 17:28:30'!
Numero subclass: #Entero
	instanceVariableNames: 'value'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #Numero stamp: 'af 4/27/2023 17:28:30'!
Object subclass: #Numero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'af 4/27/2023 17:28:30'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'af 4/27/2023 17:28:30'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\fridm\Downloads\2023-1c-main\2023-1c-main\03-Stack\Stack-Exercise.st----!

----End fileIn of C:\Users\fridm\Downloads\2023-1c-main\2023-1c-main\04-BabySteps\TDDBabyStepsGame.st----!

!classRemoval: #SentenceFinderByPrefix stamp: 'af 4/27/2023 17:30:36'!
Object subclass: #SentenceFinderByPrefix
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStack stamp: 'af 4/27/2023 17:30:36'!
Object subclass: #OOStack
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #SentenceFinderByPrefixTest stamp: 'af 4/27/2023 17:30:37'!
TestCase subclass: #SentenceFinderByPrefixTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

!classRemoval: #OOStackTest stamp: 'af 4/27/2023 17:30:37'!
TestCase subclass: #OOStackTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Stack-Exercise'!

----End fileIn of C:\Users\fridm\Downloads\2023-1c-main\2023-1c-main\03-Stack\Solucion\Stack-Solution-1.st----!

TDDBabyStepsGameContador start!

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'af 4/27/2023 17:57:12'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'af 4/27/2023 17:57:23'!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
		
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

TDDBabyStepsGameContador start !

!classDefinition: #TDDBabyStepsContadorTest category: 'TDDBabyStepsGameContador' stamp: 'af 4/27/2023 17:57:38'!
TestCase subclass: #TDDBabyStepsContadorTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'af 4/27/2023 17:58:18' prior: 50616623!
test01UnNuevoContadorEmpiezaConValorCero

	| contador |
		
	contador := Contador new.
	self assert: 0 equals: contador valor.
	! !

TestCase subclass: #TDDBabyStepsContador
	instanceVariableNames: 'numeroColaborador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #TDDBabyStepsContador category: 'TDDBabyStepsGameContador' stamp: 'af 4/27/2023 17:59:17'!
TestCase subclass: #TDDBabyStepsContador
	instanceVariableNames: 'numeroColaborador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

Object subclass: #Contador
	instanceVariableNames: 'numeroColaborador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classDefinition: #Contador category: 'TDDBabyStepsGameContador' stamp: 'af 4/27/2023 18:00:38'!
Object subclass: #Contador
	instanceVariableNames: 'numeroColaborador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!

!classRemoval: #TDDBabyStepsContador stamp: 'af 4/27/2023 18:00:43'!
TestCase subclass: #TDDBabyStepsContador
	instanceVariableNames: 'numeroColaborador'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameContador'!
!Contador methodsFor: 'nil' stamp: 'af 4/27/2023 18:01:06'!
valor
	^0.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:01:12'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:02:51'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'af 4/27/2023 18:02:51'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:02:51'!
ERROR!

!methodRemoval: TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:02:51'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'af 4/27/2023 18:02:51'!
test02AlIncrementarUnaVezElContadorSuValorSubeUno

	| contador |

	contador := Contador new.
	contador incrementar.
	self assert: 1 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:02:51'!
ERROR!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:03:40'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:03:40'!
ERROR!
!Contador methodsFor: 'as yet unclassified' stamp: 'af 4/27/2023 18:04:52'!
incrementar
	^numeroColaborador  = 1.! !
!Contador methodsFor: 'as yet unclassified' stamp: 'af 4/27/2023 18:04:59' prior: 50616681!
valor
	^numeroColaborador .! !
!Contador methodsFor: 'as yet unclassified' stamp: 'af 4/27/2023 18:05:14' prior: 50616733!
incrementar
	numeroColaborador  := 1.! !
!Contador methodsFor: 'as yet unclassified' stamp: 'af 4/27/2023 18:06:31' overrides: 16920235!
initialize
	numeroColaborador := 0 .! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:06:35'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:06:35'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:06:56'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:06:56'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'af 4/27/2023 18:06:56'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:06:56'!
FAILURE!

!methodRemoval: TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:06:56'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'af 4/27/2023 18:06:56'!
test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces

	| contador |

	contador := Contador new.
	contador incrementar.
	contador incrementar.
	contador incrementar.
	self assert: 3 equals: contador valor.
	! !

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:06:57'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:08:33'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:08:33'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:08:39'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:08:39'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:08:39'!
FAILURE!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:08:39'!
FAILURE!
!Contador methodsFor: 'as yet unclassified' stamp: 'af 4/27/2023 18:08:58' prior: 50616742!
incrementar
	numeroColaborador  := numeroColaborador + 1.! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:09:03'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:09:03'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:09:03'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:09:07'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:09:07'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:09:07'!
PASSED!
!TDDBabyStepsContadorTest methodsFor: 'tests' stamp: 'af 4/27/2023 18:09:07'!
extraTest
	
	self assert: true.
	! !

!testRun: #TDDBabyStepsContadorTest #test01UnNuevoContadorEmpiezaConValorCero stamp: 'af 4/27/2023 18:09:07'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test02AlIncrementarUnaVezElContadorSuValorSubeUno stamp: 'af 4/27/2023 18:09:07'!
PASSED!

!testRun: #TDDBabyStepsContadorTest #test03SePuedeIncrementarVariasVecesElContadorYSuValorIncrementaEnUnoEsaCantidadDeVeces stamp: 'af 4/27/2023 18:09:07'!
PASSED!

TDDBabyStepsGameRot13 start!

!classDefinition: #TDDBabyStepsRot13Test category: 'TDDBabyStepsGameRot13' stamp: 'af 4/27/2023 18:12:03'!
TestCase subclass: #TDDBabyStepsRot13Test
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameRot13'!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:16:49'!
test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $n equals: $a asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:18:34'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:18:34'!
ERROR!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:19:05'!
asRot13
	self shouldBeImplemented.! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:19:31' prior: 50616912!
asRot13
	^'n'.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:19:36'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:19:36'!
FAILURE!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:20:08' prior: 50616916!
asRot13
	^$n.! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:20:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:20:36'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:20:36'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:20:36'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:20:36'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:20:36'!
test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $z equals: $m asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:20:36'!
FAILURE!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:24:24' prior: 50616929!
asRot13
	self value = $a ifTrue: [^$n]. ! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:24:30'!
PASSED!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:25:22' prior: 50616970!
asRot13
	self value = $a ifTrue: [^$n]  ifFalse: [^$z] .
! !

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:25:26'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:25:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:25:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:25:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:25:56'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:25:56'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:25:56'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:25:56'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:25:56'!
test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $a equals: $n asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:25:56'!
FAILURE!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:27:43' prior: 50616979!
asRot13
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
! !

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:47'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:56'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:56'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:27:56'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:56'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:56'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:27:56'!
test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $m equals: $z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:27:56'!
FAILURE!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:29:08' prior: 50617035!
asRot13
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
self value = $z ifTrue: [^$m].! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:29:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:29:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:29:12'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:29:12'!
PASSED!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:30:05' prior: 50617101!
asRot13
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m].! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:37:08' prior: 50617126!
asRot13
	| valorAscii |
	valorAscii := self .
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m].! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:37:25' prior: 50617134!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m].! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:38:56' prior: 50617143!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	
	self class asciiValue: valorAscii + 13.
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m].! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:39:05'!
asRot13First13
	| valorAscii |
	valorAscii := self asciiValue .
	
	self class asciiValue: valorAscii + 13.
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m].! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:39:13'!
asRot13Last13
	| valorAscii |
	valorAscii := self asciiValue .
	
	self class asciiValue: valorAscii + 13.
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m].! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:39:19' prior: 50617172!
asRot13Last13
	| valorAscii |
	valorAscii := self asciiValue .
	
	self class asciiValue: valorAscii - 13.
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m].! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:40:02' prior: 50617183!
asRot13Last13
	| valorAscii |
	valorAscii := self asciiValue .
	
	^self class asciiValue: valorAscii - 13.
	"self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:40:14' prior: 50617162!
asRot13First13
	| valorAscii |
	valorAscii := self asciiValue .
	
	^self class asciiValue: valorAscii + 13.
	"self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !

Character class asciiValue: 10!

Character asciiValue: 10!

Character asciiValue: 56!

Character asciiValue: 100!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:42:00'!
asRot13First13: valorAscii
	^self class asciiValue: valorAscii + 13.
	"self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !

!methodRemoval: Character #asRot13Last13 stamp: 'af 4/27/2023 18:42:07'!
asRot13Last13
	| valorAscii |
	valorAscii := self asciiValue .
	
	^self class asciiValue: valorAscii - 13.
	"self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:42:38'!
asRot13Last13: valorAscii
	^self class asciiValue: valorAscii -  13.
	"self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !

!methodRemoval: Character #asRot13First13 stamp: 'af 4/27/2023 18:42:43'!
asRot13First13
	| valorAscii |
	valorAscii := self asciiValue .
	
	^self class asciiValue: valorAscii + 13.
	"self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:43:03' prior: 50617152!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	
	"self class asciiValue: valorAscii + 13.
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:45:00' prior: 50617258!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	valorAscii < $o ifTrue: [^$a]  ifFalse: []
	"self class asciiValue: valorAscii + 13.
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:46:10' prior: 50617269!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	valorAscii < $o ifTrue: [^self asRot13First13: valorAscii.]  ifFalse: [^self asRot13Last13: valorAscii.].
	"self class asciiValue: valorAscii + 13.
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:46:15'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:46:15'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:46:15'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:46:15'!
ERROR!

$a asRot13 !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:47:35' prior: 50617281!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	valorAscii < ($o asciiValue) ifTrue: [^self asRot13First13: valorAscii.]  ifFalse: [^self asRot13Last13: valorAscii.].
	"self class asciiValue: valorAscii + 13.
	self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:47:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:47:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:47:45'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:47:45'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:47:45'!
FAILURE!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:48:36' prior: 50617219!
asRot13First13: valorAscii
	^Character asciiValue: valorAscii + 13.
	"self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:48:45' prior: 50617238!
asRot13Last13: valorAscii
	^Character asciiValue: valorAscii -  13.
	"self value = $a ifTrue: [^$n] .
	self value = $m ifTrue: [^$z].
	self value = $n ifTrue: [^$a]  .
	self value = $z ifTrue: [^$m]."! !

$a asRot13 !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:48:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:48:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:48:58'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:48:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:48:58'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:49:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:49:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:49:17'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:49:17'!
FAILURE!

$n asRot13 !

$m asRot13!

$o asRot13!

$p asRot13!

$m asRot13!

$n asRot13!

$n asRot13!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:51:22' prior: 50617360!
asRot13Last13: valorAscii
	^Character asciiValue: valorAscii -  13.
! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:51:26' prior: 50617350!
asRot13First13: valorAscii
	^Character asciiValue: valorAscii + 13.
! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:51:30' prior: 50617313!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	valorAscii < ($o asciiValue) ifTrue: [^self asRot13First13: valorAscii.]  ifFalse: [^self asRot13Last13: valorAscii.].
	! !

$a asRot13!

$b asRot13!

$c asRot13!

$p asRot13!

$z asRot13!

$n asRot13!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:53:07' prior: 50617425!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	valorAscii <= ($m asciiValue) ifTrue: [^self asRot13First13: valorAscii.]  ifFalse: [^self asRot13Last13: valorAscii.].
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:53:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:53:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:53:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:53:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:53:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:53:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:53:33'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:53:33'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:53:33'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 18:53:33'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 18:53:33'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 18:53:34'!
test05CharOnTheBelowRangeDoesntChange
	
	self assert: $` equals: $` asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 18:53:34'!
FAILURE!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:55:40' prior: 50617436!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	((valorAscii < ($a asciiValue)) or: ([valorAscii > ($z asciiValue)])) ifTrue: [^self.].
	valorAscii <= ($m asciiValue) ifTrue: [^self asRot13First13: valorAscii.]  ifFalse: [^self asRot13Last13: valorAscii.].
	! !

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 18:55:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:55:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 18:55:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:55:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 18:55:53'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 18:55:53'!
PASSED!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:58:01'!
characterInRangeOfEncryption
	| valorAscii |
	valorAscii := self asciiValue .
	((valorAscii < ($a asciiValue)) or: ([valorAscii > ($z asciiValue)])) ifTrue: [^False.] ifFalse: [^True].
	
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:58:30' prior: 50617504!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	(self characterInRangeOfEncryption ) ifTrue: [^self.].
	valorAscii <= ($m asciiValue) ifTrue: [^self asRot13First13: valorAscii.]  ifFalse: [^self asRot13Last13: valorAscii.].
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:58:50'!
characterNotInRangeOfEncryption
	| valorAscii |
	valorAscii := self asciiValue .
	((valorAscii < ($a asciiValue)) or: ([valorAscii > ($z asciiValue)])) ifTrue: [^False.] ifFalse: [^True].
	
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 18:59:13' prior: 50617559!
characterNotInRangeOfEncryption
	^ self characterInRangeOfEncryption not.
	
	! !

True not!

not True!

True negated!

True not!

True not!

True!

true not!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:01:07' prior: 50617540!
characterInRangeOfEncryption
	| valorAscii |
	valorAscii := self asciiValue .
	((valorAscii < ($a asciiValue)) or: ([valorAscii > ($z asciiValue)])) ifTrue: [^false.] ifFalse: [^true].
	
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:01:24' prior: 50617549!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	valorAscii <= ($m asciiValue) ifTrue: [^self asRot13First13: valorAscii.]  ifFalse: [^self asRot13Last13: valorAscii.].
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:02:26' prior: 50617568!
characterNotInRangeOfEncryption
	| valorAscii |
	valorAscii := self asciiValue .
	^((valorAscii < ($a asciiValue)) or: ([valorAscii > ($z asciiValue)])).
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:02:39' prior: 50617576!
characterInRangeOfEncryption
	self characterNotInRangeOfEncryption not.
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:03:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:25'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:03:25'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:03:25'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:03:25'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:03:25'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:03:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:03:42'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:03:42'!
test06CharOnTheUpperRangeDoesntChange
	
	self assert: ${ equals: ${ asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:03:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:04:01'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:04:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:04:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:04:13'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:04:13'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:04:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:13'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:04:13'!
test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet
	
	self assert: $N equals: $A asRot13.
	self assert: $Z equals: $M asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:04:13'!
FAILURE!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:04:55'!
characterNotInRangeOfLowerCaseEncryption
	| valorAscii |
	valorAscii := self asciiValue .
	^((valorAscii < ($a asciiValue)) or: ([valorAscii > ($z asciiValue)])).
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:06:06'!
characterInRangeOfLowerCaseEncryption
	self characterNotInRangeOfLowerCaseEncryption not.
	
	! !

!methodRemoval: Character #characterNotInRangeOfEncryption stamp: 'af 4/27/2023 19:06:14'!
characterNotInRangeOfEncryption
	| valorAscii |
	valorAscii := self asciiValue .
	^((valorAscii < ($a asciiValue)) or: ([valorAscii > ($z asciiValue)])).
	!

!methodRemoval: Character #characterInRangeOfEncryption stamp: 'af 4/27/2023 19:06:18'!
characterInRangeOfEncryption
	self characterNotInRangeOfEncryption not.
	
	!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:07:47'!
characterNotInRangeOfEncryption
	^self characterNotInRangeOfLowerCaseEncryption  and: [^self characterNotInRangeOfUpperCaseEncryption .].
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:08:25'!
characterNotInRangeOfUpperCaseEncryption
	| valorAscii |
	valorAscii := self asciiValue .
	^((valorAscii < ($A asciiValue)) or: ([valorAscii > ($Z asciiValue)])).
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:09:00'!
characterInRangeOfUpperCaseEncryption
	self characterNotInRangeOfUpperCaseEncryption not.
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:09:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:09:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:09:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:09:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:09:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:09:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:09:42'!
PASSED!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:11:10' prior: 50617585!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	(self) ifTrue: [^self asRot13First13: valorAscii.].
	(self) ifTrue: [^self asRot13Last13: valorAscii.].
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:13:54' prior: 50617860!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	(valorAscii <= ($m asciiValue)) ifTrue: [^self asRot13First13: valorAscii.].
	(self) ifTrue: [^self asRot13Last13: valorAscii.].
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:14:36'!
asRot13Lower
	| valorAscii |
	valorAscii := self asciiValue .
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	(valorAscii <= ($m asciiValue)) ifTrue: [^self asRot13First13: valorAscii.].
	(self) ifTrue: [^self asRot13Last13: valorAscii.].
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:15:19' prior: 50617881!
asRot13Lower
	| valorAscii |
	valorAscii := self asciiValue .
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	(valorAscii <= ($m asciiValue)) ifTrue: [^self asRot13First13: valorAscii.] ifFalse: [^self asRot13Last13: valorAscii.]
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:15:32'!
asRot13Upper
	| valorAscii |
	valorAscii := self asciiValue .
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	(valorAscii <= ($M asciiValue)) ifTrue: [^self asRot13First13: valorAscii.] ifFalse: [^self asRot13Last13: valorAscii.]
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:16:59' prior: 50617870!
asRot13
	| valorAscii |
	valorAscii := self asciiValue .
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	(self characterInRangeOfLowerCaseEncryption) ifTrue: [^self asRot13Lower ] 
	ifFalse:  [^self asRot13Upper.] .
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:17:19' prior: 50617913!
asRot13
	"| valorAscii |
	valorAscii := self asciiValue ."
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	(self characterInRangeOfLowerCaseEncryption) ifTrue: [^self asRot13Lower ] 
	ifFalse:  [^self asRot13Upper.] .
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:17:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:17:23'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:23'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:50'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:50'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:50'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:50'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:17:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:17:50'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:17:50'!
ERROR!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:18:42' prior: 50617892!
asRot13Lower
	| valorAscii |
	valorAscii := self asciiValue .
	(valorAscii <= ($m asciiValue)) ifTrue: [^self asRot13First13: valorAscii.] ifFalse: [^self asRot13Last13: valorAscii.]
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:18:51' prior: 50617993!
asRot13Lower
	| valorAscii |
	valorAscii := self asciiValue .
	(valorAscii <= ($m asciiValue)) 
		ifTrue: [^self asRot13First13: valorAscii.] 
		ifFalse: [^self asRot13Last13: valorAscii.]
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:19:08' prior: 50617902!
asRot13Upper
	| valorAscii |
	valorAscii := self asciiValue .
	(valorAscii <= ($M asciiValue)) ifTrue: [^self asRot13First13: valorAscii.] ifFalse: [^self asRot13Last13: valorAscii.]
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:19:15' prior: 50618011!
asRot13Upper
	| valorAscii |
	valorAscii := self asciiValue .
	(valorAscii <= ($M asciiValue)) 
		ifTrue: [^self asRot13First13: valorAscii.] 
		ifFalse: [^self asRot13Last13: valorAscii.]
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:19:31' prior: 50617924!
asRot13
	(self characterNotInRangeOfEncryption ) ifTrue: [^self.].
	(self characterInRangeOfLowerCaseEncryption) ifTrue: [^self asRot13Lower ] 
	ifFalse:  [^self asRot13Upper.] .
	! !

$n asRot13
!
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:20:18' prior: 50617791!
characterInRangeOfLowerCaseEncryption
	^self characterNotInRangeOfLowerCaseEncryption not.
	
	! !
!Character methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:20:23' prior: 50617825!
characterInRangeOfUpperCaseEncryption
	^self characterNotInRangeOfUpperCaseEncryption not.
	
	! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:20:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:20:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:43'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:20:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:20:49'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:50'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:20:50'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:50'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:50'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:57'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:20:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:20:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:58'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:20:58'!
test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet
	
	self assert: $A equals: $N asRot13.
	self assert: $M equals: $Z asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:20:58'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:21:08'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:21:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:21:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:21:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:21:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:21:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:21:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:21:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:21:14'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:21:14'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:21:14'!
ERROR!

!methodRemoval: TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:21:14'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:21:14'!
test09TheEmptyStringDoesntChange
	
	self assert: '' equals: '' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:21:14'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:21:25'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:21:25'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:22:06'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:22:06'!
ERROR!
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:22:27'!
asRot13
	self shouldBeImplemented.! !
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:23:06' prior: 50618244!
asRot13
	^self .! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:23:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:23:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:23:14'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:23:14'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:23:14'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:23:14'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:23:14'!
test10CorrectlyEncodesAOneCharString
	
	self assert: 'n' equals: 'a' asRot13.
	self assert: 'Z' equals: 'M' asRot13.
	self assert: 'a' equals: 'n' asRot13.
	self assert: '{' equals: '{' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:23:14'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:23:31'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:23:31'!
FAILURE!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:23:31'!
FAILURE!

'd'!

'd' first!
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:26:34' prior: 50618248!
asRot13
	| char |
	char := 'd' first
	^self .! !

'd' first!

$s asString !
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:29:04' prior: 50618368!
asRot13
	| char charTrans |
	char := self first.
	charTrans := char asRot13 .
	
	^ charTrans asString .! !
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:29:08' prior: 50618374!
asRot13
	| char charTrans |
	char := self first.
	charTrans := char asRot13 .
	^ charTrans asString .! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:29:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:29:17'!
ERROR!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:29:18'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:29:18'!
ERROR!
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:30:10' prior: 50618381!
asRot13
	| char charTrans |
	self isEmpty ifTrue: [^self].
	char := self first.
	charTrans := char asRot13 .
	^ charTrans asString .! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:14'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:30:15'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:30:20'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:30:20'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:30:20'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'af 4/27/2023 19:30:20'!
FAILURE!

!methodRemoval: TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'af 4/27/2023 19:30:20'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:30:20'!
test11CorrectlyEncodesATwoCharString
	
	self assert: 'nm' equals: 'az' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'af 4/27/2023 19:30:20'!
FAILURE!
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:32:46' prior: 50618431!
asRot13
	| char charTrans |
	
	self isEmpty ifTrue: [^self].
	^self collect: [:aChar | aChar asRot13.].
	"char := self first.
	charTrans := char asRot13 .
	^ charTrans asString ."! !
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:33:00' prior: 50618543!
asRot13
	
	self isEmpty ifTrue: [^self].
	^self collect: [:aChar | aChar asRot13.].
	"	| char charTrans |

	char := self first.
	charTrans := char asRot13 .
	^ charTrans asString ."! !

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'af 4/27/2023 19:33:09'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'af 4/27/2023 19:33:17'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:33:17'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'af 4/27/2023 19:33:17'!
PASSED!

!methodRemoval: TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'af 4/27/2023 19:33:17'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'af 4/27/2023 19:33:21'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:33:21'!
test12CorrectlyEncodesMoreThanTwoCharString
	
	self assert: 'uByN!!' equals: 'hOlA!!' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'af 4/27/2023 19:33:21'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'af 4/27/2023 19:33:29'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'af 4/27/2023 19:33:41'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'af 4/27/2023 19:33:41'!
PASSED!
!TDDBabyStepsRot13Test methodsFor: 'tests' stamp: 'af 4/27/2023 19:33:41'!
testExtraToCheckGeneralizationOnKata
		
	self assert: 'Ju3er j3 4e3 t01at j3 q0ag a3rq e04q$...' equals: 'Wh3re w3 4r3 g01ng w3 d0nt n3ed r04d$...' asRot13
	! !

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'af 4/27/2023 19:33:42'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'af 4/27/2023 19:34:55'!
PASSED!
!String methodsFor: 'asRot13Category' stamp: 'af 4/27/2023 19:35:55' prior: 50618552!
asRot13
	
	self isEmpty ifTrue: [^self].
	^self collect: [:aChar | aChar asRot13.].! !

----SNAPSHOT----(27 April 2023 19:47:15) CuisUniversity-5706.image priorSource: 9036531!

----SNAPSHOT----(27 April 2023 19:47:21) CuisUniversity-5706.image priorSource: 9188470!

----SNAPSHOT----(29 April 2023 17:36:29) CuisUniversity-5706.image priorSource: 9188560!

----STARTUP---- (30 April 2023 12:55:38) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


!testRun: #TDDBabyStepsRot13Test #test01CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test02CorrectlyEncodesALowercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test03CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test04CorrectlyEncodesALowercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test05CharOnTheBelowRangeDoesntChange stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test06CharOnTheUpperRangeDoesntChange stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test07CorrectlyEncodesAnUppercaseCharFromTheFirstPartOfTheAlphabet stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test08CorrectlyEncodesAnUppercaseCharFromTheSecondPartOfTheAlphabet stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test09TheEmptyStringDoesntChange stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test10CorrectlyEncodesAOneCharString stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test11CorrectlyEncodesATwoCharString stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #test12CorrectlyEncodesMoreThanTwoCharString stamp: 'af 4/30/2023 12:56:24'!
PASSED!

!testRun: #TDDBabyStepsRot13Test #testExtraToCheckGeneralizationOnKata stamp: 'af 4/30/2023 12:56:24'!
PASSED!

TDDBabyStepsGamePrimeFactors start
!

!classDefinition: #TDDBabyStepsPrimeFactorsTest category: 'TDDBabyStepsGamePrimeFactors' stamp: 'af 4/30/2023 12:57:50'!
TestCase subclass: #TDDBabyStepsPrimeFactorsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGamePrimeFactors'!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 12:59:14'!
test01OneHasNoPrimeFactors
	
	self assert: Bag new equals: 1 factorize
	! !

25 isDivisibleBy: 5!

25 isDivisibleBy: 6!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:00:15'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:00:15'!
ERROR!

Bag!

1!
!SmallInteger methodsFor: 'nil' stamp: 'af 4/30/2023 13:04:36'!
factorize
 self==1 ifTrue: [^Bag new.].! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:05:28'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:05:49'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 13:05:49'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:05:49'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:05:49'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 13:05:49'!
test02FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 2) equals: 2 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:05:49'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:06:59' prior: 50618878!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: (Bag with: 2).
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:07:15' prior: 50618917!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:07:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:07:20'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:07:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:07:23'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 13:07:23'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:07:24'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:07:24'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 13:07:24'!
test03FactorsOfAPrimeNumberAreThePrimeNumber

	self assert: (Bag with: 3) equals: 3 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:07:24'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:07:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:07:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:07:24'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:08:10' prior: 50618923!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:08:19'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:08:19'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:08:19'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:08:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:08:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:08:24'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 13:08:24'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:08:24'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:08:24'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 13:08:24'!
test04CorrectlyFactorizesACompositeNumberWithTwoFactors2
	
	self assert: (Bag with: 2 with: 2) equals: 4 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:08:24'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:09:29' prior: 50618982!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^Bag with: 3].
! !

Bag!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:12:03' prior: 50619042!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^2 factorize add: 2].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:12:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:12:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:12:10'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:12:10'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:12:10'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:12:31' prior: 50619050!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^(2 factorize add: 2)].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:12:35'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:12:35'!
FAILURE!

b := Bag with: 2.!

b!

b!

b add: 2
!

b!

b!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:14:12' prior: 50619078!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^((2 factorize) add: 2)].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:14:18'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:14:18'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:14:18'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:14:18'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:14:18'!
FAILURE!

 2 factorize!

 2 factorize add: 10!

b2 := 2 factorize add: 10!

b2!

b2 := 2 factorize add: 10  !

b2 := (2 factorize) add: 10  !

b2!

b2 := (2 factorize) add: 10 withOccurrences: 1 
!

b2!

b2!

(2 factorize) add: 10 withOccurrences: 1 !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:18:50' prior: 50619096!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [((2 factorize) add: 2)].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:18:54'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:18:54'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:19:18' prior: 50619132!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^2 factorize].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:19:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:19:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:19:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:19:24'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:19:24'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:21:05' prior: 50619149!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^(Bag with: 2) addAll: (Bag with: 2)].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:21:12'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:21:12'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:21:12'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:21:12'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:21:12'!
FAILURE!

(Bag with: 2) addAll: (Bag with: 2)!

(Bag with: 2) addAll: (Bag with: 4)!

bb := (Bag with: 2) addAll: (Bag with: 4)!

(Bag with: 2) addAll: (Bag with: 2)!

(Bag with: 2) addAll: (Bag with: 2)!

(Bag with: 2) addAll: (Bag with: 2)!

(Bag with: 2) addAll: (Bag with: 2)!

bb := (Bag with: 2) addAll: (Bag with: 4)!

bb!

b := Bag with: 2.
!

bb := b addAll: b.
!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:23:21' prior: 50619177!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^2 factorize addAll: 2 factorize ].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:23:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:23:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:23:24'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:23:24'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:23:24'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:23:46' prior: 50619217!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^(2 factorize) addAll: (2 factorize). ].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:23:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:23:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:23:49'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:23:49'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:23:49'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:24:00' prior: 50619246!
factorize
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
self==4 ifTrue: [^((2 factorize) addAll: (2 factorize)). ].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:24:04'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:24:04'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:24:04'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:24:04'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:24:04'!
FAILURE!

((2 factorize) addAll: (2 factorize)). !

b!

b!

b := Bag with: 2.
!

bb := b addAll: b.
!

((2 factorize) addAll: (2 factorize)).!

b3 := Bag with: 2.
!

((2 factorize) addAll: (2 factorize)).!

(b3 addAll: b3).!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:26:10' prior: 50619275!
factorize
| primeraParte segundaParte |
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
primeraParte := (2 factorize).
segundaParte := (2 factorize).

self==4 ifTrue: [^((2 factorize) addAll: (2 factorize)). ].
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:26:26' prior: 50619311!
factorize
| primeraParte segundaParte |
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
primeraParte := (2 factorize).
segundaParte := (2 factorize).

self==4 ifTrue: [^primeraParte addAll: segundaParte. ].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:26:34'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:26:34'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:26:34'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:26:34'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:26:34'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:27:06' prior: 50619323!
factorize
| primeraParte segundaParte parteFinal |
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte addAll: segundaParte. ].
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:27:18' prior: 50619355!
factorize
| primeraParte segundaParte parteFinal |
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^parteFinal. ].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:27:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:27:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:27:23'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:27:23'!
FAILURE!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:27:23'!
FAILURE!

primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. !

primeraParte := (2 factorize).
!

segundaParte := (2 factorize).
!

parteFinal := primeraParte addAll: segundaParte. !

parteFinal!

primeraParte!

segundaParte!

primeraParte!

primeraParte := (2 factorize).
!

primeraParte addAll: segundaParte. !

primeraParte!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:29:00' prior: 50619368!
factorize
| primeraParte segundaParte parteFinal |
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].
self==3 ifTrue: [^Bag with: 3].
primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ].
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:29:08'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:29:08'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:29:08'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:29:08'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:29:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:29:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:29:13'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:29:13'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 13:29:13'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 13:29:13'!
FAILURE!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 13:29:13'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 13:29:13'!
test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2
	
	self assert: (Bag with: 2 with: 2 with: 2) equals: 8 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 13:29:13'!
FAILURE!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:35:05'!
factorizePrime
| primeraParte segundaParte parteFinal |
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^Bag with: 2].   
self==3 ifTrue: [^Bag with: 3].
primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ].
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:35:42' prior: 50619490!
factorizePrime
^Bag with: self .   
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:36:35' prior: 50619413!
factorize
| primeraParte segundaParte parteFinal |
self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^self factorizePrime ].
self==3 ifTrue: [^self factorizePrime ].

primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ].
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:40:14' prior: 50619508!
factorize

self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^self factorizePrime ].
self==3 ifTrue: [^self factorizePrime ].
^self tryMultipleFactors: 2.

"primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ]."
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:40:51'!
tryMultipleFactors: aPotentialDivisor


self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^self factorizePrime ].
self==3 ifTrue: [^self factorizePrime ].
^self tryMultipleFactors: 2.

"primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ]."
! !

dos1 := 2
!

dos2 := 2
!

dos1 = dos2
!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:44:09' prior: 50619534!
tryMultipleFactors: aPotentialDivisor
(self = aPotentialDivisor)  ifTrue: [^self factorizePrime .].
(self isDivisibleBy: aPotentialDivisor ) ifTrue: [] ifFalse: [].

"self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^self factorizePrime ].
self==3 ifTrue: [^self factorizePrime ].
^self tryMultipleFactors: 2.

primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ]."
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:49:56' prior: 50619549!
tryMultipleFactors: aPotentialDivisor
| parteFinal primeraParte segundaParte |
(self = aPotentialDivisor)  ifTrue: [^self factorizePrime .].
(self isDivisibleBy: aPotentialDivisor ) ifTrue: [] ifFalse: [].
primeraParte := (self/aPotentialDivisor factorize).
segundaParte := (aPotentialDivisor factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ].
"self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^self factorizePrime ].
self==3 ifTrue: [^self factorizePrime ].
^self tryMultipleFactors: 2.

primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ]."
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:52:27' prior: 50619567!
tryMultipleFactors: aPotentialDivisor
| parteFinal primeraParte segundaParte |
(self = aPotentialDivisor)  ifTrue: [^self factorizePrime .].

(self isDivisibleBy: aPotentialDivisor ) 
ifTrue: [
	primeraParte := (self/aPotentialDivisor factorize).
	segundaParte := (aPotentialDivisor factorize).
	parteFinal := primeraParte addAll: segundaParte. 
	^primeraParte.
	] 
ifFalse: [^self tryMultipleFactors: aPotentialDivisor+1.
	].

! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:52:52'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:52:52'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:52:53'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:52:53'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 13:52:53'!
ERROR!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:53:23' prior: 50619592!
tryMultipleFactors: aPotentialDivisor
| parteFinal primeraParte segundaParte |
(self <= aPotentialDivisor)  ifTrue: [^self factorizePrime .].

(self isDivisibleBy: aPotentialDivisor ) 
ifTrue: [
	primeraParte := (self/aPotentialDivisor factorize).
	segundaParte := (aPotentialDivisor factorize).
	parteFinal := primeraParte addAll: segundaParte. 
	^primeraParte.
	] 
ifFalse: [^self tryMultipleFactors: aPotentialDivisor+1.
	].

! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:54:38' prior: 50619521!
factorize

self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^self factorizePrime .].
self==3 ifTrue: [^self factorizePrime .].
^self tryMultipleFactors: 2.

"primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ]."
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:55:28' prior: 50619646!
factorize

"self==1 ifTrue: [^Bag new.].
self==2 ifTrue: [^self factorizePrime .].
self==3 ifTrue: [^self factorizePrime .]. "
^self tryMultipleFactors: 2.

"primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ]."
! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:55:36' prior: 50619659!
factorize

self==1 ifTrue: [^Bag new.].
"self==2 ifTrue: [^self factorizePrime .].
self==3 ifTrue: [^self factorizePrime .]. "
^self tryMultipleFactors: 2.

"primeraParte := (2 factorize).
segundaParte := (2 factorize).
parteFinal := primeraParte addAll: segundaParte. 
self==4 ifTrue: [^primeraParte. ]."
! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:55:43'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:55:44'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:55:44'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:55:44'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 13:55:44'!
ERROR!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:57:48'!
addTwoFactorsBags: aPotentialDivisor
| parteFinal primeraParte segundaParte |

primeraParte := (self/aPotentialDivisor factorize).
segundaParte := (aPotentialDivisor factorize).
parteFinal := primeraParte addAll: segundaParte. 
^primeraParte.

! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:58:25' prior: 50619629!
tryMultipleFactors: aPotentialDivisor
| parteFinal primeraParte segundaParte |
(self <= aPotentialDivisor)  ifTrue: [^self factorizePrime .].

(self isDivisibleBy: aPotentialDivisor ) 
ifTrue: [^self addTwoFactorsBags: aPotentialDivisor.] 
ifFalse: [^self tryMultipleFactors: aPotentialDivisor+1.].

! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:58:35' prior: 50619716!
tryMultipleFactors: aPotentialDivisor
(self <= aPotentialDivisor)  ifTrue: [^self factorizePrime .].

(self isDivisibleBy: aPotentialDivisor ) 
ifTrue: [^self addTwoFactorsBags: aPotentialDivisor.] 
ifFalse: [^self tryMultipleFactors: aPotentialDivisor+1.].

! !
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 13:58:55' prior: 50619705!
addTwoFactorsBags: aPotentialDivisor
|  primeraParte segundaParte |

primeraParte := (self/aPotentialDivisor factorize).
segundaParte := (aPotentialDivisor factorize).
primeraParte addAll: segundaParte. 
^primeraParte.

! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 13:59:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:59:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 13:59:00'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:59:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 13:59:00'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:59:13'!
ERROR!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 13:59:13'!
ERROR!

4 factorize.!

2 factorize.!

3 factorize.!

5 factorize.!

7 factorize.!

13 factorize.!

12 factorize.!

4 factorize.!

4 factorize.!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 14:03:57' prior: 50619741!
addTwoFactorsBags: aPotentialDivisor
|  primeraParte segundaParte |

primeraParte := ((self/aPotentialDivisor) factorize).
segundaParte := (aPotentialDivisor factorize).
primeraParte addAll: segundaParte. 
^primeraParte.

! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 14:04:02'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:04:02'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:04:02'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 14:04:02'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 14:04:02'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 14:04:08'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:04:08'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:04:08'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 14:04:08'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 14:04:08'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 14:04:08'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'af 4/30/2023 14:04:08'!
PASSED!

!methodRemoval: TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'af 4/30/2023 14:04:08'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 14:04:41'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:04:41'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:04:41'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 14:04:41'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 14:04:41'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 14:04:41'!
test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2
	
	self assert: (Bag with: 3 with: 3) equals: 9 factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'af 4/30/2023 14:04:42'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 14:04:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:04:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:04:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 14:04:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 14:04:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'af 4/30/2023 14:04:54'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 14:05:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:05:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:05:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 14:05:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 14:05:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'af 4/30/2023 14:05:06'!
PASSED!
!TDDBabyStepsPrimeFactorsTest methodsFor: 'tests' stamp: 'af 4/30/2023 14:05:06'!
testExtraToCheckGeneralizationOnKata
	
	self assert: (Bag with: 2 with: 2 with: 3 with: 3 with: 5 with: 13) equals: (2*2*3*3*5*13) factorize
	! !

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'af 4/30/2023 14:05:06'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test01OneHasNoPrimeFactors stamp: 'af 4/30/2023 14:05:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test02FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:05:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test03FactorsOfAPrimeNumberAreThePrimeNumber stamp: 'af 4/30/2023 14:05:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test04CorrectlyFactorizesACompositeNumberWithTwoFactors2 stamp: 'af 4/30/2023 14:05:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test08CorrectlyFactorizesACompositeNumberWithMoreThanTwoFactors2 stamp: 'af 4/30/2023 14:05:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #test09CorrectlyFactorizesACompositeNumberWithMoreThanOneFactorsDifferentThan2 stamp: 'af 4/30/2023 14:05:37'!
PASSED!

!testRun: #TDDBabyStepsPrimeFactorsTest #testExtraToCheckGeneralizationOnKata stamp: 'af 4/30/2023 14:05:37'!
PASSED!
!SmallInteger methodsFor: 'primeFactorsCategory' stamp: 'af 4/30/2023 14:06:44' prior: 50619672!
factorize

self==1 ifTrue: [^Bag new.].

^self tryMultipleFactors: 2.
! !

----SNAPSHOT----(30 April 2023 14:08:08) CuisUniversity-5706.image priorSource: 9188650!

TDDBabyStepsGameAnagrams start
!

!classDefinition: #TDDBabyStepsAnagramsTest category: 'TDDBabyStepsGameAnagrams' stamp: 'af 4/30/2023 14:08:22'!
TestCase subclass: #TDDBabyStepsAnagramsTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'TDDBabyStepsGameAnagrams'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'af 4/30/2023 14:09:14'!
test01EmptyStringAnagramIsJustACollectionWithTheEmptyString

	self assert: (Set with: '') equals: '' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 14:09:32'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 14:09:32'!
ERROR!

'asd' copyFrom: 'c' to: 'd'!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:11:03'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:11:03'!
ERROR!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:11:18'!
anagrams
	self shouldBeImplemented.! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:12:08' prior: 50620024!
anagrams
	^Set with: ''.! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:12:13'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:12:17'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'af 4/30/2023 15:12:17'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:12:17'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:12:17'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'af 4/30/2023 15:12:17'!
test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString

	self assert: (Set with:'a') equals: 'a' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:12:17'!
FAILURE!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:13:47' prior: 50620028!
anagrams
	self = '' ifTrue: [^Set with:''.].
	self = 'a' ifTrue: [^Set with:'a'.].! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:13:52'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:13:52'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:13:59'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:14:00'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'af 4/30/2023 15:14:00'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 4/30/2023 15:14:00'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 4/30/2023 15:14:00'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'af 4/30/2023 15:14:00'!
test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped

	self assert: (Set with:'ab' with: 'ba') equals: 'ab' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 4/30/2023 15:14:00'!
FAILURE!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:15:34' prior: 50620072!
anagrams
	self = '' ifTrue: [^Set with:''.].
	self = 'a' ifTrue: [^Set with:'a'.].  
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:15:37'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:15:37'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 4/30/2023 15:15:37'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:15:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:15:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 4/30/2023 15:15:42'!
PASSED!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'af 4/30/2023 15:15:42'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 4/30/2023 15:15:42'!
FAILURE!

!methodRemoval: TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 4/30/2023 15:15:42'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'af 4/30/2023 15:15:42'!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 4/30/2023 15:15:42'!
FAILURE!

'abcdefghijklmnopq'copyFrom:4to:10!

'abc' + 'def'!

'abc' add: 'def'!

'abc' appendToString: 'def'!

'abc' appendToString: 'def'!

'abc' appendToString: 'def' = 'defabc' !

('abc' appendToString: 'def') = 'defabc' !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:25:37'!
anagramsSingleCharacter
	^Set with:self.! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:26:04' prior: 50620128!
anagrams
	self = '' ifTrue: [^Set with:''.].
	self = 'a' ifTrue: [^self anagramsSingleCharacter .].  
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. ! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 4/30/2023 15:26:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:26:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 4/30/2023 15:26:07'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 4/30/2023 15:26:07'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 4/30/2023 15:26:07'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 4/30/2023 15:26:12'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 4/30/2023 15:26:20'!
PASSED!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:28:51'!
addTwoPartsAnagrams
	self = '' ifTrue: [^Set with:''.].
	self = 'a' ifTrue: [^self anagramsSingleCharacter .].  
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. ! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:30:23'!
addPart1Anagrams: part1Anagrams addPart2Anagrams: part2Anagrams
	self = '' ifTrue: [^Set with:''.].
	self = 'a' ifTrue: [^self anagramsSingleCharacter .].  
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. ! !

!methodRemoval: String #addTwoPartsAnagrams stamp: 'af 4/30/2023 15:30:29'!
addTwoPartsAnagrams
	self = '' ifTrue: [^Set with:''.].
	self = 'a' ifTrue: [^self anagramsSingleCharacter .].  
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. !

'abcdefghijklmnopq'copyFrom:1to:10!

(anagramsSingleCharacter size )!

 ('abcdefghijklmnopq' size )!

'abcdefghijklmnopq'copyFrom:1to: ('abcdefghijklmnopq' size )!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:35:16' prior: 50620268!
addPart1Anagrams: part1Anagrams addPart2Anagrams: part2Anagrams
	! !

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 4/30/2023 15:35:58'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 4/30/2023 15:35:58'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 4/30/2023 15:36:07'!
PASSED!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:40:47'!
anagramsFrom: anIndexToSplitString

	^Set with:self.! !

'abcdefghijklmnopq'copyFrom:1to: 3
!

'abcdefghijklmnopq'copyFrom:4to: 8
!

'abcdefghijklmnopq'copyFrom:40to: 8
!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:43:32' prior: 50620310!
anagramsFrom: anIndexToSplitString
	| part1 part2 |
	part1 := self copyFrom:1to: anIndexToSplitString.
	part2 := self copyFrom:(anIndexToSplitString+1) to: anIndexToSplitString.

	^Set with:self.! !

'abcdefghijklmnopq' size
!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:45:44' prior: 50620319!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^Set with:self.! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:50:44' prior: 50620329!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	(self size) <= anIndexToSplitString+1 ifTrue: [^Set with: ''.].
	
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^Set with:self.! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:51:53' prior: 50620339!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	(self size) <= anIndexToSplitString+1 ifTrue: [^Set with: ''.].
	
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^self addPart1Anagrams: stringPart1 addPart2Anagrams: stringPart2.! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:55:16' prior: 50620291!
addPart1Anagrams: part1Anagrams addPart2Anagrams: part2Anagrams
	| setAnagramasPrimeraParte setAnagramasSegundaParte |
	setAnagramasPrimeraParte := part1Anagrams anagrams.
	setAnagramasSegundaParte := part2Anagrams anagrams.
! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 15:55:59' prior: 50620365!
addPart1Anagrams: part1Anagrams addPart2Anagrams: part2Anagrams
	| setAnagramasPrimeraParte setAnagramasSegundaParte |
	setAnagramasPrimeraParte := part1Anagrams anagrams.
	setAnagramasSegundaParte := part2Anagrams anagrams.
	
! !

Set!

set1 := Set with: 3 with:5!

set1 := Set with: 3 with:3!

set1 := Set with: 3 with:9!

set1 := Set with: 1 with:2
!

set2 := Set with: 3 with: 2 with: 4
!

set1 add: set2!

set1 add: set2!

set2 := Set with: 3 with: 2 with: 4
!

set1 := Set with: 1 with:2
!

set2 := Set with: 3 with: 2 with: 4.
!

set1 := Set with: 1 with:2.
!

set1!

set1 add: set2!

set1 add: 10!

set1!

set1 := Set with: 1 with:2.
!

set2 := Set with: 3 with: 2 with: 4.
!

set1 add: set1!

set1 add: set1!

set1 := Set with: 1 with:2.
!

set2 := Set with: 3 with: 2 with: 4.
!

set1 add: set1!

set1 addAll: set1!

set1 := Bag with: 1 with:2.
!

set2 := Bag with: 3 with: 2 with: 4.
!

set1 addAll: set1!

set1 := Set with: 1 with:2.
!

set2 := Set with: 3 with: 2 with: 4.
!

set1 addAll: set2!

set1!

set1!

set3 := Set with: 'ab' with: 'ba'
!

set4 := Set with: 'cd' with: 'dc'!
!TDDBabyStepsAnagramsTest methodsFor: 'tests' stamp: 'af 4/30/2023 16:09:45' prior: 50620192!
test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations

	| anagrams |
	
	anagrams := Set new.
	anagrams add: 'abc'.
	anagrams add: 'acb'.
	anagrams add: 'bac'.
	anagrams add: 'bca'.
	anagrams add: 'cab'.
	anagrams add: 'cba'.

	self assert: anagrams equals: 'abc' anagrams
! !

set1 collect: [:aElementOfSet | aElementOfSet appendToString: 'xz'.].!

set3 collect: [:aElementOfSet | aElementOfSet appendToString: 'xz'.].!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 16:24:55'!
addString: aString toSetOfAnagram: setAnagrams
	
	
! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 16:26:02' prior: 50620429!
addString: aString toSetOfAnagram: setAnagrams
	^(setAnagrams collect: [:aElementOfSet | aElementOfSet appendToString: aString.]).
	
! !

set3 collect: [:aElementOfSet | aElementOfSet appendToString: 'xz'.].!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 16:32:27'!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	^set1Anagrams  collect: []
	
! !
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 16:34:44' prior: 50620443!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	^set1Anagrams  collect: [:aElementOfSet | self addString: aElementOfSet  toSetOfAnagram: set2Anagrams .]
	
! !

'abc' getSetMultipleJoins: set3 secondPart: set4!

res := 'abc' getSetMultipleJoins: set3 secondPart: set4!

res!
!String methodsFor: 'anagramsCategory' stamp: 'af 4/30/2023 16:36:08' prior: 50620449!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	^set1Anagrams  collect: [:aElementOfSet | self addString: aElementOfSet  toSetOfAnagram: set2Anagrams .]

! !

res!

----SNAPSHOT----(30 April 2023 16:45:31) CuisUniversity-5706.image priorSource: 9226761!

----STARTUP---- (1 May 2023 16:06:40) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\fridm\OneDrive\Escritorio\Parciales\2022-2c\1erParcial\ISW1-2022-2C-1erParcial.st----!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 16:08:19'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 16:08:19'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 16:08:19'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 16:08:19'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 16:08:19'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:08:19'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:08:19'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 16:08:19'!
PASSED!

Pirate subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #SimplePirate category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:09:02'!
Pirate subclass: #SimplePirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Captain category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:09:16'!
Pirate subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

SimplePirate subclass: #Filibustero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Filibustero category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:10:13'!
SimplePirate subclass: #Filibustero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

SimplePirate subclass: #Corsario
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Corsario category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:10:31'!
SimplePirate subclass: #Corsario
	instanceVariableNames: 'rank map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

SimplePirate subclass: #Bucanero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Bucanero category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:10:38'!
SimplePirate subclass: #Bucanero
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 16:11:17'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 16:11:17'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 16:11:17'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 16:11:17'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 16:11:17'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:11:17'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:11:17'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 16:11:17'!
PASSED!

SimplePirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Filibustero category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:12:00'!
SimplePirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

SimplePirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Bucanero category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:12:12'!
SimplePirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

SimplePirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Corsario category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:12:16'!
SimplePirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Pirate subclass: #SimplePirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #SimplePirate category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 16:12:24'!
Pirate subclass: #SimplePirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 16:12:32'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 16:12:32'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 16:12:32'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 16:12:32'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 16:12:32'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:12:32'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:12:32'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 16:12:32'!
PASSED!
!SimplePirate methodsFor: 'nil' stamp: 'af 5/1/2023 16:13:56'!
searchTreasureIn: island with: aMap
! !
!SimplePirate methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:14:20' prior: 50621277!
searchTreasureIn: island with: aMap
	^self error: 'I am a simple pirate!!' .! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 16:14:31'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 16:14:31'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 16:14:31'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 16:14:31'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 16:14:31'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:14:31'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:14:31'!
PASSED!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 16:14:31'!
PASSED!
!Captain methodsFor: 'nil' stamp: 'af 5/1/2023 16:17:50'!
searchTreasureIn: island with: aMap

	^ true "Aye, Aye!! La implementación está fuera del scope del parcial.".
	! !

!methodRemoval: Bucanero #searchTreasureIn:with: stamp: 'af 5/1/2023 16:18:14'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

!methodRemoval: Corsario #searchTreasureIn:with: stamp: 'af 5/1/2023 16:18:23'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

!methodRemoval: Filibustero #searchTreasureIn:with: stamp: 'af 5/1/2023 16:18:33'!
searchTreasureIn: island with: aMap

	rank = #SimplePirate ifTrue: [ self error: 'I am a simple pirate!!' ].
	rank = #Captain ifTrue: [ ^ true "Aye, Aye!! La implementación está fuera del scope del parcial." ].
	!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 16:18:38'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 16:18:38'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 16:18:38'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 16:18:38'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 16:18:38'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:18:38'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:18:38'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 16:18:38'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:18:38'!
ERROR!

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 16:18:52'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 16:18:58'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 16:19:02'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 16:19:06'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 16:19:12'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:19:16'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:19:21'!
ERROR!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:19:21'!
ERROR!
!Captain methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:21:09' overrides: 16920235!
initialize! !
!SimplePirate methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:21:52'!
aCaptainIWasMeantToBe
^Captain new.! !

!methodRemoval: Bucanero #aCaptainIWasMeantToBe stamp: 'af 5/1/2023 16:22:15'!
aCaptainIWasMeantToBe

	rank := #Captain!

!methodRemoval: Corsario #aCaptainIWasMeantToBe stamp: 'af 5/1/2023 16:22:21'!
aCaptainIWasMeantToBe

	rank := #Captain!

!methodRemoval: Filibustero #aCaptainIWasMeantToBe stamp: 'af 5/1/2023 16:22:33'!
aCaptainIWasMeantToBe

	rank := #Captain!
!SimplePirate methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:22:41' prior: 50621403!
aCaptainIWasMeantToBe
^Captain new.
"	rank := #Captain"! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 16:22:48'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 16:22:48'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 16:22:48'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 16:22:48'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 16:22:48'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:22:48'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:22:48'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 16:22:48'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:22:48'!
ERROR!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:22:59'!
PASSED!

pirate := Bucanero new.
!

pirate aCaptainIWasMeantToBe.!

pirate searchTreasureIn: 4 with: 6!

pirate!

pirate aCaptainIWasMeantToBe.
!
!SimplePirate methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:25:07' prior: 50621419!
aCaptainIWasMeantToBe
self = Captain new.
^self
"	rank := #Captain"! !

pirate := Bucanero new.
!

pirate aCaptainIWasMeantToBe.
!

pirate searchTreasureIn: 4 with: 6!
!SimplePirate methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:32:21' prior: 50621460!
aCaptainIWasMeantToBe
^Captain new.
"	rank := #Captain"! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 16:32:45'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 16:32:45'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 16:32:45'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 16:32:45'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 16:32:45'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 16:32:45'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:32:45'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 16:32:45'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 16:32:45'!
ERROR!

!classRemoval: #NumeroTest stamp: 'af 5/1/2023 16:34:07'!
TestCase subclass: #NumeroTest
	instanceVariableNames: 'zero one two four oneFifth oneHalf five twoFifth twoTwentyfifth fiveHalfs three eight negativeOne negativeTwo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Numero-Exercise'!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\IngSoft1-1C2023\02-Numeros\Numero-Exercise.st----!
!Entero methodsFor: 'arithmetic operations' stamp: 'af 5/1/2023 16:35:37' prior: 50621940 overrides: 50621825!
+ anAdder 
	^ anAdder sumarEntero: self.! !
!Crew methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:39:35' prior: 50620839!
moveTo: aPosition

	| acc ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.
	ix := 1.
	
		pirates do: [:pirate |
		pirates := pirates at: ix.
		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		ix := ix + 1.
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:40:04' prior: 50622394!
moveTo: aPosition

	| acc ix terrain |
	
	terrain := island terrainAt: aPosition.
	
	acc := true.	
		pirates do: [:pirate |		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		ix := ix + 1.
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 16:40:47' prior: 50622429!
moveTo: aPosition

	| acc ix terrain |
	terrain := island terrainAt: aPosition.	
	acc := true.	
		pirates do: [:pirate |		
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				acc := acc & true 
			].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				acc := acc & false
			].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [ acc := acc & false ].
			terrain = #Empty ifTrue: [ acc := acc & true ].
			terrain = #Diggable ifTrue: [ acc := acc & true ].
		].
		
		ix := ix + 1.
	].

	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:07:04'!
move: pirate To: aPosition in: terrain
		(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ ^false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				^true
			].
			terrain = #Diggable ifTrue: [ ^true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				^false
			].
			terrain = #Empty ifTrue: [^true ].
			terrain = #Diggable ifTrue: [ ^true].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [^false].
			terrain = #Empty ifTrue: [^ true ].
			terrain = #Diggable ifTrue: [ ^true ].
		].
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:11:09' prior: 50622463!
 moveTo: aPosition

	| acc terrain |
	terrain := island terrainAt: aPosition.	
	acc := pirates inject: true into: [:canMove :pirate | canMove & (self move: pirate To: aPosition in: terrain )].	
	"nos movemos si todos pueden moverse"
	acc ifTrue: [ island crewAt: aPosition ].
	
	! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 17:11:24'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 17:11:24'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 17:11:24'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 17:11:24'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 17:11:24'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 17:11:24'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 17:11:24'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 17:11:24'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 17:11:24'!
ERROR!
!Crew methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:12:19' prior: 50622520!
moveTo: aPosition

	| moved terrain |
	terrain := island terrainAt: aPosition.	
	moved := pirates inject: true into: [:canMove :pirate | canMove & (self move: pirate To: aPosition in: terrain )].	
	"nos movemos si todos pueden moverse"
	moved ifTrue: [ island crewAt: aPosition ].
	
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:14:37' prior: 50622496!
move: pirate To: aPosition in: terrain	^pirate moveTo: aPosition in: terrain at: island
		"(pirate isKindOf: Corsario) ifTrue: [ 
			terrain = #Tree ifTrue: [ ^false ].
			terrain = #Empty ifTrue: [ 
				pirate drawDirectionTo: aPosition.
				^true
			].
			terrain = #Diggable ifTrue: [ ^true ].
		].
		
		(pirate isKindOf: Filibustero) ifTrue: [
			terrain = #Tree ifTrue: [ 
				island clearTerrainAt: aPosition.
				^false
			].
			terrain = #Empty ifTrue: [^true ].
			terrain = #Diggable ifTrue: [ ^true].
		].
		
		(pirate isKindOf: Bucanero) ifTrue: [
			terrain = #Tree ifTrue: [^false].
			terrain = #Empty ifTrue: [^ true ].
			terrain = #Diggable ifTrue: [ ^true ].
		].
	"! !
!SimplePirate methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:15:56'!
moveTo: aPosition in: terrain at: island
^ self subclassResponsibility.! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:16:57' overrides: 50622597!
moveTo: aPosition in: terrain at: island
^ self subclassResponsibility.! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:17:03' overrides: 50622597!
moveTo: aPosition in: terrain at: island
^ self subclassResponsibility.! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:17:12' overrides: 50622597!
moveTo: aPosition in: terrain at: island
^ self subclassResponsibility.! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:18:07' prior: 50622609 overrides: 50622597!
moveTo: aPosition in: terrain at: island
	terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ 
	self drawDirectionTo: aPosition.
	^true.].! !
!Corsario methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:19:20' prior: 50622621 overrides: 50622597!
moveTo: aPosition in: terrain at: island
	terrain = #Tree ifTrue: [ ^false ].
	terrain = #Empty ifTrue: [ 
		self drawDirectionTo: aPosition.
		^true
		].
	terrain = #Diggable ifTrue: [ ^true ].! !
!Filibustero methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:20:05' prior: 50622615 overrides: 50622597!
moveTo: aPosition in: terrain at: island
terrain = #Tree ifTrue: [ 
			island clearTerrainAt: aPosition.
			^false
			].
			terrain = #Empty ifTrue: [^true ].
			terrain = #Diggable ifTrue: [ ^true].
! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:20:42' prior: 50622603 overrides: 50622597!
moveTo: aPosition in: terrain at: island
	terrain = #Tree ifTrue: [^false].
	terrain = #Empty ifTrue: [^ true ].
	terrain = #Diggable ifTrue: [ ^true ].! !

!testRun: #CrewTest #test01MovingCrewToTreePlaceDoesNotMove stamp: 'af 5/1/2023 17:20:46'!
PASSED!

!testRun: #CrewTest #test02MovingCrewToTreePlaceFilibusteroRemovesTree stamp: 'af 5/1/2023 17:20:46'!
PASSED!

!testRun: #CrewTest #test03MovingCrewToFreePlace stamp: 'af 5/1/2023 17:20:46'!
PASSED!

!testRun: #CrewTest #test04MovingCrewToFreePlaceCorsarioWritesDirectionInMap stamp: 'af 5/1/2023 17:20:46'!
PASSED!

!testRun: #CrewTest #test05CrewCannotBuryTreasureIfBucaneroCannotDig stamp: 'af 5/1/2023 17:20:46'!
PASSED!

!testRun: #CrewTest #test06CrewCanBuryTreasureIfBucaneroCanDig stamp: 'af 5/1/2023 17:20:46'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 17:20:46'!
ERROR!

!testRun: #CrewTest #test08SimplePirateCannotUseMap stamp: 'af 5/1/2023 17:20:46'!
PASSED!

!testRun: #CrewTest #test07CaptainCanUseMap stamp: 'af 5/1/2023 17:20:46'!
ERROR!

Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Terrain category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 17:23:37'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Tree category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 17:23:47'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Diggable category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 17:23:54'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classDefinition: #Empty category: 'ISW1-2022-2C-1erParcial' stamp: 'af 5/1/2023 17:24:01'!
Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!
!Bucanero methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:25:22' prior: 50622650 overrides: 50622597!
moveTo: aPosition in: terrain at: island
	terrain canMove: self to: aPosition at: island
	
	terrain = #Tree ifTrue: [^false].
	terrain = #Empty ifTrue: [^ true ].
	terrain = #Diggable ifTrue: [ ^true ].! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:25:37' prior: 50622733 overrides: 50622597!
moveTo: aPosition in: terrain at: island
	terrain canMove: self to: aPosition at: island.
	
	terrain = #Tree ifTrue: [^false].
	terrain = #Empty ifTrue: [^ true ].
	terrain = #Diggable ifTrue: [ ^true ].! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:25:51' prior: 50622743 overrides: 50622597!
moveTo: aPosition in: terrain at: island
	^terrain canMove: self to: aPosition at: island.
	! !
!Crew methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:26:59' prior: 50622572!
move: pirate To: aPosition in: terrain	^pirate moveTo: aPosition in: terrain at: island! !
!Island methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:27:43' prior: 50620974!
terrainAt: aPosition

	| ix |
	
	ix := 1.
	[ix <= treesAt size] whileTrue: [ | pos |
		pos := treesAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Tree new ].		
		ix := ix + 1.
	].

	ix := 1.
	[ix <= digsAt size] whileTrue: [ | pos |
		pos := digsAt at: ix.
		(aPosition = pos) ifTrue: [ ^ Diggable new ].
		ix := ix + 1.
	].

	^ Empty new.
	
! !
!Bucanero methodsFor: 'as yet unclassified' stamp: 'af 5/1/2023 17:28:45' prior: 50622753 overrides: 50622597!
moveTo: aPosition in: terrain at: island
	^terrain canMove: self to: aPosition at: island.
	"
	terrain = #Tree ifTrue: [^false].
	terrain = #Empty ifTrue: [^ true ].
	terrain = #Diggable ifTrue: [ ^true ]."! !

!classRemoval: #Tree stamp: 'af 5/1/2023 22:40:48'!
Terrain subclass: #Tree
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Empty stamp: 'af 5/1/2023 22:40:48'!
Terrain subclass: #Empty
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Diggable stamp: 'af 5/1/2023 22:40:49'!
Terrain subclass: #Diggable
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Terrain stamp: 'af 5/1/2023 22:40:49'!
Object subclass: #Terrain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Filibustero stamp: 'af 5/1/2023 22:40:49'!
SimplePirate subclass: #Filibustero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Corsario stamp: 'af 5/1/2023 22:40:49'!
SimplePirate subclass: #Corsario
	instanceVariableNames: 'map'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Bucanero stamp: 'af 5/1/2023 22:40:49'!
SimplePirate subclass: #Bucanero
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #SimplePirate stamp: 'af 5/1/2023 22:40:49'!
Pirate subclass: #SimplePirate
	instanceVariableNames: 'rank'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Captain stamp: 'af 5/1/2023 22:40:50'!
Pirate subclass: #Captain
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Pirate stamp: 'af 5/1/2023 22:40:50'!
Object subclass: #Pirate
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Map stamp: 'af 5/1/2023 22:40:50'!
Object subclass: #Map
	instanceVariableNames: 'island startPosition steps treasureMarkPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Island stamp: 'af 5/1/2023 22:40:50'!
Object subclass: #Island
	instanceVariableNames: 'boardSize treesAt digsAt crewAt treasureAt'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #Crew stamp: 'af 5/1/2023 22:40:50'!
Object subclass: #Crew
	instanceVariableNames: 'island pirates'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

!classRemoval: #CrewTest stamp: 'af 5/1/2023 22:40:50'!
TestCase subclass: #CrewTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-2C-1erParcial'!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\Parciales\2022-2c\1erParcial\ISW1-2022-2C-1erParcial-Solucion.st----!

----SNAPSHOT----(2 May 2023 10:47:57) CuisUniversity-5706.image priorSource: 9242191!

----STARTUP---- (4 May 2023 16:01:23) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\fridm\OneDrive\Escritorio\Parciales\2022-1c\1erParcial\ISW1-2022-1C-Parcial-1.st----!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/4/2023 16:14:46'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/4/2023 16:14:46'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:18:07' prior: 50623621!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	sector := Sector withTurboOf: 10 * kilometer.
	outside := sector length + (1 * millimeter).
	car := FormulaOneCar drivenBy: #Schumacher.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17'!
createSectorWith10KilometerTurbo

	^ Sector withTurboOf: 10 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623738!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ FormulaOneCar drivenBy: #Schumacher.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623919!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623942!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	sectorA _ self createSectorWith10KilometerTurbo.
	sectorB _ Sector withTurboOf: 30 * kilometer.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623726!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
	track _ Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623823!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer)).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623759!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ FormulaOneCar drivenBy: #Schumacher.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623804!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	car _ FormulaOneCar drivenBy: #Schumacher.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623838!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createSectorWith10KilometerTurbo)))
		running: 100.
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623899!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623783!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	track _ Track withSectors: sectors.
	car1 _ FormulaOneCar drivenBy: #Schumacher.
	car2 _ FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50624691!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	sector := self createSectorWith10KilometerTurbo.
	outside := sector length + (1 * millimeter).
	car := FormulaOneCar drivenBy: #Schumacher.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623877!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:19:17' prior: 50623859!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createSectorWith10KilometerTurbo)))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:20:48' prior: 50623693!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 24 * kilometer.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22'!
createSectorWith24KilometerTurbo

	^ Sector withTurboOf: 24 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22' prior: 50623970!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22' prior: 50623674!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22' prior: 50624983!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := FormulaOneCar drivenBy: #Schumacher.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22' prior: 50624033!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22' prior: 50624056!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22' prior: 50623990!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22' prior: 50624078!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:21:22' prior: 50624011!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ FormulaOneCar drivenBy: #Schumacher.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48'!
schumacherCar

	^ FormulaOneCar drivenBy: #Schumacher! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50624923!
test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength

	| sector  outside car |
	sector := self createSectorWith10KilometerTurbo.
	outside := sector length + (1 * millimeter).
	car := self schumacherCar.
	
	self 
		should: [ sector put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (sector includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50624713!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50625035!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50625126!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50625169!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50623653!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector _ Sector withTurboOf: 20 * kilometer.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50625014!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50624815!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50624840!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50625080!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50625104!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50624901!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	track _ Track withSectors: sectors.
	car1 _ self schumacherCar.
	car2 _ FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50625054!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50625147!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ FormulaOneCar drivenBy: #Hamilton.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:23:48' prior: 50623638!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector _ Sector withoutTurboOf: 10*kilometer.
	car _ self schumacherCar.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:25:37' prior: 50625493!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector := Sector withoutTurboOf: 10*kilometer.
	
	car := self schumacherCar.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:26:01'!
createSectorWithOut10KilometerTurbo

	^ Sector withoutTurboOf: 10*kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:26:01' prior: 50625508!
test03CarCannotActivateTurboInNonTurboSector

	| car sector |

	sector := self createSectorWithOut10KilometerTurbo.
	
	car := self schumacherCar.
	
	sector atStartPut: car.
	
	self should: [ car activateTurbo ]
		raise: Error
		withExceptionDo: [ :error |
			self assert: Sector turboNotAllowedErrorDescription equals: error messageText.
			self deny: car isTurboActivated]
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:26:38' prior: 50625296!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 20 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := FormulaOneCar drivenBy: #Hamilton.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10'!
hamiltonCar

	^ FormulaOneCar drivenBy: #Hamilton! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625234!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625253!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625274!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625544!
test04CarCannotActivateTurboWhenNoCarAhead

	| schumacher hamilton sector |
	
	sector := Sector withTurboOf: 20 * kilometer.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	sector put: schumacher at: 12 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ hamilton activateTurbo]
		raise: Error - MessageNotUnderstood
		withExceptionDo: [:exception |
			self assert: Sector cannotActivateTurboWhenNoCarAheadErrorDescription equals: exception messageText. 
			self deny: hamilton isTurboActivated ]! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625317!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625446!
test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	
	sector put: schumacher at: 12.9 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self should: [schumacher activateTurbo]
		raise: Error - MessageNotUnderstood 
		withExceptionDo: [ :error |
			self 
				assert: Sector cannotActivateTurboWhenMoreThanASecondBehindAnotherCarErrorDescription 
				equals: error messageText.
			self deny: schumacher isTurboActivated]
			! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50624859!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createSectorWith10KilometerTurbo)))
		running: 100.
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	hamilton _ self hamiltonCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625380!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625403!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:27:10' prior: 50625472!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector _ self createSectorWith24KilometerTurbo.
	
	schumacher _ self schumacherCar.
	hamilton _ self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:00' prior: 50624787!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors := OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (Sector withoutTurboOf: 20 * kilometer).
		
	track := Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44'!
m1

	^ Sector withoutTurboOf: 20 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50625780!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors := OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1).
		
	track := Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50624799!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1)).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50625213!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50625337!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50625361!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1).
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50624734!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50624880!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50625425!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1).
		
	track _ Track withSectors: sectors.
	car1 _ self schumacherCar.
	car2 _ FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:28:44' prior: 50624941!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self m1).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:29:42'!
createSectorWithOut20KilometerTurbo

	^ Sector withoutTurboOf: 20 * kilometer! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:42' prior: 50625824!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:42' prior: 50625844!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:42' prior: 50625797!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors := OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
		
	track := Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:42' prior: 50625948!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:42' prior: 50625908!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:42' prior: 50625885!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ FormulaOneCar drivenBy: #Verstappen.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:42' prior: 50625809!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo)).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:42' prior: 50625867!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 16:29:43' prior: 50625928!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
		
	track _ Track withSectors: sectors.
	car1 _ self schumacherCar.
	car2 _ FormulaOneCar drivenBy: #Verstappen.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !

!methodRemoval: FormulaOneTest #m1 stamp: 'af 5/4/2023 16:29:43'!
m1

	^ Sector withoutTurboOf: 20 * kilometer!
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:37' prior: 50625695!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createSectorWith10KilometerTurbo)))
		running: 100.
	
	verstappen := FormulaOneCar drivenBy: #Verstappen.
	
	hamilton := self hamiltonCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:55'!
verstappenCar

	^ FormulaOneCar drivenBy: #Verstappen! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:55' prior: 50626164!
test14TwoCarsCanBeAtTheSameDistanceFromStart

	| grandPrix hamilton verstappen |
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createSectorWith10KilometerTurbo)))
		running: 100.
	
	verstappen := self verstappenCar.
	
	hamilton := self hamiltonCar.	
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix put: hamilton at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert:  5 * kilometer equals: (grandPrix locationOf: hamilton). 
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:55' prior: 50626079!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:56' prior: 50626057!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:56' prior: 50624758!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen _ self verstappenCar.
	sectorA _ self createSectorWith10KilometerTurbo.
	sectorB _ Sector withTurboOf: 30 * kilometer.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:56' prior: 50626139!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
		
	track _ Track withSectors: sectors.
	car1 _ self schumacherCar.
	car2 _ self verstappenCar.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:56' prior: 50626034!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo).
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:30:56' prior: 50624964!
test15ACarStoppedShouldNotMoveAfterSomeTime

	| grandPrix verstappen |
	
	verstappen _ self verstappenCar.
	verstappen speed: 0 * kilometer / hour.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: (OrderedCollection with: (self createSectorWith10KilometerTurbo)))
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 5 * kilometer.
	grandPrix advance: 10 * minute.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen) 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07'!
tenTurboTwentyNotTurboSector

	^ OrderedCollection 
		with: (self createSectorWith10KilometerTurbo)
		with: (self createSectorWithOut20KilometerTurbo)! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50626021!
test08TheLengthOfATrackShouldBeTheSumOfItsSectors

	| sectors track |
	
	sectors := self tenTurboTwentyNotTurboSector.
		
	track := Track withSectors: sectors.
	
	self assert: 30 * kilometer equals: 	track length! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50626104!
test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps

	| track grandPrix numberOfLaps |
	
	track _ Track withSectors: (self tenTurboTwentyNotTurboSector).
	numberOfLaps _ 100.
	
	grandPrix _ GrandPrix on: track running: numberOfLaps.
	
	self assert: track length * numberOfLaps	 equals: grandPrix length
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50625975!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	| sectors track car outside |
	
	sectors _ self tenTurboTwentyNotTurboSector.
	
	track _ Track withSectors: sectors.
	outside _ track length + (1 * millimeter).
	car _ self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50625996!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors _ self tenTurboTwentyNotTurboSector.
		
	positionInSector2 _ 5 * kilometer.
	positionInTrack _ sectors first length + positionInSector2.
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50626120!
test12CarCannotBeInMoreThanOneSectorAtATime

	| sectors track car |
	
	sectors _ self tenTurboTwentyNotTurboSector.
	
	track _ Track withSectors: sectors.
	car _ self schumacherCar.

	track put: car at: 5 * kilometer.
	track put: car at: 15 * kilometer.
	
	self assert: sectors second equals: (track sectorOf: car).
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car)
! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50626209!
test18GrandPrixKnowsSectorOfCarAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ self tenTurboTwentyNotTurboSector.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 0 * kilometer.
	
	verstappen speed: 5 * kilometer / hour. ":)"
	grandPrix advance: 1 * hour.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50626233!
test17GrandPrixKnowsSectorOfCar

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	
	sectors _ self tenTurboTwentyNotTurboSector.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
		
	grandPrix put: verstappen at: 5 * kilometer.
	
	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectors first equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50626282!
test11TrackShouldKnowCarsInRunning

	| sectors track car1 car2 |
	
	sectors _ self tenTurboTwentyNotTurboSector.
		
	track _ Track withSectors: sectors.
	car1 _ self schumacherCar.
	car2 _ self verstappenCar.

	track put: car1 at: 10 * kilometer.
	track put: car2 at: 30 * kilometer.
	
	self assert: (track includes: car1).
	self assert: (track includes: car2).
		
	self assert: (sectors first includes: car1).
	self assert: (sectors second includes: car2).

! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:35:07' prior: 50626303!
test16ACarSpeedingShouldMoveAfterSomeTime

	| grandPrix verstappen sectors |
	
	verstappen _ self verstappenCar.
	verstappen speed: 0* kilometer / hour.
	
	sectors _ self tenTurboTwentyNotTurboSector.
	
	grandPrix _ GrandPrix 
		on: (Track withSectors: sectors)
		running: 100
		with: (Set with: verstappen).
	
	grandPrix put: verstappen at: 0 * kilometer.
	verstappen speed: 300 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 300 * kilometer equals: (grandPrix locationOf: verstappen). 
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:36:29' prior: 50626254!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen := self verstappenCar.
	sectorA := self createSectorWith10KilometerTurbo.
	sectorB := Sector withTurboOf: 30 * kilometer.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:36:48'!
createSectorWith30KilometerTurbo

	^ Sector withTurboOf: 30 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:36:48' prior: 50626507!
test19GrandPrixMovesCarsBetweenSectors

	| grandPrix verstappen sectorA sectorB |
	
	verstappen := self verstappenCar.
	sectorA := self createSectorWith10KilometerTurbo.
	sectorB := self createSectorWith30KilometerTurbo.
	
	grandPrix := GrandPrix 
		on: (Track withSectors: (OrderedCollection with: sectorA with: sectorB))
		running: 100
		with: (Set new add: verstappen; yourself).
		
	grandPrix put: verstappen at: 5 * kilometer.

	self assert: 5 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorA equals: (grandPrix sectorOf: verstappen).
	
	verstappen speed: 15 * kilometer / hour.
	grandPrix advance: 1 * hour.
	
	self assert: 20 * kilometer equals: (grandPrix locationOf: verstappen). 
	self assert: sectorB equals: (grandPrix sectorOf: verstappen).
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:41:24' prior: 50625570!
test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar

	| schumacher hamilton sector |
	sector := self createSectorWith24KilometerTurbo.
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.	
	schumacher speed: 300 * kilometer / hour.
	hamilton speed: 300 * kilometer / hour.
	sector put: schumacher at: 12.95 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	self assert: schumacher isTurboActivated
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 16:42:22' prior: 50626374!
test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength

	|  track car outside |	
	track := Track withSectors: self tenTurboTwentyNotTurboSector.
	outside := track length + (1 * millimeter).
	car := self schumacherCar.
	
	self should: [ track put: car at: outside ] 
		raise: Error
		withExceptionDo: [ :error |
			self assert: Track cannotPlacedCarErrorDescription equals: error messageText.
			self deny: (track includes: car) ]	
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/4/2023 16:42:25'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/4/2023 16:42:25'!
PASSED!

res := 'abc' getSetMultipleJoins: set3 secondPart: set4
!

Object subclass: #PuertasCuadradasAbiertas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Puertas-Exercise'!

!classDefinition: #PuertasCuadradasAbiertas category: 'Puertas-Exercise' stamp: 'af 5/4/2023 17:22:29'!
Object subclass: #PuertasCuadradasAbiertas
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Puertas-Exercise'!

TestCase subclass: #PuertasTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Puertas-Exercise'!

!classDefinition: #PuertasTest category: 'Puertas-Exercise' stamp: 'af 5/4/2023 17:22:54'!
TestCase subclass: #PuertasTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Puertas-Exercise'!
!PuertasTest methodsFor: 'no messages' stamp: 'af 5/4/2023 17:24:10'!
test01AllDoorsStartClosed! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:24:40'!
test02AllDoorsAreOpenAfterFirstRound! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:25:14'!
test03EvenDoorsAreClosedAfterSecondRound! !

Object subclass: #PuertasCuadradasAbiertas
	instanceVariableNames: 'puertas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Puertas-Exercise'!

!classDefinition: #PuertasCuadradasAbiertas category: 'Puertas-Exercise' stamp: 'af 5/4/2023 17:26:37'!
Object subclass: #PuertasCuadradasAbiertas
	instanceVariableNames: 'puertas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Puertas-Exercise'!
!PuertasCuadradasAbiertas methodsFor: 'nil' stamp: 'af 5/4/2023 17:27:17' overrides: 16920235!
initialize
	puertas := OrderedCollection new.! !

PuertasTest new
!

PuertasCuadradasAbiertas new
!

PuertasCuadradasAbiertas new
!

OrderedCollection!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:29:54' prior: 50626742 overrides: 16920235!
initialize
	puertas := OrderedCollection new.
	puertas add false.! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:29:58' prior: 50626751 overrides: 16920235!
initialize
	puertas := OrderedCollection new.
	puertas add false.
	! !

PuertasCuadradasAbiertas new
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:30:09' prior: 50626758 overrides: 16920235!
initialize
	puertas := OrderedCollection new.
	puertas add: false.
	! !

PuertasCuadradasAbiertas new
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:34:18' prior: 50626766 overrides: 16920235!
initialize
	puertas := OrderedCollection new.
	self addEmptyDoors: 10.
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:35:32'!
addEmptyDoors: anAmountOfDoors
	puertas add: false.
	self addEmptyDoors: anAmountOfDoors-1.
	
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:37:33' prior: 50626780!
addEmptyDoors: anAmountOfDoors
	anAmountOfDoors <=0 ifTrue: [^self.]
	ifFalse: [
		puertas add: false.
		self addEmptyDoors: anAmountOfDoors-1.].
	
	! !

PuertasCuadradasAbiertas new
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:37:50' prior: 50626774 overrides: 16920235!
initialize
	puertas := OrderedCollection new.
	self addEmptyDoors: 100.
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:40:13'!
makeRoundNumber: numberOfRoundOfOpenings

	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:41:26'!
makeCycleIteration: stepSizeDoors

	! !

!methodRemoval: PuertasCuadradasAbiertas #makeRoundNumber: stamp: 'af 5/4/2023 17:41:30'!
makeRoundNumber: numberOfRoundOfOpenings

	!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:42:01' prior: 50626808!
makeCycleIteration: stepSizeDoors
	
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:43:14' prior: 50626817!
makeCycleIteration: stepSizeDoors
	puertas := puertas collect: [:aDoor | aDoor flipIfTouched: stepSizeDoors.].
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:43:40' prior: 50626822!
makeCycleIteration: stepSizeDoors
	puertas := puertas collect: [:aDoor | self flipIfTouched: aDoor step: stepSizeDoors.].
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:44:57'!
flipIfTouched: aDoor step: stepSizeDoors
! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:46:05' prior: 50626829!
makeCycleIteration: stepSizeDoors
	 | numberOfDoor | 
	numberOfDoor := 1.
	puertas := puertas collect: [:aDoor |
							numberOfDoor := numberOfDoor + 1.
							self flipIfTouched: aDoor step: stepSizeDoors.].
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:46:57' prior: 50626841!
makeCycleIteration: stepSizeDoors
	 | numberOfDoor | 
	numberOfDoor := 1.
	puertas := puertas collect: [:aDoor |
							numberOfDoor := numberOfDoor + 1.
							self flipIfTouched: aDoor step: stepSizeDoors doorNumber: numberOfDoor.].
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:47:07'!
flipIfTouched: aDoor step: stepSizeDoors doorNumber: numberOfDoor! !

!methodRemoval: PuertasCuadradasAbiertas #flipIfTouched:step: stamp: 'af 5/4/2023 17:47:11'!
flipIfTouched: aDoor step: stepSizeDoors
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:49:15' prior: 50626863!
flipIfTouched: aDoor step: stepSizeDoors doorNumber: numberOfDoor
	(numberOfDoor  isDivisibleBy: stepSizeDoors) ifTrue: [^aDoor negated] ifFalse: [^aDoor].! !

pue := PuertasCuadradasAbiertas new
!

pue makeCycleIteration: 1
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:51:26' prior: 50626873!
flipIfTouched: aDoor step: stepSizeDoors doorNumber: numberOfDoor
	^(numberOfDoor  isDivisibleBy: stepSizeDoors) ifTrue: [^aDoor negated] ifFalse: [^aDoor].! !

pue makeCycleIteration: 1
!

pue makeCycleIteration: 2
!

pue makeCycleIteration: 2
!

false negated
!

False negated
!

false not 
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:52:35' prior: 50626884!
flipIfTouched: aDoor step: stepSizeDoors doorNumber: numberOfDoor
	^(numberOfDoor  isDivisibleBy: stepSizeDoors) ifTrue: [^aDoor not] ifFalse: [^aDoor].! !

pue makeCycleIteration: 2
!

pue!

pue := PuertasCuadradasAbiertas new
!

pue makeCycleIteration: 1
!

pue makeCycleIteration: 2
!

pue makeCycleIteration: 3
!

pue makeCycleIteration: 4
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:55:17' prior: 50626797 overrides: 16920235!
initialize
	puertas := OrderedCollection new.
	self addEmptyDoors: 10.
	! !

pue := PuertasCuadradasAbiertas new
!

pue makeCycleIteration: 1
!

pue!

pue makeCycleIteration: 2
!

1 isDivisibleBy: 2
!

pue!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 17:57:46' prior: 50626852!
makeCycleIteration: stepSizeDoors
	 | numberOfDoor | 
	numberOfDoor := 0.
	puertas := puertas collect: [:aDoor |
							numberOfDoor := numberOfDoor + 1.
							self flipIfTouched: aDoor step: stepSizeDoors doorNumber: numberOfDoor.].
	! !

pue := PuertasCuadradasAbiertas new
!

pue makeCycleIteration: 2
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:01:40'!
makeManyCyclesUpTo: maxStepSize
	self makeManyCyclesCurrentStep: 1 upTo: maxStepSize.
	! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:02:21'!
makeManyCyclesCurrentStep: currentStep upTo: maxStepSize.! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:04:34' prior: 50626941!
makeManyCyclesCurrentStep: currentStep upTo: maxStepSize.
	currentStep  = maxStepSize  ifTrue: [^self] 
						      ifFalse: [self makeCycleIteration: currentStep.
								   self makeManyCyclesCurrentStep: currentStep+1 upTo: maxStepSize]! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:05:03' prior: 50626912 overrides: 16920235!
initialize
	puertas := OrderedCollection new.
	self addEmptyDoors: 100.
	! !

pue := PuertasCuadradasAbiertas new
!

pue makeManyCyclesUpTo: 100
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:06:01' prior: 50626947!
makeManyCyclesCurrentStep: currentStep upTo: maxStepSize.
	currentStep  > maxStepSize  ifTrue: [^self] 
						      ifFalse: [self makeCycleIteration: currentStep.
								   self makeManyCyclesCurrentStep: currentStep+1 upTo: maxStepSize]! !

pue := PuertasCuadradasAbiertas new
!

pue makeManyCyclesUpTo: 100
!
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:07:22' prior: 50626716!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new
! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:07:56' prior: 50626980!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new.
	puertas do:6! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:08:58' prior: 50626986!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new.
	puertas do: [:aDoor | Assert aDoor].! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:09:46' prior: 50626992!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new.
	puertas do: [:aDoor | self assert: aDoor equals: false.].! !

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:09:51'!
ERROR!

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:09:51'!
ERROR!

false equals: false 
!
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:12:11' prior: 50626999!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new.
	puertas do: [:aDoor | self assert: aDoor = false.].! !

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:12:15'!
ERROR!

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:12:15'!
ERROR!
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:12:36' prior: 50627013!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new.
	puertas collect: [:aDoor | self assert: aDoor = false.].! !

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:12:39'!
ERROR!

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:12:39'!
ERROR!

pue := PuertasCuadradasAbiertas new
!

pue makeManyCyclesUpTo: 100
!
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:14:26' prior: 50627026!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new.
	puertas do: [:aDoor | self assert: aDoor = false.].! !

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:14:30'!
ERROR!

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:14:30'!
ERROR!
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:16:00' prior: 50627042!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new.	
	self assert: puertas estanTodasCerradas.
! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:16:43'!
estanTodasCerradas 
	puertas allSatisfy: [:aDoor | aDoor = false.].! !

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:16:49'!
ERROR!

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:16:49'!
ERROR!

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:18:13'!
ERROR!

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:18:13'!
ERROR!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:18:40' prior: 50627062!
estanTodasCerradas 
	^puertas allSatisfy: [:aDoor | aDoor = false.].! !

!testRun: #PuertasTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:18:47'!
PASSED!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:18:59'!
allClosed 
	^puertas allSatisfy: [:aDoor | aDoor = false.].! !
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:19:07'!
allOpened 
	^puertas allSatisfy: [:aDoor | aDoor = true.].! !

!methodRemoval: PuertasCuadradasAbiertas #estanTodasCerradas stamp: 'af 5/4/2023 18:19:13'!
estanTodasCerradas 
	^puertas allSatisfy: [:aDoor | aDoor = false.].!
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:19:22' prior: 50627055!
test01AllDoorsStartClosed
	| puertas |
	puertas := PuertasCuadradasAbiertas new.	
	self assert: puertas allClosed .
! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:19:52' prior: 50626720!
test02AllDoorsAreOpenAfterFirstRound
	| puertas |
	puertas := PuertasCuadradasAbiertas new.	
	self assert: puertas allOpened .
! !

!testRun: #PuertasTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:19:55'!
FAILURE!

!testRun: #PuertasTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:19:55'!
FAILURE!
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:20:15' prior: 50627109!
test02AllDoorsAreOpenAfterFirstRound
	| puertas |
	puertas := PuertasCuadradasAbiertas new.	
	puertas makeCycleIteration: 1.

	self assert: puertas allOpened .
! !

!testRun: #PuertasTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:20:21'!
PASSED!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:21:45'!
onlyEvenDoorsClosed
	| ind |
	ind:= 0 
	^puertas allSatisfy: [:aDoor | aDoor = true.].! !

false = false 
!

false !!= false 
!

false = false not
!
!PuertasCuadradasAbiertas methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:25:16' prior: 50627135!
onlyEvenDoorsClosed
	| ind |
	ind:= 0.
	^puertas allSatisfy: [:aDoor | 
						ind := ind + 1.
						aDoor = ((ind isDivisibleBy: 2) not).].! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:26:02' prior: 50626724!
test03EvenDoorsAreClosedAfterSecondRound
	| puertas |
	puertas := PuertasCuadradasAbiertas new.	
	puertas makeCycleIteration: 1.
	puertas makeCycleIteration: 2.

	self assert: puertas onlyEvenDoorsClosed .
! !

!testRun: #PuertasTest #test03EvenDoorsAreClosedAfterSecondRound stamp: 'af 5/4/2023 18:26:07'!
PASSED!

pue := PuertasCuadradasAbiertas new
!

pue onlyEvenDoorsClosed 
!

pue makeCycleIteration: 1
!

pue onlyEvenDoorsClosed 
!

pue makeCycleIteration: 2
!

pue onlyEvenDoorsClosed 
!

pue onlyEvenDoorsClosed 
!

pue makeCycleIteration: 3
!

pue onlyEvenDoorsClosed 
!

!classRenamed: #PuertasCuadradasAbiertas as: #RowOfDoors stamp: 'af 5/4/2023 18:29:04'!
Smalltalk renameClassNamed: #PuertasCuadradasAbiertas as: #RowOfDoors!
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:29:04' prior: 50627151!
test03EvenDoorsAreClosedAfterSecondRound
	| puertas |
	puertas := RowOfDoors new.	
	puertas makeCycleIteration: 1.
	puertas makeCycleIteration: 2.

	self assert: puertas onlyEvenDoorsClosed .
! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:29:04' prior: 50627102!
test01AllDoorsStartClosed
	| puertas |
	puertas := RowOfDoors new.	
	self assert: puertas allClosed .
! !
!PuertasTest methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:29:04' prior: 50627123!
test02AllDoorsAreOpenAfterFirstRound
	| puertas |
	puertas := RowOfDoors new.	
	puertas makeCycleIteration: 1.

	self assert: puertas allOpened .
! !

!classRenamed: #PuertasTest as: #RowOfDoorsTest stamp: 'af 5/4/2023 18:29:45'!
Smalltalk renameClassNamed: #PuertasTest as: #RowOfDoorsTest!

Object subclass: #Door
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Puertas-Exercise'!

!classDefinition: #Door category: 'Puertas-Exercise' stamp: 'af 5/4/2023 18:30:25'!
Object subclass: #Door
	instanceVariableNames: 'state'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'Puertas-Exercise'!
!Door methodsFor: 'nil' stamp: 'af 5/4/2023 18:34:02'!
initialize: booleanOpenedState
	state := booleanOpenedState
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:34:37'!
toogle
	state := state not.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:34:59'!
isOpen
	^state.
	! !
!Door methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:35:18'!
isClosed
	^state not.
	! !

do := Door new
!

do := Door new: true
!
!Door class methodsFor: 'nil' stamp: 'af 5/4/2023 18:40:14'!
newDoorState: aBooleanOpenedCondition
	aBooleanOpenedCondition ifNil: [^self error "A door must be open or closed".] ifNotNil: []
	! !
!Door class methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:40:38' prior: 50627234!
newDoorState: aBooleanOpenedCondition
	aBooleanOpenedCondition ifNil: [^self error "A door must be open or closed".] ifNotNil: [self initialize: aBooleanOpenedCondition ]
	! !

do := Door newDoorState: true
!
!Door class methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:41:55' prior: 50627242!
newDoorState: aBooleanOpenedCondition
	aBooleanOpenedCondition ifNil: [^self error "A door must be open or closed".] ifNotNil: [^Door new initialize: aBooleanOpenedCondition ]
	! !

do := Door newDoorState: true
!

do!

do := Door newDoorState: false
!

do!

do := Door newDoorState: nil
!
!Door class methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:43:33' prior: 50627252!
newDoorState: aBooleanOpenedCondition
	aBooleanOpenedCondition ifNil: [^self error: 'A door must be open or closed'.] ifNotNil: [^Door new initialize: aBooleanOpenedCondition ]
	! !

do := Door newDoorState: nil
!
!Door class methodsFor: 'as yet unclassified' stamp: 'af 5/4/2023 18:43:46' prior: 50627264!
newDoorState: aBooleanOpenedCondition
	aBooleanOpenedCondition ifNil: [^self error: 'A door must be open or closed, cant be nil'.] ifNotNil: [^Door new initialize: aBooleanOpenedCondition ]
	! !
!RowOfDoors methodsFor: 'creationRowAndInitialize' stamp: 'af 5/4/2023 18:44:44' prior: 50626787!
addEmptyDoors: anAmountOfDoors
	anAmountOfDoors <=0 ifTrue: [^self.]
	ifFalse: [
		puertas add: (Door newDoorState: false).
		self addEmptyDoors: anAmountOfDoors-1.].
	
	! !

pue := RowOfDoors new
!

pue!

!testRun: #RowOfDoorsTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:46:02'!
FAILURE!

!testRun: #RowOfDoorsTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:46:02'!
ERROR!

!testRun: #RowOfDoorsTest #test03EvenDoorsAreClosedAfterSecondRound stamp: 'af 5/4/2023 18:46:02'!
ERROR!
!RowOfDoors methodsFor: 'verificationsOnRow' stamp: 'af 5/4/2023 18:46:27' prior: 50627087!
allClosed 
	^puertas allSatisfy: [:aDoor | aDoor isClosed .].! !

!testRun: #RowOfDoorsTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:46:33'!
PASSED!
!RowOfDoors methodsFor: 'verificationsOnRow' stamp: 'af 5/4/2023 18:46:43' prior: 50627092!
allOpened 
	^puertas allSatisfy: [:aDoor | aDoor isOpen .].! !

!testRun: #RowOfDoorsTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:46:51'!
ERROR!

!testRun: #RowOfDoorsTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:46:51'!
ERROR!

!testRun: #RowOfDoorsTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:47:17'!
ERROR!

!testRun: #RowOfDoorsTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:47:17'!
ERROR!
!RowOfDoors methodsFor: 'cycleThroughRow' stamp: 'af 5/4/2023 18:47:47' prior: 50626897!
flipIfTouched: aDoor step: stepSizeDoors doorNumber: numberOfDoor
	^(numberOfDoor  isDivisibleBy: stepSizeDoors) ifTrue: [^aDoor toggle] ifFalse: [^aDoor].! !
!RowOfDoors methodsFor: 'cycleThroughRow' stamp: 'af 5/4/2023 18:47:54' prior: 50627329!
flipIfTouched: aDoor step: stepSizeDoors doorNumber: numberOfDoor
	^(numberOfDoor  isDivisibleBy: stepSizeDoors) ifTrue: [^aDoor toogle] ifFalse: [^aDoor].! !

!testRun: #RowOfDoorsTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:47:59'!
PASSED!

!testRun: #RowOfDoorsTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:47:59'!
PASSED!

!testRun: #RowOfDoorsTest #test03EvenDoorsAreClosedAfterSecondRound stamp: 'af 5/4/2023 18:47:59'!
FAILURE!

!testRun: #RowOfDoorsTest #test03EvenDoorsAreClosedAfterSecondRound stamp: 'af 5/4/2023 18:47:59'!
FAILURE!

!testRun: #RowOfDoorsTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:48:09'!
PASSED!
!RowOfDoors methodsFor: 'verificationsOnRow' stamp: 'af 5/4/2023 18:48:55' prior: 50627143!
onlyEvenDoorsClosed
	| ind |
	ind:= 0.
	^puertas allSatisfy: [:aDoor | 
						ind := ind + 1.
						aDoor isOpen = ((ind isDivisibleBy: 2) not).].! !

!testRun: #RowOfDoorsTest #test01AllDoorsStartClosed stamp: 'af 5/4/2023 18:49:04'!
PASSED!

!testRun: #RowOfDoorsTest #test02AllDoorsAreOpenAfterFirstRound stamp: 'af 5/4/2023 18:49:04'!
PASSED!

!testRun: #RowOfDoorsTest #test03EvenDoorsAreClosedAfterSecondRound stamp: 'af 5/4/2023 18:49:04'!
PASSED!
!Door methodsFor: 'toogleAndActions' stamp: 'af 5/4/2023 18:51:06'!
open
	state := true.
	! !
!Door methodsFor: 'toogleAndActions' stamp: 'af 5/4/2023 18:51:12'!
close
	state := false.
	! !
!RowOfDoors methodsFor: 'verificationsOnRow' stamp: 'af 5/4/2023 18:52:26'!
indexsOfOpenedDoors
! !
!RowOfDoors methodsFor: 'verificationsOnRow' stamp: 'af 5/4/2023 18:57:13' prior: 50627386!
indexsOfOpenedDoors

	| indexes ind|
	ind := 0.
	indexes := OrderedCollection new.
	^puertas do: [:aDoor | ind:= ind+1.
						aDoor isOpen ifTrue: [indexes add: ind] .].! !

pue := RowOfDoors new
!

pue indexsOfOpenedDoors
!
!RowOfDoors methodsFor: 'verificationsOnRow' stamp: 'af 5/4/2023 18:58:11' prior: 50627390!
indexsOfOpenedDoors

	| indexes ind|
	ind := 0.
	indexes := OrderedCollection new.
	puertas do: [:aDoor | ind:= ind+1.
						aDoor isOpen ifTrue: [indexes add: ind] .].
	^indexes .! !

pue := RowOfDoors new
!

pue indexsOfOpenedDoors
!

pue indexsOfOpenedDoors
!

pue makeCycleIteration: 1
!

pue indexsOfOpenedDoors
!

pue makeCycleIteration: 2
!

pue indexsOfOpenedDoors
!

pue makeCycleIteration: 2
!

pue indexsOfOpenedDoors
!

pue makeCycleIteration: 2
!

pue indexsOfOpenedDoors
!

pue := RowOfDoors new
!

pue makeManyCyclesUpTo: 100
!

pue indexsOfOpenedDoors
!
!RowOfDoors methodsFor: 'creationRowAndInitialize' stamp: 'af 5/4/2023 19:02:01'!
initializeWith: amountOfDoors
	puertas := OrderedCollection new.
	self addEmptyDoors: amountOfDoors.
	! !
!RowOfDoors class methodsFor: 'nil' stamp: 'af 5/4/2023 19:02:54'!
newWith: amountOfDoors
^RowOfDoors new initializeWith: amountOfDoors .! !

pue := RowOfDoors newWith: 500
!

pue makeManyCyclesUpTo: 500
!

pue indexsOfOpenedDoors
!

RowOfDoors new
!

----SNAPSHOT----(4 May 2023 19:05:13) CuisUniversity-5706.image priorSource: 9342188!

pue := RowOfDoors newWith: 5000
!

pue makeManyCyclesUpTo: 5000
!

pue := RowOfDoors newWith: 1000
!

pue makeManyCyclesUpTo: 1000
!

pue indexsOfOpenedDoors
!

pue indexsOfOpenedDoors
!

pue := RowOfDoors newWith: 1000
!

pue makeManyCyclesUpTo: 1000
!

pue indexsOfOpenedDoors
!

pue indexsOfOpenedDoors
!

pue := RowOfDoors newWith: 5000
!

pue makeManyCyclesUpTo: 5000
!

10 to: 200
!

10 to: 200 do: [:ind | ind]
!

10 to: 20 do: [:ind | ind print: ind]
!

pue indexsOfOpenedDoors
!

pue := RowOfDoors newWith: 50
!

pue makeManyCyclesUpTo: 50
!

pue indexsOfOpenedDoors
!

col := pue indexsOfOpenedDoors
!

col at: 3
!
!RowOfDoors methodsFor: 'verificationsOnRow' stamp: 'af 5/4/2023 19:23:03'!
isOpenedDoor: numberOfDoor
	^(puertas at: numberOfDoor) isOpen ! !

pue := RowOfDoors newWith: 50
!

pue makeManyCyclesUpTo: 50
!

pue isOpenedDoor: 10
!

pue isOpenedDoor: 16
!
!RowOfDoors methodsFor: 'verificationsOnRow' stamp: 'af 5/4/2023 19:24:07'!
isClosedDoor: numberOfDoor
	^(puertas at: numberOfDoor) isClosed ! !

pue isClosedDoor: 16
!

pue isClosedDoor: 25
!

pue isClosedDoor: 24
!
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:53:24' prior: 50625716!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:54:20'!
set100kilometersPerHourSpeedTo: schumacher andSet100kilometersPerHourSpeedTo: hamilton

	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:54:20' prior: 50627473!
test23AfterThridTurbo_TurboIsExhausted

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	self set100kilometersPerHourSpeedTo: schumacher andSet100kilometersPerHourSpeedTo: hamilton.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:54:40' prior: 50625738!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	schumacher speed: 100 * kilometer / hour.
	hamilton speed: 100 * kilometer / hour.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:55:40' prior: 50625759!
test25CanNotDeactivateTurboWhenIsDeactivated

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	self set100kilometersPerHourSpeedTo: schumacher andSet100kilometersPerHourSpeedTo: hamilton.
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	self 
		should: [ schumacher deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadydeActivatedErrorDescription
	
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/4/2023 19:55:43'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/4/2023 19:55:43'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:55:59' prior: 50627527!
test24CanNotActivateTurboWhenTurboIsActivated

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	
	self set100kilometersPerHourSpeedTo: schumacher andSet100kilometersPerHourSpeedTo: hamilton.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	schumacher activateTurbo.
	
	self 
		should: [ schumacher activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:56:15' prior: 50625608!
test22ThirdTurboSpeedsByFivePercent

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	self set100kilometersPerHourSpeedTo: schumacher andSet100kilometersPerHourSpeedTo: hamilton.
	
	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:56:32' prior: 50625588!
test21SecondTurboSpeedsByTenPercent

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	self set100kilometersPerHourSpeedTo: schumacher andSet100kilometersPerHourSpeedTo: hamilton.

	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 19:57:10' prior: 50625650!
test20FirstTurboIncrementsSpeedByTwentyPercent

	| schumacher hamilton sector |
	
	sector := self createSectorWith24KilometerTurbo.
	
	schumacher := self schumacherCar.
	hamilton := self hamiltonCar.
	self set100kilometersPerHourSpeedTo: schumacher andSet100kilometersPerHourSpeedTo: hamilton.

	sector put: schumacher at: 12.99 * kilometer.
	sector put: hamilton at: 13 * kilometer.
	
	schumacher activateTurbo.
	
	self assert: schumacher isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/4/2023 20:07:52' prior: 50626392!
test10TrackShouldPlaceCarInKilometerWithinSector

	| sectors track car positionInTrack positionInSector2 |
	
	sectors := self tenTurboTwentyNotTurboSector.
		
	positionInSector2 := 5 * kilometer.
	positionInTrack := sectors first length + positionInSector2.
	
	track := Track withSectors: sectors.
	car := self schumacherCar.

	track put: car at: positionInTrack.
	
	self assert: sectors second equals: (track sectorOf: car).
	self assert: positionInTrack equals: (track positionOf: car).
	
	self deny: (sectors first includes: car).
	self assert: (sectors second includes: car).

! !

#dfsf
!

!classDefinition: #FormulaOneTest category: 'ISW1-2022-1C-Parcial-1' stamp: 'af 5/7/2023 11:35:27'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: 'sector24KmTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #FormulaOneTest category: 'ISW1-2022-1C-Parcial-1' stamp: 'af 5/7/2023 11:37:19'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: 'sector24KmTurbo schumacher1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classDefinition: #FormulaOneTest category: 'ISW1-2022-1C-Parcial-1' stamp: 'af 5/7/2023 11:37:21'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: 'sector24KmTurbo schumacher1 hamilton1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:37:15' prior: 50627721!
test20FirstTurboIncrementsSpeedByTwentyPercent
	sector24KmTurbo := self createSectorWith24KilometerTurbo.
	schumacher1 := self schumacherCar.
	hamilton1 := self hamiltonCar.
	self set100kilometersPerHourSpeedTo: schumacher1 andSet100kilometersPerHourSpeedTo: hamilton1.

	sector24KmTurbo put: schumacher1 at: 12.99 * kilometer.
	sector24KmTurbo put: hamilton1 at: 13 * kilometer.
	
	schumacher1 activateTurbo.
	
	self assert: schumacher1 isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher1 speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:38:17'!
setUpTest20To25Sector24kmWithRacers

	sector24KmTurbo := self createSectorWith24KilometerTurbo.
	schumacher1 := self schumacherCar.
	hamilton1 := self hamiltonCar.
	self set100kilometersPerHourSpeedTo: schumacher1 andSet100kilometersPerHourSpeedTo: hamilton1.

	sector24KmTurbo put: schumacher1 at: 12.99 * kilometer.
	sector24KmTurbo put: hamilton1 at: 13 * kilometer! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:38:17' prior: 50627789!
test20FirstTurboIncrementsSpeedByTwentyPercent
	self setUpTest20To25Sector24kmWithRacers.
	
	schumacher1 activateTurbo.
	
	self assert: schumacher1 isTurboActivated.
	self assert: 120 * kilometer / hour equals: schumacher1 speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:39:37' prior: 50627700!
test21SecondTurboSpeedsByTenPercent
	self setUpTest20To25Sector24kmWithRacers.	
	schumacher1 activateTurbo; deactivateTurbo; activateTurbo.
	
	self assert: schumacher1 isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher1 speed.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 11:39:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 11:39:42'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:39:47' prior: 50627834!
test21SecondTurboSpeedsByTenPercent
	self setUpTest20To25Sector24kmWithRacers.	
	schumacher1 activateTurbo; deactivateTurbo; activateTurbo.
	self assert: schumacher1 isTurboActivated.
	self assert: 110 * kilometer / hour equals: schumacher1 speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:40:18' prior: 50627678!
test22ThirdTurboSpeedsByFivePercent	self setUpTest20To25Sector24kmWithRacers.
	
	schumacher1 activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.
	self assert: schumacher1 isTurboActivated.
	self assert: 105 * kilometer / hour equals: schumacher1 speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:40:30' prior: 50627504!
test23AfterThridTurbo_TurboIsExhausted
	self setUpTest20To25Sector24kmWithRacers.
	
	schumacher1 activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	
	self assert: schumacher1 isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher1 speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:40:44' prior: 50627956!
test23AfterThridTurbo_TurboIsExhausted
	self setUpTest20To25Sector24kmWithRacers.
	
	schumacher1 activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo; deactivateTurbo; activateTurbo.	
	self assert: schumacher1 isTurboActivated.
	self assert: 100 * kilometer / hour equals: schumacher1 speed.! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:41:11' prior: 50627656!
test24CanNotActivateTurboWhenTurboIsActivated
	self setUpTest20To25Sector24kmWithRacers.
	schumacher1 activateTurbo.
	
	self 
		should: [ schumacher1 activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher1 turboAlreadyActivatedErrorDescription
	
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 11:41:21'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 11:41:21'!
PASSED!
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:41:27' prior: 50627982!
test24CanNotActivateTurboWhenTurboIsActivated
	self setUpTest20To25Sector24kmWithRacers.
	schumacher1 activateTurbo.
	self 
		should: [ schumacher1 activateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher1 turboAlreadyActivatedErrorDescription
	
	! !
!FormulaOneTest methodsFor: 'tests' stamp: 'af 5/7/2023 11:41:51' prior: 50627548!
test25CanNotDeactivateTurboWhenIsDeactivated
	self setUpTest20To25Sector24kmWithRacers.
	
	self 
		should: [ schumacher1 deactivateTurbo ]
		raise: Error - MessageNotUnderstood 
		withMessageText: schumacher1 turboAlreadydeActivatedErrorDescription
	
	! !

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 11:41:58'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 11:42:02'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 11:42:02'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'af 5/7/2023 11:45:46' prior: 50624252!
advance: aTimeLapse
		
	| ix cars |
	
	cars := track cars asOrderedCollection.	
	cars do: [:car | self relocate: car after: aTimeLapse.]
	"ix := 1.
	[ix <= cars size] whileTrue: [ | car |
		car := cars at: ix.
		self relocate: car after: aTimeLapse.
		ix := ix + 1.
	]"
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 11:45:56'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 11:45:56'!
PASSED!
!GrandPrix methodsFor: 'simulation' stamp: 'af 5/7/2023 11:46:13' prior: 50628196!
advance: aTimeLapse
	| cars |
	cars := track cars asOrderedCollection.	
	cars do: [:car | self relocate: car after: aTimeLapse.]
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 11:46:20'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 11:46:20'!
PASSED!
!GrandPrix methodsFor: 'car position' stamp: 'af 5/7/2023 11:46:50' prior: 50624236!
put: aCar at: aDistance

	| distanceInTrack |
	aCar traveledDistance: aDistance.
	distanceInTrack := aDistance \\ track length.
	track put: aCar at: distanceInTrack.
	! !
!GrandPrix methodsFor: 'simulation' stamp: 'af 5/7/2023 11:47:28' prior: 50624261!
relocate: aCar after: aTimeLapse 

	| distanceMoved distanceInTrack |
	distanceMoved := aCar speed * aTimeLapse.
	aCar advance: distanceMoved.	
	distanceInTrack := aCar traveledDistance \\ track length.
	track put: aCar at: distanceInTrack.! !
!Sector methodsFor: 'turbo' stamp: 'af 5/7/2023 11:52:37' prior: 50624399!
positionOfCarAheadOf: aCarToActiveTurboTo ifNone: alternativeClosure

	| sortedPositions carToActivateTurboToPosition |
	
	carToActivateTurboToPosition := cars at: aCarToActiveTurboTo.
	sortedPositions := cars asSortedCollection remove: carToActivateTurboToPosition; yourself.
	^ sortedPositions 
		detect: [:aPosition | aPosition > carToActivateTurboToPosition ]
		ifNone: alternativeClosure ! !
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 11:55:06' prior: 50624541!
cars
	| allCars ix |	
	allCars := Set new.
	
	allCars inject: [] into: [] .
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars
	! !
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:00:24' prior: 50628426!
cars
	| allCars ix |	
	allCars := Set new.
	"collection inject: 0 into: [:subTotal :next | subTotal + next]."
	allCars inject: allCars into: [] .
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars
	! !
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:03:37' prior: 50628436!
cars
	| allCars ix |	
	allCars := Set new.
	"collection inject: 0 into: [:subTotal :next | subTotal + next]."
	sectors inject: allCars into: [:subTotalCars :currentSector | allCars addAll: currentSector cars] .
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].

	^ allCars
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:03:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:03:43'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:03:43'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:03:51' prior: 50628448!
cars
	| allCars ix |	
	allCars := Set new.
	"collection inject: 0 into: [:subTotal :next | subTotal + next]."
	sectors inject: allCars into: [:subTotalCars :currentSector | allCars addAll: currentSector cars] ."
	ix := 1.
	[ix <= sectors size] whileTrue: [ | s |
		s := sectors at: ix.
		allCars addAll: s cars.
		ix := ix + 1.
	].
"
	^ allCars
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:03:56'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:03:57'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:03:57'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:04:07' prior: 50628550!
cars
	| allCars |	
	allCars := Set new.
	"collection inject: 0 into: [:subTotal :next | subTotal + next]."
	sectors inject: allCars into: [:subTotalCars :currentSector | allCars addAll: currentSector cars] .
	^ allCars
	! !
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:08:52' prior: 50624549!
length
	| acc ix |

	acc := 0 * kilometer.	sectors inject: acc into: [:subTotalLength :currentSector | acc + currentSector .]. 
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc.
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:09:01'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:09:01'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:09:01'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:09:27' prior: 50628662!
length
	| acc ix |

	acc := 0 * kilometer.	sectors inject: acc into: [:subTotalLength :currentSector | subTotalLength + currentSector .]. 
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc.
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:09:30'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:09:30'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:09:30'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:09:56' prior: 50628761!
length
	| acc ix |

	acc := 0 * kilometer.	sectors inject: acc into: [:subTotalLength :currentSector | subTotalLength + (currentSector length) .]. 
	ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	].

	^ acc.
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:09:59'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:09:59'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:10:10' prior: 50628861!
length
	| acc |

	acc := 0 * kilometer.	sectors inject: acc into: [:subTotalLength :currentSector | subTotalLength + (currentSector length) .]. 
	"ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	]."

	^ acc.
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:10:15'!
FAILURE!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:10:15'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:10:15'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:10:15'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:12:27' prior: 50628961!
length
	| acc ix |

	acc := 0 * kilometer.	sectors inject: acc into: [:subTotalLength :currentSector | subTotalLength + (currentSector length) ]. 
	^ acc.

	"ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	]."
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:12:31'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:12:31'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:12:31'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:12:32'!
FAILURE!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:12:32'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:12:32'!
PASSED!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:12:42'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:12:42'!
ERROR!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:12:42'!
FAILURE!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:52:51'!
FAILURE!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:52:51'!
ERROR!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:52:51'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:52:51'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 12:55:30' prior: 50629061!
length
	| acc ix |

	acc := 0 * kilometer.	"sectors inject: acc into: [:subTotalLength :currentSector | subTotalLength + (currentSector length) ]. "
	sectors do: [:currentSector | acc := acc + (currentSector length) ].
	^ acc.

	"ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	]."
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 12:55:35'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 12:55:35'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 13:04:00' prior: 50629335!
length
	| acc ix |

	acc := 0 * kilometer.	acc := sectors inject: acc into: [:subTotalLength :currentSector | subTotalLength + (currentSector length) ]. 
	"sectors do: [:currentSector | acc := acc + (currentSector length) ]."
	^ acc.

	"ix := 1.
	
	[ix <= sectors size] whileTrue: [ | sector |
		sector := sectors at: ix.
		acc := acc + sector length.
		ix := ix + 1.		
	]."
! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:04:09'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:04:09'!
PASSED!
!Track methodsFor: 'accessing' stamp: 'af 5/7/2023 13:04:55' prior: 50629437!
length
	| acc |

	acc := 0 * kilometer.	acc := sectors inject: acc into: [:subTotalLength :currentSector | subTotalLength + (currentSector length) ]. 
	"sectors do: [:currentSector | acc := acc + (currentSector length) ]."
	^ acc.! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:05:01'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:05:01'!
PASSED!
!Track methodsFor: 'testing' stamp: 'af 5/7/2023 13:12:37' prior: 50624558!
includes: aCar
	"Returns if any of the sectors includes aCar"
	
	| inc ix sector |
	sectors detect: [:currentSector | currentSector includes: aCar ] ifNone: [^false].
	^true.
	
	"inc := false.
	ix := 1.
	
	(sectors size = 0) ifTrue: [ ^ inc ].
	
	sector := sectors at: ix.
	(sector includes: aCar) 
		ifTrue: [ inc := true]
		ifFalse: [
			ix := ix +1.
			[ix <= sectors size] whileTrue: [ | s |
				s := sectors at: ix.
				(s includes: aCar) ifTrue: [ ^ true ].
				ix := ix + 1
			]	
		]. 
	^ inc"
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:12:46'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:12:46'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:12:47'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:12:47'!
PASSED!
!Track methodsFor: 'testing' stamp: 'af 5/7/2023 13:13:04' prior: 50629638!
includes: aCar
	"Returns if any of the sectors includes aCar"
	sectors detect: [:currentSector | currentSector includes: aCar ] ifNone: [^false].
	^true.
	! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:13:06'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:13:06'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:13:06'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:13:07'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:13:07'!
PASSED!
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 13:41:07' prior: 50624491!
positionOf: aCar
	|totalLength  |
		"
	ix := 1.
	sector := (sectors at: ix)."
	totalLength := 0 * kilometer.	
	sectors inject: totalLength into: [:accumulatedLength :currentSector | (currentSector  includes: aCar) ifTrue: [accumulatedLength + (currentSector length ).] . ]

	"[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	]."
	^ totalLength "+ (sector positionOf: aCar)."! !
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 13:43:27' prior: 50629840!
positionOf: aCar
	|totalLength  |
		"
	ix := 1.
	sector := (sectors at: ix)."
	totalLength := 0 * kilometer.	
	sectors inject: totalLength into: [:accumulatedLength :currentSector | (currentSector  includes: aCar) ifTrue: [accumulatedLength + (currentSector length ).] . ]

	"[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	]."
	^ totalLength + ((self sectorOf: aCar) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:43:35'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:43:35'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:43:36'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:43:36'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:43:36'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:43:36'!
ERROR!
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 13:43:51' prior: 50629858!
positionOf: aCar
	|totalLength  |
		"
	ix := 1.
	sector := (sectors at: ix)."
	totalLength := 0 * kilometer.	
	sectors inject: totalLength into: [:accumulatedLength :currentSector | (currentSector  includes: aCar) ifTrue: [accumulatedLength + (currentSector length ).] . ].

	"[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	]."
	^ totalLength + ((self sectorOf: aCar) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:43:57'!
ERROR!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:43:57'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:43:57'!
ERROR!
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 13:44:56' prior: 50629968!
positionOf: aCar
	|totalLength  |
		"
	ix := 1.
	sector := (sectors at: ix)."
	totalLength := 0 * kilometer.	
	sectors do: [:currentSector | (currentSector  includes: aCar) ifTrue: [totalLength  + (currentSector length ).] . ].

	"[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	]."
	^ totalLength + ((self sectorOf: aCar) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:45:01'!
FAILURE!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:45:01'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:45:01'!
FAILURE!
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 13:45:11' prior: 50630078!
positionOf: aCar
	|totalLength  |
		"
	ix := 1.
	sector := (sectors at: ix)."
	totalLength := 0 * kilometer.	
	sectors do: [:currentSector | (currentSector  includes: aCar) ifFalse: [totalLength  + (currentSector length ).] . ].

	"[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	]."
	^ totalLength + ((self sectorOf: aCar) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:45:19'!
FAILURE!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:45:19'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:45:19'!
FAILURE!

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:45:41'!
FAILURE!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:45:41'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:45:41'!
FAILURE!
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 13:46:43' prior: 50630186!
positionOf: aCar
	|totalLength  |
		"
	ix := 1.
	sector := (sectors at: ix)."
	totalLength := 0 * kilometer.	
	sectors do: [:currentSector | (currentSector  includes: aCar) ifFalse: [totalLength := totalLength  + (currentSector length ).] . ].

	"[sector includes: aCar] whileFalse: [
		accumulatedLength := accumulatedLength + sector length.
		ix := ix + 1.
		sector := (sectors at: ix).
	]."
	^ totalLength + ((self sectorOf: aCar) positionOf: aCar).! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 13:46:46'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 13:46:46'!
PASSED!
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 13:47:15' prior: 50630385!
positionOf: aCar
	|totalLength  |
	totalLength := 0 * kilometer.	
	sectors do: [:currentSector | (currentSector  includes: aCar) ifFalse: [totalLength := totalLength  + (currentSector length ).] . ].
	^ totalLength + ((self sectorOf: aCar) positionOf: aCar).! !
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 14:34:28' prior: 50624504!
put: aCar at: aPosition

	| acc |
	
	aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ].

	self remove: aCar.	acc := 0 * kilometer.
	sectors  do: [:sector | (aPosition > (acc +  sector length)) ifTrue: [acc := acc + sector length ] ifFalse: [sector put: aCar at: aPosition - acc.
																					  ^self]]."
	ix := 1.
	sector := sectors at: ix. 

	[aPosition > (acc +  sector length)] whileTrue: [
		acc := acc + sector length.
		ix := ix + 1.
		sector := sectors at: ix.
	].

	sector put: aCar at: aPosition - acc."! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 14:34:31'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 14:34:32'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 14:34:32'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 14:34:32'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 14:34:32'!
PASSED!
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 14:34:56' prior: 50630501!
put: aCar at: aPosition

	| acc |
	
	aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ].

	self remove: aCar.	acc := 0 * kilometer.
	sectors  do: [:sector | (aPosition > (acc +  sector length)) ifTrue: [acc := acc + sector length ] ifFalse: [sector put: aCar at: aPosition - acc.
																					  ^self]].! !
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 14:35:11' prior: 50630610!
put: aCar at: aPosition

	| acc |
	aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ].
	self remove: aCar.	
	acc := 0 * kilometer.
	
	sectors  do: [:sector | (aPosition > (acc +  sector length)) ifTrue: [acc := acc + sector length ] ifFalse: [sector put: aCar at: aPosition - acc.
																					  ^self]].! !
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 14:36:14' prior: 50630624!
put: aCar at: aPosition

	| acc |
	aPosition > self length ifTrue: [ self error: self class cannotPlacedCarErrorDescription ].
	self remove: aCar.	
	acc := 0 * kilometer.
	
	sectors  do: [:sector | (aPosition > (acc +  sector length)) 
						ifTrue: [
							acc := acc + sector length ] 
						ifFalse: [
							sector put: aCar at: aPosition - acc.
							^self ]
												].! !
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 14:38:09' prior: 50624532!
sectorOf: aCar ifNone: aBlock
	 | ix |
		sectors detect: [:sector | sector includes: aCar] ifNone: [^ aBlock value.] .
	
	ix := 1.
	[ix <= sectors size] whileTrue: [ | sector |
		sector :=	sectors at: ix.
		(sector includes: aCar) ifTrue: [ ^ sector ].
		ix := ix + 1.
	].

	^ aBlock value.! !
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 14:38:50' prior: 50630653!
sectorOf: aCar ifNone: aBlock
	 
		^sectors detect: [:sector | sector includes: aCar] ifNone: [^ aBlock value.] .
	
	"ix := 1.
	[ix <= sectors size] whileTrue: [ | sector |
		sector :=	sectors at: ix.
		(sector includes: aCar) ifTrue: [ ^ sector ].
		ix := ix + 1.
	].

	^ aBlock value."! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 14:38:55'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 14:38:55'!
PASSED!
!Track methodsFor: 'car position' stamp: 'af 5/7/2023 14:39:11' prior: 50630666!
sectorOf: aCar ifNone: aBlock	^sectors detect: [:sector | sector includes: aCar] ifNone: [^ aBlock value.] .! !

!testRun: #FormulaOneTest #test01SectorLengthMustBePositive stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test02ACarCanNotBePlacedInAKilometerGreaterThanSectorLength stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test03CarCannotActivateTurboInNonTurboSector stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test04CarCannotActivateTurboWhenNoCarAhead stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test05CarCanActivateTurboWhenLessThanASecondBehindAnotherCar stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test06CarCannotActivateTurboWhenMoreThanASecondBehindAnotherCar stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test07TrackMustHaveSectors stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test08TheLengthOfATrackShouldBeTheSumOfItsSectors stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test09ACarCanNotBePlacedInAKilometerGreaterThanTrackLength stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test10TrackShouldPlaceCarInKilometerWithinSector stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test11TrackShouldKnowCarsInRunning stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test12CarCannotBeInMoreThanOneSectorAtATime stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test13GrandPrixLengthShouldBeTrackLengthTimesNumberOfLaps stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test14TwoCarsCanBeAtTheSameDistanceFromStart stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test15ACarStoppedShouldNotMoveAfterSomeTime stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test16ACarSpeedingShouldMoveAfterSomeTime stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test17GrandPrixKnowsSectorOfCar stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test18GrandPrixKnowsSectorOfCarAfterSomeTime stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test19GrandPrixMovesCarsBetweenSectors stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test20FirstTurboIncrementsSpeedByTwentyPercent stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test21SecondTurboSpeedsByTenPercent stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test22ThirdTurboSpeedsByFivePercent stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test23AfterThridTurbo_TurboIsExhausted stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test24CanNotActivateTurboWhenTurboIsActivated stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!testRun: #FormulaOneTest #test25CanNotDeactivateTurboWhenIsDeactivated stamp: 'af 5/7/2023 14:39:20'!
PASSED!

!classRemoval: #Track stamp: 'af 5/7/2023 14:46:05'!
Object subclass: #Track
	instanceVariableNames: 'sectors driversDistanceFromBeginning'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #Sector stamp: 'af 5/7/2023 14:46:05'!
Object subclass: #Sector
	instanceVariableNames: 'cars length withTurbo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #GrandPrix stamp: 'af 5/7/2023 14:46:05'!
Object subclass: #GrandPrix
	instanceVariableNames: 'track numberOfLaps'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneCar stamp: 'af 5/7/2023 14:46:05'!
Object subclass: #FormulaOneCar
	instanceVariableNames: 'grandPrix driver speed turboActivated traveledDistance currentSector turboActivations'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

!classRemoval: #FormulaOneTest stamp: 'af 5/7/2023 14:46:05'!
TestCase subclass: #FormulaOneTest
	instanceVariableNames: 'sector24KmTurbo schumacher1 hamilton1'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2022-1C-Parcial-1'!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\Parciales\2022-1c\1erParcial\ISW1-2022-1C-Parcial-1-Resolucion.st----!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\Parciales\2022-1c\Recu1erParcial\CustomerImporter-Recu-1er-Parcial.st----!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 16:04:40'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 16:04:40'!
PASSED!

Address subclass: #OldAddress
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #OldAddress category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 16:06:18'!
Address subclass: #OldAddress
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

Address subclass: #NewAddress
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #NewAddress category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 16:06:23'!
Address subclass: #NewAddress
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!OldAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:07:02' overrides: 50632736!
hasNewZipCode
	
	^zipCode isKindOf: String! !
!NewAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:07:02' overrides: 50632736!
hasNewZipCode
	
	^zipCode isKindOf: String! !

!methodRemoval: Address #hasNewZipCode stamp: 'af 5/7/2023 16:07:03'!
hasNewZipCode
	
	^zipCode isKindOf: String!
!Address methodsFor: 'zip code' stamp: 'af 5/7/2023 16:07:25'!
hasNewZipCode
	
	^zipCode isKindOf: String! !
!NewAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:07:45' prior: 50633568 overrides: 50633576!
hasNewZipCode
	^true.! !
!OldAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:07:56' prior: 50633563 overrides: 50633576!
hasNewZipCode	^false.! !

Object subclass: #Address
	instanceVariableNames: 'streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Address category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 16:14:07'!
Object subclass: #Address
	instanceVariableNames: 'streetName streetNumber town zipCode province'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:14:18'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 16:14:18'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 16:14:19'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 16:14:19'!
PASSED!
!Address class methodsFor: 'nil' stamp: 'af 5/7/2023 16:15:48'!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province! !
!Address class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:17:02' prior: 50633695!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	(zipCode isKindOf: String) ifTrue: [].
	(zipCode isKindOf: String) ifTrue: [].! !
!Address class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:17:42' prior: 50633701!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	(zipCode isKindOf: String) ifTrue: [].
	(zipCode isKindOf: Integer) ifTrue: [] ifFalse: [].! !
!Address class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:19:23'!
invalidTypeOfAddressErrorDescription

	^ 'An address must be an integer in case of old addresses or a string in case of new ones. Cant be neither.'! !
!Address class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:20:13' prior: 50633710!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	(zipCode isKindOf: String) ifTrue: [].
	(zipCode isKindOf: Integer) ifTrue: [] ifFalse: [self error: self invalidTypeOfAddressErrorDescription ].! !
!Address class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:21:16' prior: 50633727!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	(zipCode isKindOf: String) ifTrue: [NewAddress newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province ].
	
	(zipCode isKindOf: Integer) ifTrue: [OldAddress newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province] 
	ifFalse: [self error: self invalidTypeOfAddressErrorDescription ].! !
!Address class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:21:50' prior: 50633719!
invalidTypeOfAddressErrorDescription

	^ 'A zip code must be an integer in case of old addresses or a string in case of new ones. Cant be neither.'! !
!NewAddress class methodsFor: 'nil' stamp: 'af 5/7/2023 16:22:11' overrides: 50633738!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	! !
!OldAddress class methodsFor: 'nil' stamp: 'af 5/7/2023 16:22:24' overrides: 50633738!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	! !
!NewAddress class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:27:37' prior: 50633763 overrides: 50633738!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	^(self new) initializeAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province.! !
!OldAddress class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:27:53' prior: 50633769 overrides: 50633738!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	^(self new) initializeAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province.! !
!OldAddress methodsFor: 'nil' stamp: 'af 5/7/2023 16:29:01'!
initializeAt: streetName1 number: streetNumber1 townOf: town1 zip: zipCode1 inProvince: province1.
	streetName  := streetName1 .! !
!OldAddress methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:30:44' prior: 50633795!
initializeAt: aStreetName number: aStreetNumber townOf: aTown zip: aZipCode inProvince: aProvince.
	streetName  := aStreetName .
	streetNumber  := aStreetNumber .
	town  := aTown .
	zipCode  := aZipCode .
	province  := aProvince .
	! !
!NewAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:30:54'!
initializeAt: aStreetName number: aStreetNumber townOf: aTown zip: aZipCode inProvince: aProvince.
	streetName  := aStreetName .
	streetNumber  := aStreetNumber .
	town  := aTown .
	zipCode  := aZipCode .
	province  := aProvince .
	! !

direccionVieja := Address newAt: 'callecita'  number: 15 townOf: 'pueblin' zip: 1456 inProvince: 'CABA' .!

direccionModerna!

direccionModerna := Address newAt: 'callecita'  number: 15 townOf: 'pueblin' zip: 'zip1234' inProvince: 'CABA' .!

direccionVieja !
!Address class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:34:49' prior: 50633738!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
	(zipCode isKindOf: String) ifTrue: [^NewAddress newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province ].
	
	(zipCode isKindOf: Integer) ifTrue: [^OldAddress newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province] 
	ifFalse: [self error: self invalidTypeOfAddressErrorDescription ].! !

direccionVieja := Address newAt: 'callecita'  number: 15 townOf: 'pueblin' zip: 1456 inProvince: 'CABA' .!

direccionModerna := Address newAt: 'callecita'  number: 15 townOf: 'pueblin' zip: 'zip1234' inProvince: 'CABA' .!
!Address methodsFor: 'zip code' stamp: 'af 5/7/2023 16:39:58' prior: 50633576!
hasNewZipCode
	
	^self subclassResponsibility .! !
!Address methodsFor: 'zip code' stamp: 'af 5/7/2023 16:40:17' prior: 50632740!
hasOldZipCode
	^self subclassResponsibility .! !
!NewAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:40:39' overrides: 50633861!
hasOldZipCode
	^false .! !
!OldAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:40:48' overrides: 50633861!
hasOldZipCode
	^true .! !
!Address methodsFor: 'street' stamp: 'af 5/7/2023 16:40:59' prior: 50632710!
isAt: aStreetName
	^streetName = aStreetName ! !
!Address methodsFor: 'street' stamp: 'af 5/7/2023 16:41:09' prior: 50632714!
streetName
	^streetName ! !
!Address methodsFor: 'zip code' stamp: 'af 5/7/2023 16:42:00' prior: 50632744!
newZipCodeIfNone: aNoneBlock

	^self subclassResponsibility .
	! !
!Address methodsFor: 'zip code' stamp: 'af 5/7/2023 16:42:17' prior: 50633882!
newZipCodeIfNone: aNoneBlock
	^self subclassResponsibility .
	! !
!NewAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:42:44' overrides: 50633887!
newZipCodeIfNone: aNoneBlock

	^zipCode.
! !
!OldAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:42:58' overrides: 50633887!
newZipCodeIfNone: aNoneBlock

	^ aNoneBlock value.
! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:43:13'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 16:43:13'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:43:13'!
ERROR!
!Address methodsFor: 'zip code' stamp: 'af 5/7/2023 16:43:51' prior: 50632750!
oldZipCodeIfNone: aNoneBlock

	^self subclassResponsibility .! !
!Address methodsFor: 'zip code' stamp: 'af 5/7/2023 16:43:57' prior: 50633996!
oldZipCodeIfNone: aNoneBlock
	^self subclassResponsibility .! !
!NewAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:44:16' overrides: 50634001!
oldZipCodeIfNone: aNoneBlock

	^aNoneBlock value.! !
!OldAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:44:30' overrides: 50634001!
oldZipCodeIfNone: aNoneBlock

	^zipCode .! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:44:35'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 16:44:35'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:44:35'!
ERROR!
!OldAddress methodsFor: 'zip code' stamp: 'af 5/7/2023 16:45:19' prior: 50633585 overrides: 50633856!
hasNewZipCode
	^false.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:45:28'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 16:45:28'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 16:45:29'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:45:29'!
ERROR!
!CustomerImporter methodsFor: 'address' stamp: 'af 5/7/2023 16:54:13' prior: 50632961!
importAddress

	| newAddress zipCode importedZipCode newZipcodeOldZipCode province |

	self assertCustomerWasImported.
	self assertValidAddressRecord.
	"newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	zipCode := record fifth."
	"newAddress := Address new."
		newAddress := Address newAt: (record second) number: (record third asNumber) townOf: (record fourth) zip: (record fifth) inProvince: province.
	
			
	newAddress zipCode: importedZipCode.
	newAddress province: record sixth.
	
	newCustomer addAddress: newAddress.
	! !
!NewAddress class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 16:54:43' prior: 50633776 overrides: 50633832!
newAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province
"zipCode first isDigit 
		ifTrue: [ 
			(zipCode allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid old zipcode' ].
			importedZipCode := zipCode asNumber.
			(importedZipCode between: 1000 and: 9999) ifFalse: [ self error: 'Invalid old zipcode' ]]
		ifFalse: [
	zipCode first isLetter 
		ifTrue: [
			zipCode size ~= 8 ifTrue: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode := zipCode copyFrom: 2 to: 5.
			(newZipcodeOldZipCode allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode asNumber > 999 ifFalse: [ self error: 'Invalid new zipcode' ].
			((zipCode last: 3) allSatisfy: [ :aChar | aChar isLetter ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			importedZipCode := zipCode ]
		ifFalse: [ self error: 'Invalid identification type' ]]."
	^(self new) initializeAt: streetName number: streetNumber townOf: town zip: zipCode inProvince: province.! !
!CustomerImporter methodsFor: 'address' stamp: 'af 5/7/2023 16:56:11' prior: 50634210!
importAddress

	| newAddress |
	self assertCustomerWasImported.
	self assertValidAddressRecord.	newAddress := Address newAt: (record second) number: (record third asNumber) townOf: (record fourth) zip: (record fifth) inProvince: (record sixth).
	newCustomer addAddress: newAddress.
	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 16:56:23'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 16:56:23'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 16:56:24'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 16:56:24'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 16:56:24'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 16:56:24'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 16:56:24'!
FAILURE!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 16:56:24'!
FAILURE!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 16:56:24'!
FAILURE!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 16:56:24'!
FAILURE!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 16:56:24'!
FAILURE!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 16:56:24'!
FAILURE!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 16:56:24'!
FAILURE!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 16:56:24'!
FAILURE!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 16:56:24'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 16:56:24'!
FAILURE!
!CustomerImporter methodsFor: 'address' stamp: 'af 5/7/2023 17:05:42' prior: 50634269!
importAddress

	| newAddress zipCodeRecord importedZipCode newZipcodeOldZipCode |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	
	zipCodeRecord := record fifth.

	zipCodeRecord first isDigit 
		ifTrue: [ 
			(zipCodeRecord allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid old zipcode' ].
			importedZipCode := zipCodeRecord asNumber.
			(importedZipCode between: 1000 and: 9999) ifFalse: [ self error: 'Invalid old zipcode' ]]
		ifFalse: [
	zipCodeRecord first isLetter 
		ifTrue: [
			zipCodeRecord size ~= 8 ifTrue: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode := zipCodeRecord copyFrom: 2 to: 5.
			(newZipcodeOldZipCode allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode asNumber > 999 ifFalse: [ self error: 'Invalid new zipcode' ].
			((zipCodeRecord last: 3) allSatisfy: [ :aChar | aChar isLetter ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			importedZipCode := zipCodeRecord ]
		ifFalse: [ self error: 'Invalid identification type' ]].
			
	newAddress zipCode: importedZipCode.
	newAddress province: record sixth.
	
	newCustomer addAddress: newAddress.
	 
	"COMIENZO MIO""
	self assertCustomerWasImported.
	self assertValidAddressRecord.	newAddress := Address newAt: (record second) number: (record third asNumber) townOf: (record fourth) zip: (record fifth) inProvince: (record sixth).
	newCustomer addAddress: newAddress."
	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 17:05:47'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 17:05:47'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 17:05:48'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 17:05:48'!
ERROR!
!CustomerImporter methodsFor: 'address' stamp: 'af 5/7/2023 17:08:25' prior: 50634374!
importAddress

	| newAddress zipCodeRecord importedZipCode newZipcodeOldZipCode |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	
	zipCodeRecord := record fifth.		
	
	zipCodeRecord first isDigit 
		ifTrue: [ 
			(zipCodeRecord allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid old zipcode' ].
			importedZipCode := zipCodeRecord asNumber.
			(importedZipCode between: 1000 and: 9999) ifFalse: [ self error: 'Invalid old zipcode' ]]
		ifFalse: [
	zipCodeRecord first isLetter 
		ifTrue: [
			zipCodeRecord size ~= 8 ifTrue: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode := zipCodeRecord copyFrom: 2 to: 5.
			(newZipcodeOldZipCode allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode asNumber > 999 ifFalse: [ self error: 'Invalid new zipcode' ].
			((zipCodeRecord last: 3) allSatisfy: [ :aChar | aChar isLetter ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			importedZipCode := zipCodeRecord ]
		ifFalse: [ self error: 'Invalid identification type' ]].
	
	
	"newAddress := Address new.
	newAddress streetName: record second.
	newAddress streetNumber: record third asNumber .
	newAddress town: record fourth.
	newAddress zipCode: importedZipCode.
	newAddress province: record sixth.
	
	newCustomer addAddress: newAddress."
	 	newAddress := Address newAt: (record second) number: (record third asNumber) townOf: (record fourth) zip: importedZipCode inProvince: (record sixth).
	newCustomer addAddress: newAddress.
	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 17:08:36'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 17:08:36'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 17:08:37'!
PASSED!

!methodRemoval: Address #zipCode: stamp: 'af 5/7/2023 17:10:28'!
zipCode: aZipCode

	zipCode := aZipCode!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 17:10:33'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 17:10:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 17:10:33'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 17:10:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 17:10:34'!
PASSED!

!methodRemoval: Address #streetName: stamp: 'af 5/7/2023 17:10:41'!
streetName: aStreetName

	streetName := aStreetName !

!methodRemoval: Address #streetNumber: stamp: 'af 5/7/2023 17:10:47'!
streetNumber: aStreetNumber

	streetNumber := aStreetNumber !

!methodRemoval: Address #province: stamp: 'af 5/7/2023 17:10:51'!
province: aProvince

	province := aProvince
	!

!methodRemoval: Address #town: stamp: 'af 5/7/2023 17:10:54'!
town: aTown

	town := aTown!
!Address methodsFor: 'zip code' stamp: 'af 5/7/2023 17:11:25' prior: 50632756!
zipCode
	^zipCode! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 17:11:56'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 17:11:56'!
PASSED!
!Customer methodsFor: 'addresses' stamp: 'af 5/7/2023 17:14:09' prior: 50632780!
addAddress: anAddress
	addresses add: anAddress ! !
!Customer methodsFor: 'addresses' stamp: 'af 5/7/2023 17:14:29' prior: 50632784!
addressAt: aStreetName ifNone: aNoneBlock
	^addresses detect: [ :address | address isAt: aStreetName ] ifNone: aNoneBlock ! !
!Customer methodsFor: 'addresses' stamp: 'af 5/7/2023 17:14:36' prior: 50632794!
isAddressesEmpty
	^addresses isEmpty ! !

Object subclass: #Identification
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Identification category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 17:15:18'!
Object subclass: #Identification
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

Identification subclass: #Cuit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Cuit category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 17:15:41'!
Identification subclass: #Cuit
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

Identification subclass: #Dni
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Dni category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 17:15:46'!
Identification subclass: #Dni
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 17:16:11'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 17:16:11'!
PASSED!

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses identification'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Customer category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 17:21:30'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName identificationType identificationNumber addresses identification'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:22:19' prior: 50632812!
cuitNumberIfNone: aNoneClosure
	^identification hasCUITAsIdentification.! !
!Cuit methodsFor: 'nil' stamp: 'af 5/7/2023 17:24:14'!
cuitNumberIfNone: aNoneClosure

	^self hasCUITAsIdentification 
		ifTrue: [ 'identificationNumber' ]
		ifFalse: aNoneClosure! !
!Dni methodsFor: 'nil' stamp: 'af 5/7/2023 17:24:28'!
cuitNumberIfNone: aNoneClosure

	^self hasCUITAsIdentification 
		ifTrue: [ 'identificationNumber' ]
		ifFalse: aNoneClosure! !

Object subclass: #Identification
	instanceVariableNames: 'identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Identification category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 17:25:37'!
Object subclass: #Identification
	instanceVariableNames: 'identificationNumber'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName addresses identification'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!

!classDefinition: #Customer category: 'CustomerImporter-Recu-1er-Parcial' stamp: 'af 5/7/2023 17:26:12'!
Object subclass: #Customer
	instanceVariableNames: 'id firstName lastName addresses identification'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'CustomerImporter-Recu-1er-Parcial'!
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:27:26' prior: 50632819!
dniNumberIfNone: aNoneBlock

	^identification dniNumberIfNone: aNoneBlock! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:27:40' prior: 50635036!
cuitNumberIfNone: aNoneClosure
	^identification cuitNumberIfNone: aNoneClosure.
! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:27:54' prior: 50635084!
dniNumberIfNone: aNoneBlock
	^identification dniNumberIfNone: aNoneBlock! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:28:27' prior: 50632827!
hasCUITAsIdentification

	^identification  hasCUITAsIdentification.! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:28:29' prior: 50635102!
hasCUITAsIdentification

	^identification hasCUITAsIdentification.! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:28:46' prior: 50632832!
hasDNIAsIdentification	^identification  hasDNIAsIdentification .! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:29:10' prior: 50632837!
identificationNumber
	^identification identificationNumber.! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:30:12' prior: 50632841!
identificationNumber: anIdentificationNumber
	identification := Identification newWith: anIdentificationNumber .! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:30:48' prior: 50632847!
identificationType

	^identification idenidentificationType.! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:31:27' prior: 50632851!
identificationType: anIdentificationType
	identification identificationType: anIdentificationType! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 17:37:40'!
addIdentification: anIdentificationNumber
	^Identification newWith:  anIdentificationNumber! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 17:38:10'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 17:38:10'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 17:38:10'!
ERROR!
!Cuit methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 17:38:51'!
hasCUITAsIdentification
^true.! !
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 17:39:27'!
hasCUITAsIdentification
^false.! !
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 17:39:55' prior: 50635047!
cuitNumberIfNone: aNoneClosure

	^aNoneClosure value.! !
!Cuit methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 17:40:14' prior: 50635041!
cuitNumberIfNone: aNoneClosure

	^identificationNumber.! !
!Cuit methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 17:40:55'!
hasDNIAsIdentification
	^false .! !
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 17:41:08'!
hasDNIAsIdentification
	^true.! !
!Identification class methodsFor: 'nil' stamp: 'af 5/7/2023 18:38:30'!
newWith: anIdentificationNumber
	^(self new) initializeWith: anIdentificationNumber! !
!Cuit methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 18:39:19'!
initializeWith: anIdentificationNumber
	identificationNumber  := anIdentificationNumber ! !
!Dni methodsFor: 'nil' stamp: 'af 5/7/2023 18:39:28'!
initializeWith: anIdentificationNumber
	identificationNumber  := anIdentificationNumber ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 18:39:40'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 18:39:40'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 18:39:40'!
ERROR!
!Identification methodsFor: 'nil' stamp: 'af 5/7/2023 18:41:09'!
identificationNumber
	^identificationNumber ! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 18:43:34'!
addIdentification: anIdentificationNumber of: identificationType
	^Identification newWith:  anIdentificationNumber of: identificationType
	"^identificationType = 'D'"! !

!methodRemoval: Customer #addIdentification: stamp: 'af 5/7/2023 18:43:41'!
addIdentification: anIdentificationNumber
	^Identification newWith:  anIdentificationNumber!
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 18:46:08'!
identificationNumber: anIdentificationNumber of: anIdentificationType
	identification := Identification newWith: anIdentificationNumber of: anIdentificationType.! !

!methodRemoval: Customer #identificationNumber: stamp: 'af 5/7/2023 18:46:13'!
identificationNumber: anIdentificationNumber
	identification := Identification newWith: anIdentificationNumber .!
!Identification class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 18:47:23'!
newWith: anIdentificationNumber of: anIdentificationType
	 anIdentificationType = 'D' ifTrue: [].
	^(self new) initializeWith: anIdentificationNumber! !

!methodRemoval: Identification class #newWith: stamp: 'af 5/7/2023 18:47:56'!
newWith: anIdentificationNumber
	^(self new) initializeWith: anIdentificationNumber!
!Identification class methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 18:49:59' prior: 50635401!
newWith: anIdentificationNumber of: anIdentificationType
	 anIdentificationType = 'D' ifTrue: [^Dni newWith: anIdentificationNumber ].
	 anIdentificationType = 'C' ifTrue: [^Cuit newWith: anIdentificationNumber ]
	ifFalse: [self error: 'Tipo de identificacion no valido'].
	! !
!Cuit class methodsFor: 'nil' stamp: 'af 5/7/2023 18:51:20'!
newWith: anIdentificationNumber
	 ^(self new) initializeWith: 	anIdentificationNumber.! !
!Dni class methodsFor: 'nil' stamp: 'af 5/7/2023 18:51:47'!
newWith: anIdentificationNumber
	 ^(self new) initializeWith: 	anIdentificationNumber.! !


dni123 := Identification newWith:123  of: 'D'!

cuit456 := Identification newWith:456 of: 'C'!
!Identification methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 18:54:39'!
identificationType

	^self subclassResponsibility .! !
!Cuit methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 18:54:54' overrides: 50635440!
identificationType

	^'C'.! !
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 18:55:06' overrides: 50635440!
identificationType

	^'D'.! !
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 18:55:09' prior: 50635449 overrides: 50635440!
identificationType
	^'D'.! !
!Customer methodsFor: 'identification' stamp: 'af 5/7/2023 18:55:41' prior: 50635129!
identificationType

	^identification identificationType.! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 18:56:21'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 18:56:21'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 18:56:21'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 18:56:21'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 18:56:21'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 18:56:21'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 18:56:21'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 18:56:22'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 18:56:22'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 18:56:22'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 18:56:22'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 18:56:22'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 18:56:22'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 18:56:22'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 18:56:22'!
ERROR!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 18:59:15' prior: 50632898!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.

	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: idNumber of: idType.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 18:59:23'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 18:59:23'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 18:59:24'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 18:59:24'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 18:59:24'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 18:59:24'!
ERROR!
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:01:05'!
dniNumberIfNone: aNoneClosure

	^identificationNumber .! !
!Cuit methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:01:25'!
dniNumberIfNone: aNoneClosure

	^aNoneClosure value .! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:01:32'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:01:32'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:01:32'!
FAILURE!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:05:49' prior: 50635554!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.

	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: (idNumber asNumber) of: idType.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:06:03'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:06:03'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:06:20'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:06:20'!
ERROR!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:06:20'!
ERROR!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:06:57' prior: 50635800!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.

	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: (idNumber) of: idType.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:07:02'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:07:02'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:07:03'!
FAILURE!

!methodRemoval: Customer #addIdentification:of: stamp: 'af 5/7/2023 19:09:48'!
addIdentification: anIdentificationNumber of: identificationType
	^Identification newWith:  anIdentificationNumber of: identificationType
	"^identificationType = 'D'"!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:10:34' prior: 50636030!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.

	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: idNumber of: idType .
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:10:38'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:10:38'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:10:38'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:11:56'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:11:57'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:11:57'!
FAILURE!
!Cuit methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:12:38' prior: 50635250!
cuitNumberIfNone: aNoneClosure

	^self identificationNumber.! !
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:12:53' prior: 50635695!
dniNumberIfNone: aNoneClosure

	^self identificationNumber .! !
!Identification methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:13:05' prior: 50635370!
identificationNumber
	^identificationNumber asNumber ! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:13:16'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:13:16'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:13:16'!
ERROR!
!Identification methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:13:35' prior: 50636428!
identificationNumber
	^identificationNumber! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:14:37' prior: 50636180!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: idNumber of: idType .
	system add: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:16:15' prior: 50636530!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			idNumber := dniNumber asNumber .
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: idNumber of: idType .
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:16:23'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:16:23'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:16:23'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:16:23'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:16:23'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:16:24'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:16:24'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:16:24'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:16:24'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:16:24'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:16:24'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:16:40'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:16:40'!
ERROR!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:16:40'!
ERROR!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:17:19' prior: 50636577!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			"idNumber := dniNumber asNumber . ESTO LO AGREGUE YO"
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: idNumber of: idType .
	system add: newCustomer! !
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:17:57' prior: 50635273!
initializeWith: anIdentificationNumber
	identificationNumber  := anIdentificationNumber asNumber .! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:18:00'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:18:00'!
ERROR!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:18:00'!
ERROR!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:18:00'!
ERROR!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:18:00'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:18:00'!
ERROR!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:18:01'!
ERROR!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:18:01'!
ERROR!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:18:01'!
ERROR!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:18:01'!
ERROR!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:18:01'!
ERROR!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:18:01'!
ERROR!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:18:01'!
ERROR!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:18:01'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:18:01'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:18:19'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:18:19'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'af 5/7/2023 19:19:54' prior: 50632109!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system..

	self assertImportedRightNumberOfCustomers.
	"self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly "! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:20:04'!
PASSED!
!ImportTest methodsFor: 'tests' stamp: 'af 5/7/2023 19:20:09' prior: 50636961!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	"self assertJuanPerezWasImportedCorrectly "! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:20:12'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:20:12'!
ERROR!
!ImportTest methodsFor: 'tests' stamp: 'af 5/7/2023 19:20:36' prior: 50636975!
test01ValidDataIsImportedCorrectly

	CustomerImporter valueFrom: self validImportData into: system..

	self assertImportedRightNumberOfCustomers.
	self assertPepeSanchezWasImportedCorrecty.
	self assertJuanPerezWasImportedCorrectly! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:21:45' prior: 50636808!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			"idNumber := dniNumber asNumber . ESTO LO AGREGUE YO"
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: idNumber of: idType .
	self error: 'llegue hasta aca'.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:21:51'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:21:51'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:21:51'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:25:04'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:25:04'!
ERROR!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:25:46' prior: 50637003!
importCustomer

	| idType idNumber |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			"idNumber := dniNumber asNumber . ESTO LO AGREGUE YO"
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newCustomer identificationNumber: idNumber of: idType .
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:25:56'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:25:56'!
ERROR!
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:27:13' prior: 50636857!
initializeWith: anIdentificationNumber
	identificationNumber  := anIdentificationNumber .! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:27:17'!
FAILURE!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:27:17'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:27:17'!
FAILURE!
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:28:20' prior: 50636422!
dniNumberIfNone: aNoneClosure

	^self identificationNumber asNumber .! !
!Dni methodsFor: 'as yet unclassified' stamp: 'af 5/7/2023 19:28:28' prior: 50637307!
dniNumberIfNone: aNoneClosure

	^(self identificationNumber) asNumber .! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:28:39'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:28:43'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:28:44'!
PASSED!

!methodRemoval: Customer #identificationType: stamp: 'af 5/7/2023 19:28:58'!
identificationType: anIdentificationType
	identification identificationType: anIdentificationType!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:29:04'!
PASSED!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:44:44'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:44:44'!
PASSED!
!Customer methodsFor: 'initialization' stamp: 'af 5/7/2023 19:47:25'!
initializeWithName: afirstName last: alastName id: anIdentification

	super initialize.
	addresses := OrderedCollection new.! !
!Customer methodsFor: 'initialization' stamp: 'af 5/7/2023 19:47:58' prior: 50637601!
initializeWithName: afirstName last: aLastName id: anIdentification

	super initialize.
	addresses := OrderedCollection new.
	firstName  := afirstName .
	lastName  := aLastName.
	identification  := anIdentification .! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:50:16' prior: 50637151!
importCustomer

	| idType idNumber newIdentification |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			"idNumber := dniNumber asNumber . ESTO LO AGREGUE YO"
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].


	"newCustomer identificationType: idType.
	newCustomer identificationNumber: idNumber."
	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer identificationNumber: idNumber of: idType .
	system add: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:50:26' prior: 50637618!
importCustomer

	| idType idNumber newIdentification |
	
	self assertValidCustomerRecord.
	newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			"idNumber := dniNumber asNumber . ESTO LO AGREGUE YO"
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer identificationNumber: idNumber of: idType .
	system add: newCustomer! !
!Customer class methodsFor: 'nil' stamp: 'af 5/7/2023 19:52:13'!
newWithInitializeWithName: afirstName last: aLastName id: anIdentification
	^(self new) initializeWithName: afirstName last: aLastName id: anIdentification.! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:54:14' prior: 50637670!
importCustomer

	| idType idNumber newIdentification |
	
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			"idNumber := dniNumber asNumber . ESTO LO AGREGUE YO"
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].
	
	"newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third."

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	"newCustomer identificationNumber: idNumber of: idType ."
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:54:19'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:54:19'!
PASSED!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:54:40' prior: 50637726!
importCustomer

	| idType idNumber newIdentification |
	
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].
	
	"newCustomer := Customer new.
	newCustomer firstName: record second.
	newCustomer lastName: record third."

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	"newCustomer identificationNumber: idNumber of: idType ."
	system add: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:54:56' prior: 50637870!
importCustomer

	| idType idNumber newIdentification |
	
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:56:20' prior: 50637921!
importCustomer

	| idType idNumber newIdentification |
	
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 19:56:28'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 19:56:28'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 19:56:28'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 19:56:28'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 19:56:29'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 19:56:29'!
PASSED!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:58:45'!
checkValidCuit: idType  andNumber: idNumber
idType = 'C' ifTrue: [ 
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		
		ifFalse: [ self error: 'Invalid identification type' ].! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 19:59:48'!
checkValidDni: idType  andNumber: idNumber
idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:00:09' prior: 50637966!
importCustomer
	| idType idNumber newIdentification |
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:00:59' prior: 50638141!
importCustomer
	| idType idNumber newIdentification |
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.
	self checkValidDni: idType andNumber: idNumber .	self checkValidCuit: idType andNumber: idNumber .

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:01:03'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 20:01:03'!
FAILURE!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 20:01:03'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 20:01:03'!
FAILURE!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:01:27' prior: 50638186!
importCustomer
	| idType idNumber newIdentification |
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.
	idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		ifFalse: [ 
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ]].

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 20:01:35'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 20:01:36'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 20:01:36'!
PASSED!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:02:25' prior: 50638296!
importCustomer
	| idType idNumber newIdentification |
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.	
	"idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		
		ifFalse: [ "
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ].

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:02:31'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 20:02:31'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 20:02:31'!
FAILURE!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 20:02:32'!
FAILURE!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 20:02:32'!
FAILURE!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 20:02:32'!
FAILURE!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 20:02:32'!
FAILURE!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 20:02:32'!
FAILURE!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 20:02:32'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 20:02:32'!
FAILURE!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:03:25' prior: 50638433!
importCustomer
	| idType idNumber newIdentification |
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.	
	"idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		
		ifFalse: [ "
	self checkValidDni: idType andNumber: idNumber .
	idType = 'C' 
		ifTrue: [  
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		ifFalse: [ self error: 'Invalid identification type' ].

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:03:28'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 20:03:28'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 20:03:28'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:03:35'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:03:35'!
ERROR!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:05:27' prior: 50638102!
checkValidCuit: idType  andNumber: idNumber
idType = 'C' ifTrue: [ 
			"'23-25666777-9' size 13 "
			(idNumber size between: 12 and: 13) ifFalse: [ self error: 'Invalid CUIT number' ].
			(idNumber third = $- and: [ idNumber penultimate = $- ]) ifFalse: [ self error: 'Invalid CUIT number' ].
			({ '20'. '23'. '24'. '25'. '26'. '27'. '30'. '33'. '34'. } includes: (idNumber first: 2)) ifFalse: [ self error: 'Invalid CUIT number' ].
			idNumber last isDigit ifFalse: [ self error: 'Invalid CUIT number' ].
			((idNumber copyFrom: 4 to: idNumber size - 2) allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid CUIT number' ]]
		
		ifFalse: [
			idType  = 'D' ifFalse: [self error: 'Invalid identification type'  ].].! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:05:39'!
ERROR!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 20:05:39'!
FAILURE!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 20:05:39'!
FAILURE!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 20:05:39'!
FAILURE!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 20:05:39'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 20:05:40'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 20:05:40'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 20:05:40'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 20:05:40'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 20:05:40'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 20:05:40'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 20:05:40'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 20:05:40'!
FAILURE!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:05:44'!
ERROR!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:05:44'!
ERROR!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:06:57' prior: 50638570!
importCustomer
	| idType idNumber newIdentification |
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.	
	"idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		
		ifFalse: [ "
	self checkValidDni: idType andNumber: idNumber .
	"self checkValidCuit:  andNumber: "
	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:07:11' prior: 50638840!
importCustomer
	| idType idNumber newIdentification |
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.	
	"idType = 'D' 
		ifTrue: [ | dniNumber | 
			(idNumber allSatisfy: [ :idChar | idChar isDigit ]) ifFalse: [ self error: 'Invalid DNI number' ].
			dniNumber := Integer readFrom: idNumber readStream.
			
			(dniNumber between: 1 and: 99999999) ifFalse: [ self error: 'Invalid DNI number' ]]
		
		ifFalse: [ "
	self checkValidDni: idType andNumber: idNumber .
	self checkValidCuit: idType andNumber: idNumber .
	"self checkValidCuit:  andNumber: "
	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 20:07:14'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 20:07:15'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 20:07:15'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 20:07:15'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 20:07:15'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 20:07:15'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 20:07:15'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 20:07:15'!
PASSED!
!CustomerImporter methodsFor: 'customer' stamp: 'af 5/7/2023 20:07:28' prior: 50638867!
importCustomer
	| idType idNumber newIdentification |
	self assertValidCustomerRecord.
	idType := record fourth.
	idNumber := record fifth.
	self checkValidDni: idType andNumber: idNumber .
	self checkValidCuit: idType andNumber: idNumber .

	newIdentification := Identification newWith: idNumber of:  idType.
	newCustomer  := Customer  newWithInitializeWithName:  record second last:  record third  id: newIdentification.
	system add: newCustomer! !
!CustomerImporter methodsFor: 'address' stamp: 'af 5/7/2023 20:41:41' prior: 50634523!
importAddress

	| newAddress zipCodeRecord importedZipCode newZipcodeOldZipCode |

	self assertCustomerWasImported.
	self assertValidAddressRecord.

	
	zipCodeRecord := record fifth.		
	
	zipCodeRecord first isDigit 
		ifTrue: [ 
			(zipCodeRecord allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid old zipcode' ].
			importedZipCode := zipCodeRecord asNumber.
			(importedZipCode between: 1000 and: 9999) ifFalse: [ self error: 'Invalid old zipcode' ]]
		ifFalse: [
	zipCodeRecord first isLetter 
		ifTrue: [
			zipCodeRecord size ~= 8 ifTrue: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode := zipCodeRecord copyFrom: 2 to: 5.
			(newZipcodeOldZipCode allSatisfy: [ :aChar | aChar isDigit ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			newZipcodeOldZipCode asNumber > 999 ifFalse: [ self error: 'Invalid new zipcode' ].
			((zipCodeRecord last: 3) allSatisfy: [ :aChar | aChar isLetter ]) ifFalse: [ self error: 'Invalid new zipcode' ].
			importedZipCode := zipCodeRecord ]
		ifFalse: [ self error: 'Invalid identification type' ]].
		newAddress := Address newAt: (record second) number: (record third asNumber) townOf: (record fourth) zip: importedZipCode inProvince: (record sixth).
	newCustomer addAddress: newAddress.
	! !

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 21:28:33'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 21:28:33'!
PASSED!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\Parciales\2021-2c\1erParcial\ISW1-2021-2C-1erParcial-Solution.st----!

!testRun: #ImportTest #test01ValidDataIsImportedCorrectly stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test02CanNotImportAddressWithoutCustomer stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test03DoesNotImportRecordsStartingWithCButMoreCharacters stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test04DoesNotImportRecordsStartingWithAButMoreCharacters stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test05CanNotImportAddressRecordWithLessThanSixFields stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test06CanNotImportAddressRecordWithMoreThanSixFields stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test07CanNotImportCustomerRecordWithLessThanFiveFields stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test08CanNotImportCustomerRecordWithMoreThanFiveFields stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test09CannotImportEmptyLine stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test10DNICannotBeLessThanOne stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test11DNICannotBeBiggerThan99999999 stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test12DNIMustBeAllDigits stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test13CuitSizeCannotBeLessThan12 stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test14CuitSizeCannotBeBiggerThan13 stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test15CuitMustHaveDashAtThridPosition stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test16CuitMustHaveDashAtPenultimatePosition stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test17CuitMustHaveValidHeader stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test18CuitMustHaveDigitAtEnd stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test19CuitMustHaveAllDigits stamp: 'af 5/7/2023 23:49:08'!
PASSED!

!testRun: #ImportTest #test20OldZipCodeMustBeAllDigits stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test21OldZipMustBeBiggerThan999 stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test22OldZipMustBeLessThan10000 stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test23NewZipCodeSizeCannotBeLessThan8 stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test24NewZipCodeSizeCannotBeBiggerThan8 stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test25NewZipCode4DigitsAfterFirstLetter stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test26NewZipCode4DigitsMustBeBiggerThan999 stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test27NewZipCodeMustEndWith3Letters stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test28IdTypeMustBeDNIOrCuit stamp: 'af 5/7/2023 23:49:09'!
PASSED!

!testRun: #ImportTest #test29ZipCodeMustBeOldOrNew stamp: 'af 5/7/2023 23:49:09'!
PASSED!

----End fileIn of C:\Users\fridm\Downloads\Stack-Exercise.st----!

!testRun: #OOStackTest #test01StackShouldBeEmptyWhenCreated stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test02PushAddElementsToTheStack stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test03PopRemovesElementsFromTheStack stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test04PopReturnsLastPushedObject stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test05StackBehavesLIFO stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test06TopReturnsLastPushedObject stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test07TopDoesNotRemoveObjectFromStack stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test08CanNotPopWhenThereAreNoObjectsInTheStack stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test09CanNotPopWhenThereAreNoObjectsInTheStackAndTheStackHadObjects stamp: 'af 5/8/2023 13:33:31'!
PASSED!

!testRun: #OOStackTest #test10CanNotTopWhenThereAreNoObjectsInTheStack stamp: 'af 5/8/2023 13:33:31'!
PASSED!

----SNAPSHOT----(8 May 2023 17:28:31) CuisUniversity-5706.image priorSource: 9465111!

----End fileIn of C:\Users\fridm\Downloads\ISW1-2023-1C-Parcial-1.st----!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:33:23'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:33:23'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:34:27' prior: 50641144!
calcularProfundidadDelSuelo
	
	| acc ix |
	^capasDeSueloDebajo sum: [:capaActual | capaActual altura].
"
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc."
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:34:35'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:34:35'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:34:35'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:35:38' prior: 50641287!
calcularProfundidadDelSuelo
	
	| acc ix |
	capasDeSueloDebajo ifEmpty: [0].
	^capasDeSueloDebajo sum: [:capaActual | capaActual altura].
"
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc."
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:35:45'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:35:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:35:45'!
ERROR!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:36:56'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:36:56'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:36:56'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:37:34' prior: 50641379!
calcularProfundidadDelSuelo
	
	| acc ix |
	"capasDeSueloDebajo ifEmpty: [0].
	^capasDeSueloDebajo sum: [:capaActual | capaActual altura]."

	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:37:38'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:37:38'!
PASSED!
!CapaDeSuelo methodsFor: 'initialization' stamp: 'af 5/8/2023 17:37:55' prior: 50640927!
initializeArenoso
	
	tipo := #Arenoso.
	altura := 0.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'af 5/8/2023 17:38:04' prior: 50640932!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := 0.! !
!CapaDeSuelo methodsFor: 'initialization' stamp: 'af 5/8/2023 17:38:09' prior: 50640939!
initializeTierra
	
	tipo := #Tierra.
	altura := 0.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:38:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:38:13'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:38:40' prior: 50641551!
calcularProfundidadDelSuelo
	
	| acc ix |
	capasDeSueloDebajo ifEmpty: [^0].
	^capasDeSueloDebajo sum: [:capaActual | capaActual altura].

	"acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc."
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:38:48'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:38:48'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:38:56' prior: 50641733!
calcularProfundidadDelSuelo

	capasDeSueloDebajo ifEmpty: [^0].
	^capasDeSueloDebajo sum: [:capaActual | capaActual altura].

	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:38:59'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:39:00'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:39:00'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:39:00'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:39:00'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:39:00'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:39:00'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:39:00'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:39:00'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:43:10' prior: 50641156!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ tipoDeCapa altura]." valor := 7"
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:43:13'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:43:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:43:13'!
ERROR!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:44:17' prior: 50641905!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [valor := 7]." "
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:46:09' prior: 50642004!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [valor := 7]." "
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	capasDeSueloDebajo  do: [:capaActual | capaActual ].
	[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	].

	^ acc.
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:48:33' prior: 50642023!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| valor acc ix |
	
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [valor := 7]." "
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1.
	
	capasDeSueloDebajo  do: [:capaActual | capaActual tipo = tipoDeCapa ifTrue: [^acc.] ifFalse: [acc := acc + capaActual altura ]].
	"[ix <= capasDeSueloDebajo size] whileTrue: [ | capa altura |
		capa := capasDeSueloDebajo at: ix.
		
		valor = capa scan ifTrue: [ ^ acc ].
		
		altura := capa altura.
		altura = nil ifTrue: [ altura := 0 ].
		acc := acc + altura.
		ix := ix + 1.		
	]."

	^ acc.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:48:41'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:48:41'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:50:28' prior: 50642044!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| sumaAcumulado |
	sumaAcumulado := 0.	
	
	capasDeSueloDebajo  do: [:capaActual | capaActual tipo = tipoDeCapa ifTrue: [^sumaAcumulado.] ifFalse: [sumaAcumulado := sumaAcumulado + capaActual altura ]].	
	^ sumaAcumulado.
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:50:31'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:50:31'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:50:43' prior: 50642142!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| sumaAcumulado |
	sumaAcumulado := 0.	
	
	capasDeSueloDebajo  do: [:capaActual | capaActual tipo = tipoDeCapa ifTrue: [^sumaAcumulado.] ifFalse: [sumaAcumulado := sumaAcumulado + capaActual altura ]].	
	"^ sumaAcumulado."
	
	 ! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:50:45'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:50:45'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:51:31' prior: 50642229!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| sumaAcumulado |
	sumaAcumulado := 0.	
	
	capasDeSueloDebajo  do: [:capaActual | capaActual tipo = tipoDeCapa ifTrue: [^sumaAcumulado.] ifFalse: [sumaAcumulado := sumaAcumulado + capaActual altura ]].	
	^ sumaAcumulado. "En caso de que no haya entiendo que debe decirte la suma de todas las capas."
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:58:20' prior: 50641175!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
"	| valor acc ix |"
	"
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1."
	^(capasDeSueloDebajo select: [:capaActual | capaActual tipo = tipoDeCapa ]) sum: [:capaDeTipoFiltradaActual | capaDeTipoFiltradaActual altura ].
	"[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		valor = capa scan ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc"! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:58:23'!
FAILURE!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:58:23'!
FAILURE!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:58:23'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:58:23'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:58:59' prior: 50642330!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	
"	| valor acc ix |"
	"
	valor := 0.
	tipoDeCapa = #Arenoso ifTrue: [ valor := 7 ].
	tipoDeCapa = #Tierra ifTrue: [ valor := 10 ].
	tipoDeCapa = #Concreto ifTrue: [ valor := 50].	
	
	acc := 0.
	ix := 1."
	^(capasDeSueloDebajo select: [:capaActual | capaActual tipo = tipoDeCapa ]) size .
	"[ix <= capasDeSueloDebajo size] whileTrue: [ | capa |
		capa := capasDeSueloDebajo at: ix.
		valor = capa scan ifTrue: [ acc := acc + 1 ].
		ix := ix + 1.		
	].

	^ acc"! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 17:59:02'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 17:59:02'!
PASSED!
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 17:59:11' prior: 50642430!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	^(capasDeSueloDebajo select: [:capaActual | capaActual tipo = tipoDeCapa ]) size .
! !
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 18:01:13' prior: 50642316!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| sumaAcumulado |
	sumaAcumulado := 0.	
	
	capasDeSueloDebajo  do: [:capaActual | capaActual tipo = tipoDeCapa ifTrue: [^sumaAcumulado.] ifFalse: [sumaAcumulado := sumaAcumulado + capaActual altura ]].	
	^ sumaAcumulado. "En caso de que no haya entiendo que debe decirte la suma de todas las capas. No encontre test que dieran evidencia de otra cosa"
	
	 ! !

CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Arenoso category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 18:01:45'!
CapaDeSuelo subclass: #Arenoso
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 18:01:50'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Tierra category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 18:01:55'!
CapaDeSuelo subclass: #Tierra
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:02:02'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:02:02'!
PASSED!

----SNAPSHOT----(8 May 2023 18:02:16) CuisUniversity-5706.image priorSource: 9886738!

Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Mecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 18:03:45'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Object subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 18:04:11'!
Object subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Diamante category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 18:04:18'!
Mecha subclass: #Diamante
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Soft category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 18:04:26'!
Mecha subclass: #Soft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Mecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Widia category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 18:04:31'!
Mecha subclass: #Widia
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:04:47'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:05:38'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:05:38'!
PASSED!
!Arenoso class methodsFor: 'nil' stamp: 'af 5/8/2023 18:06:39'!
newWithAltura: aAltura! !
!Arenoso class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:07:09'!
nuevaConAltura: aAltura! !

!methodRemoval: Arenoso class #newWithAltura: stamp: 'af 5/8/2023 18:07:13'!
newWithAltura: aAltura!
!Tierra class methodsFor: 'nil' stamp: 'af 5/8/2023 18:07:39'!
nuevaConAltura: aAltura! !
!Concreto class methodsFor: 'nil' stamp: 'af 5/8/2023 18:08:03'!
nuevaConAltura: aAltura yResistencia: aResistencia! !
!Arenoso class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:09:07' prior: 50642879!
nuevaConAltura: aAltura
	^(self new) initializeConAltura: aAltura.! !
!Tierra class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:09:22' prior: 50642885!
nuevaConAltura: aAltura
	^(self new) initializeConAltura: aAltura.! !
!Concreto class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:09:40' prior: 50642888!
nuevaConAltura: aAltura yResistencia: aResistencia
	^(self new) initializeConAltura: aAltura yResistencia: aResistencia .! !
!Concreto methodsFor: 'nil' stamp: 'af 5/8/2023 18:10:25'!
initializeConAltura: aAltura yResistencia: aResistencia 
	altura  := aAltura .
	resistencia  := aResistencia .! !
!Tierra methodsFor: 'nil' stamp: 'af 5/8/2023 18:10:45'!
initializeConAltura: aAltura
	altura  := aAltura .! !
!Arenoso methodsFor: 'nil' stamp: 'af 5/8/2023 18:10:59'!
initializeConAltura: aAltura
	altura  := aAltura .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:11:10'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:11:10'!
PASSED!
!Arenoso class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:17:43'!
nuevaSinAltura
	^(self new) initializeConAltura: 0.! !
!Concreto class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:18:23'!
nuevaSinAlturaNiResistencia
	^(self new) initializeConAltura: 0 yResistencia: 0 .! !
!Tierra class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:18:44'!
nuevaSinAltura
	^(self new) initializeConAltura: 0.! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'af 5/8/2023 18:19:19' prior: 50641003!
arenoso

	^Arenoso nuevaSinAltura.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:19:22'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:19:22'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:19:22'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:19:22'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:19:22'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:19:22'!
FAILURE!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:19:22'!
FAILURE!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:19:22'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:19:22'!
PASSED!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'af 5/8/2023 18:20:27' prior: 50643017!
arenoso

	^self new initializeArenoso! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:21:27' prior: 50642921!
initializeConAltura: aAltura
	altura  := aAltura .
	tipo := #Arenoso.! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:21:42' prior: 50642911!
initializeConAltura: aAltura yResistencia: aResistencia 
	altura  := aAltura .
	resistencia  := aResistencia .
	tipo := #Concreto.! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:21:59' prior: 50642917!
initializeConAltura: aAltura
	altura  := aAltura .
	tipo :=  #Tierra.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:22:01'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:22:01'!
PASSED!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'af 5/8/2023 18:22:16' prior: 50643097!
arenoso

	^Arenoso nuevaSinAltura .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:22:18'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:22:18'!
PASSED!
!Concreto class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:23:10'!
nuevaSinAlturaConResistencia: aResistencia
	^(self new) initializeConAltura: 0 yResistencia: aResistencia .! !
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'af 5/8/2023 18:23:32' prior: 50641007!
concretoConResistencia: resistencia 

	^Concreto nuevaSinAlturaConResistencia: resistencia .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:23:35'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:23:35'!
PASSED!
!CapaDeSuelo class methodsFor: 'instance creation' stamp: 'af 5/8/2023 18:23:52' prior: 50641013!
tierra

	^Tierra nuevaSinAltura .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:23:57'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:34:36'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:34:40'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:34:40'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:35:41'!
crearCapaArenosaSinAltura
	^Arenoso nuevaSinAltura .
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:36:11'!
crearCapaTierraSinAltura
	^Tierra nuevaSinAltura .
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:36:56'!
crearCapaConcretoSinAlturaConResistencia: aResistencia
	^Concreto nuevaSinAlturaConResistencia: aResistencia.
	
	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:36:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:36:59'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:38:22'!
crearCapaArenosaSinAltura1
	^Arenoso nuevaSinAltura .
	
	! !

!methodRemoval: TestDePerforación #crearCapaArenosaSinAltura stamp: 'af 5/8/2023 18:38:22'!
crearCapaArenosaSinAltura
	^Arenoso nuevaSinAltura .
	
	!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:38:33'!
crearCapaConcretoSinAlturaConResistencia1: aResistencia
	^Concreto nuevaSinAlturaConResistencia: aResistencia.
	
	! !

!methodRemoval: TestDePerforación #crearCapaConcretoSinAlturaConResistencia: stamp: 'af 5/8/2023 18:38:33'!
crearCapaConcretoSinAlturaConResistencia: aResistencia
	^Concreto nuevaSinAlturaConResistencia: aResistencia.
	
	!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:38:42'!
crearCapaTierraSinAltura1
	^Tierra nuevaSinAltura .
	
	! !

!methodRemoval: TestDePerforación #crearCapaTierraSinAltura stamp: 'af 5/8/2023 18:38:42'!
crearCapaTierraSinAltura
	^Tierra nuevaSinAltura .
	
	!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11'!
crearCapaArenosaSinAltura

	^ CapaDeSuelo arenoso! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640855!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50643646!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640829!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50643675!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640627!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640689!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: self crearCapaArenosaSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640884!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50643737!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640801!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaDeSuelo arenoso) equals: excavadora capaDeSueloInmediata ].	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640725!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640789!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: excavadora elementsInContainer isEmpty
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640775!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640817!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50643833!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. self crearCapaArenosaSinAltura} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640674!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			CapaDeSuelo tierra.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640869!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50643876!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640899!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50643908!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50640842!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. CapaDeSuelo arenoso. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:11' prior: 50643940!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. CapaDeSuelo tierra setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48'!
crearCapaTierraSinAltura

	^ CapaDeSuelo tierra! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643660!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. self crearCapaTierraSinAltura setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643689!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. self crearCapaTierraSinAltura setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643704!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50644003!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643720!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: self crearCapaArenosaSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643753!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. self crearCapaTierraSinAltura setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50640657!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			self crearCapaTierraSinAltura.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50640743!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643786!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50640758!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.
			self crearCapaTierraSinAltura.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643846!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. self crearCapaTierraSinAltura setAltura: 40. self crearCapaArenosaSinAltura} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643860!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50644156!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50640642!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: CapaDeSuelo tierra equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50644190!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			CapaDeSuelo concretoConResistencia: 5 } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50640705!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			CapaDeSuelo concretoConResistencia: 5.	
			self crearCapaTierraSinAltura.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643892!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. self crearCapaTierraSinAltura setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643924!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. self crearCapaTierraSinAltura setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:39:48' prior: 50643954!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. self crearCapaTierraSinAltura setAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !

!methodRemoval: TestDePerforación #crearCapaTierraSinAltura1 stamp: 'af 5/8/2023 18:40:02'!
crearCapaTierraSinAltura1
	^Tierra nuevaSinAltura .
	
	!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:40:10' prior: 50643968!
crearCapaTierraSinAltura

	^Tierra nuevaSinAltura .
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:40:26' prior: 50643641!
crearCapaArenosaSinAltura

	^ Arenoso nuevaSinAltura .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:40:27'!
PASSED!

!methodRemoval: TestDePerforación #crearCapaArenosaSinAltura1 stamp: 'af 5/8/2023 18:40:31'!
crearCapaArenosaSinAltura1
	^Arenoso nuevaSinAltura .
	
	!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55'!
crearCapaConcretoSinAlturaConResistencia

	^ CapaDeSuelo concretoConResistencia: 5! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644020!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistencia } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644173!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistencia } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644037!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistencia } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: self crearCapaArenosaSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644071!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoSinAlturaConResistencia.
			self crearCapaTierraSinAltura.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644205!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistencia } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644221!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoSinAlturaConResistencia.	
			self crearCapaTierraSinAltura.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644105!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistencia } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644124!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoSinAlturaConResistencia.
			self crearCapaTierraSinAltura.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644089!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistencia } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (CapaDeSuelo concretoConResistencia: 5) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:41:55' prior: 50644534!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistencia } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (self crearCapaConcretoSinAlturaConResistencia) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:43:03'!
crearCapaConcretoSinAlturaConResistenciaCinco

	^ CapaDeSuelo concretoConResistencia: 5! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644459!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644423!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: self crearCapaArenosaSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644406!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644475!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoSinAlturaConResistenciaCinco.	
			self crearCapaTierraSinAltura.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644389!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644550!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (self crearCapaConcretoSinAlturaConResistenciaCinco) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644516!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoSinAlturaConResistenciaCinco.
			self crearCapaTierraSinAltura.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644441!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoSinAlturaConResistenciaCinco.
			self crearCapaTierraSinAltura.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:43:03' prior: 50644496!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaSinAltura.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !

!methodRemoval: TestDePerforación #crearCapaConcretoSinAlturaConResistencia stamp: 'af 5/8/2023 18:43:03'!
crearCapaConcretoSinAlturaConResistencia

	^ CapaDeSuelo concretoConResistencia: 5!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:43:21'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:43:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:43:22'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:43:22'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:43:22'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:43:22'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:43:22'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:43:22'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:43:31'!
crearCapaConcretoSinAlturaConResistencia: aResistencia
	^Concreto nuevaSinAlturaConResistencia: aResistencia.
	
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:43:56' prior: 50644566!
crearCapaConcretoSinAlturaConResistenciaCinco

	^ self crearCapaConcretoSinAlturaConResistencia: 5.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:43:59'!
PASSED!

!methodRemoval: TestDePerforación #crearCapaConcretoSinAlturaConResistencia1: stamp: 'af 5/8/2023 18:44:09'!
crearCapaConcretoSinAlturaConResistencia1: aResistencia
	^Concreto nuevaSinAlturaConResistencia: aResistencia.
	
	!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:45:44'!
crearCapaArenosaConAltura: aAltura

	^ Arenoso nuevaConAltura: aAltura .! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:46:19'!
crearCapaTierraConAltura: aAltura

	^Tierra nuevaConAltura: aAltura .
	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:47:03' prior: 50644142!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2. self crearCapaTierraConAltura: 40. self crearCapaArenosaSinAltura} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:47:04'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:47:04'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:47:44' prior: 50643988!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . self crearCapaTierraConAltura: 40. self crearCapaArenosaSinAltura. CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:47:46'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:47:46'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:48:33' prior: 50645017!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:48:34'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:48:35'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:48:35'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:48:53' prior: 50644274!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaSinAltura setAltura: 2. 
	self crearCapaTierraSinAltura setAltura: 40.
	 self crearCapaArenosaSinAltura.
	 CapaDeSuelo concretoConResistencia: 10 }.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:49:42' prior: 50645199!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:49:44'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:49:44'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:50:07' prior: 50643973!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:50:14'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:50:14'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:50:54' prior: 50644242!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:50:55'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:50:55'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:50:58' prior: 50645400!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:51:20' prior: 50645495!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:51:53' prior: 50644055!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:51:54'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:51:54'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:52:00' prior: 50645527!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:52:34' prior: 50644258!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:52:36'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:52:36'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:52:57' prior: 50645638!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	self crearCapaArenosaSinAltura. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:53:36'!
crearCapaArenosaConAlturaCero

	^ Arenoso nuevaSinAltura .! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50645214!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50644925!
test13PuedeCalcularProfundidadDelSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2. self crearCapaTierraConAltura: 40. self crearCapaArenosaConAlturaCero} .
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: excavadora calcularProfundidadDelSuelo.

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50643769!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (CapaDeSuelo arenoso) equals: excavadora capaDeSueloInmediata ].	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50644646!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50645307!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50645106!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50644589!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: self crearCapaArenosaConAlturaCero equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50644607!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50643818!
test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			'Mica'.
			'Marmol'
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: {	'Mica'. 'Marmol'} equals: excavadora elementsInContainer
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50644719!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoSinAlturaConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50645511!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50645733!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50643805!
test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: excavadora elementsInContainer isEmpty
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:53:36' prior: 50645622!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoSinAlturaConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !

!methodRemoval: TestDePerforación #crearCapaArenosaSinAltura stamp: 'af 5/8/2023 18:53:36'!
crearCapaArenosaSinAltura

	^ Arenoso nuevaSinAltura .!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:53:39'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:53:39'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:53:39'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:53:39'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:53:39'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:53:39'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:53:39'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:53:40'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:53:40'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:54:14'!
crearCapaConcretoConAlturaCeroConResistencia: aResistencia
	^Concreto nuevaSinAlturaConResistencia: aResistencia.
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:14' prior: 50645835!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoConAlturaCeroConResistencia: 10}.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:14' prior: 50645755!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoConAlturaCeroConResistencia: 10}.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:14' prior: 50645940!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoConAlturaCeroConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:14' prior: 50645819!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoConAlturaCeroConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:14' prior: 50645971!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	 self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoConAlturaCeroConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:14' prior: 50644826!
crearCapaConcretoSinAlturaConResistenciaCinco

	^ self crearCapaConcretoConAlturaCeroConResistencia: 5.! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:14' prior: 50645923!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoConAlturaCeroConResistencia: 10}.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !

!methodRemoval: TestDePerforación #crearCapaConcretoSinAlturaConResistencia: stamp: 'af 5/8/2023 18:54:14'!
crearCapaConcretoSinAlturaConResistencia: aResistencia
	^Concreto nuevaSinAlturaConResistencia: aResistencia.
	
	!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:54:16'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:54:16'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:54:47'!
crearCapaConcretoConAlturaCeroConResistenciaCinco

	^ self crearCapaConcretoConAlturaCeroConResistencia: 5.! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50645850!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: self crearCapaArenosaConAlturaCero equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50644625!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoConAlturaCeroConResistenciaCinco.	
			self crearCapaTierraSinAltura.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50645801!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50644572!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50644664!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraSinAltura.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (self crearCapaConcretoConAlturaCeroConResistenciaCinco) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50644700!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoConAlturaCeroConResistenciaCinco.
			self crearCapaTierraSinAltura.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50645869!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraSinAltura equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50644681!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoConAlturaCeroConResistenciaCinco.
			self crearCapaTierraSinAltura.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:54:47' prior: 50645903!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraSinAltura.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !

!methodRemoval: TestDePerforación #crearCapaConcretoSinAlturaConResistenciaCinco stamp: 'af 5/8/2023 18:54:47'!
crearCapaConcretoSinAlturaConResistenciaCinco

	^ self crearCapaConcretoConAlturaCeroConResistencia: 5.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:54:49'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:54:49'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:55:31'!
crearCapaTierraConAlturaCero

	^Tierra nuevaSinAltura .
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646380!
test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraConAlturaCero.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraConAlturaCero equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646267!
test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraConAlturaCero.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: self crearCapaArenosaConAlturaCero equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646308!
test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraConAlturaCero.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraConAlturaCero equals: excavadora capaDeSueloInmediata
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646361!
test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoConAlturaCeroConResistenciaCinco.
			self crearCapaTierraConAlturaCero.} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646398!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoConAlturaCeroConResistenciaCinco.
			self crearCapaTierraConAlturaCero.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (CapaDeSuelo concretoConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646417!
test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			self crearCapaTierraConAlturaCero.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota ].
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646343!
test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraConAlturaCero.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	
	self assert: (self crearCapaConcretoConAlturaCeroConResistenciaCinco) equals: excavadora capaDeSueloInmediata

	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646286!
test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoConAlturaCeroConResistenciaCinco.	
			self crearCapaTierraConAlturaCero.
} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaWidia.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'Se rompió' equals: unError messageText.
			self assert: excavadora conMechaRota.].
	
	! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 18:55:31' prior: 50646326!
test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaTierraConAlturaCero.
			self crearCapaConcretoConAlturaCeroConResistenciaCinco } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaSoft.
	
	excavadora darGolpeDeTaladro.
	
	self assert: self crearCapaTierraConAlturaCero equals: excavadora capaDeSueloInmediata
	
	! !

!methodRemoval: TestDePerforación #crearCapaTierraSinAltura stamp: 'af 5/8/2023 18:55:31'!
crearCapaTierraSinAltura

	^Tierra nuevaSinAltura .
	!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 18:55:33'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 18:55:33'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:59:43'!
crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia

	^ { self crearCapaArenosaConAltura: 2 . 
	self crearCapaTierraConAltura: 40.
	self crearCapaArenosaConAlturaCero. 
	self crearCapaConcretoConAlturaCeroConResistencia: 10}! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:59:43' prior: 50646162!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: #Arenoso).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 18:59:43' prior: 50646105!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:00:29' prior: 50646138!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar :=  self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:00:37' prior: 50646122!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar :=  self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Concreto).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:00:49' prior: 50646089!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: #Tierra).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:00:57' prior: 50646073!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar :=  self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: #Arenoso).

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:01:09'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:01:09'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:05:36' prior: 50646598!
test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaConcretoConAlturaCeroConResistenciaCinco.
			self crearCapaTierraConAlturaCero.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	excavadora ponerMechaDiamante.
	
	excavadora darGolpeDeTaladro.
	excavadora darGolpeDeTaladro.	
	
	self assert: (self crearCapaConcretoConAlturaCeroConResistencia: 4) equals: excavadora capaDeSueloInmediata

	
	! !

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:05:37'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:05:53'!
PASSED!

!methodRemoval: CapaDeSuelo class #concretoConResistencia: stamp: 'af 5/8/2023 19:05:58'!
concretoConResistencia: resistencia 

	^Concreto nuevaSinAlturaConResistencia: resistencia .!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:06:10'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:06:10'!
PASSED!
!Perforadora methodsFor: 'cambiar capa' stamp: 'af 5/8/2023 19:06:56' prior: 50641045!
transformarCapaEnArenoso
	capasDeSueloDebajo :=
			capasDeSueloDebajo allButFirst asOrderedCollection
			addFirst: Arenoso nuevaSinAltura ;
			yourself! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:06:57'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:06:57'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:06:57'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:06:58'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:06:58'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:07:22' prior: 50645784!
test12NoPuedePerforarSinMecha

	| excavadora sueloAExcavar |
	
	sueloAExcavar := {
			self crearCapaArenosaConAlturaCero.
			} .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
		
	self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (self crearCapaArenosaConAlturaCero ) equals: excavadora capaDeSueloInmediata ].	
	! !

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:07:24'!
PASSED!

!methodRemoval: CapaDeSuelo class #arenoso stamp: 'af 5/8/2023 19:07:39'!
arenoso

	^Arenoso nuevaSinAltura .!

!methodRemoval: CapaDeSuelo class #tierra stamp: 'af 5/8/2023 19:08:10'!
tierra

	^Tierra nuevaSinAltura .!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:08:21'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:08:21'!
PASSED!
!Arenoso class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:08:52'!
nuevaConAlturaCero
	^(self new) initializeConAltura: 0.! !

!methodRemoval: Arenoso class #nuevaSinAltura stamp: 'af 5/8/2023 19:08:52'!
nuevaSinAltura
	^(self new) initializeConAltura: 0.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:09:04'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:09:04'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:09:04'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:09:04'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:09:04'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:09:04'!
ERROR!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:09:04'!
ERROR!
!Arenoso class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:10:05'!
nuevaSinAltura
	^(self new) initializeConAltura: 0.! !

!methodRemoval: Arenoso class #nuevaConAlturaCero stamp: 'af 5/8/2023 19:10:05'!
nuevaConAlturaCero
	^(self new) initializeConAltura: 0.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:10:14'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:10:14'!
PASSED!
!Arenoso class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:10:53'!
nuevaConAlturaCero
	^(self new) initializeConAltura: 0.! !
!Tierra class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:10:53'!
nuevaConAlturaCero
	^(self new) initializeConAltura: 0.! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:10:53' prior: 50645749!
crearCapaArenosaConAlturaCero

	^ Arenoso nuevaConAlturaCero .! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:10:53' prior: 50646518!
crearCapaTierraConAlturaCero

	^Tierra nuevaConAlturaCero .
	! !
!Perforadora methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:10:53' prior: 50647192!
transformarCapaEnArenoso
	capasDeSueloDebajo :=
			capasDeSueloDebajo allButFirst asOrderedCollection
			addFirst: Arenoso nuevaConAlturaCero ;
			yourself! !

!methodRemoval: Arenoso class #nuevaSinAltura stamp: 'af 5/8/2023 19:10:53'!
nuevaSinAltura
	^(self new) initializeConAltura: 0.!

!methodRemoval: Tierra class #nuevaSinAltura stamp: 'af 5/8/2023 19:10:53'!
nuevaSinAltura
	^(self new) initializeConAltura: 0.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:10:59'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:10:59'!
PASSED!
!Concreto class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:11:20'!
nuevaConAlturaCeroConResistencia: aResistencia
	^(self new) initializeConAltura: 0 yResistencia: aResistencia .! !
!TestDePerforación methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:11:20' prior: 50646066!
crearCapaConcretoConAlturaCeroConResistencia: aResistencia
	^Concreto nuevaConAlturaCeroConResistencia: aResistencia.
	
	! !

!methodRemoval: Concreto class #nuevaSinAlturaConResistencia: stamp: 'af 5/8/2023 19:11:20'!
nuevaSinAlturaConResistencia: aResistencia
	^(self new) initializeConAltura: 0 yResistencia: aResistencia .!
!Concreto class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:11:42'!
nuevaConAlturaNiResistencia
	^(self new) initializeConAltura: 0 yResistencia: 0 .! !

!methodRemoval: Concreto class #nuevaSinAlturaNiResistencia stamp: 'af 5/8/2023 19:11:42'!
nuevaSinAlturaNiResistencia
	^(self new) initializeConAltura: 0 yResistencia: 0 .!

!methodRemoval: Concreto class #nuevaConAlturaNiResistencia stamp: 'af 5/8/2023 19:12:04'!
nuevaConAlturaNiResistencia
	^(self new) initializeConAltura: 0 yResistencia: 0 .!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:12:10'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:12:11'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:12:38'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:12:38'!
PASSED!

----SNAPSHOT----(8 May 2023 19:12:44) CuisUniversity-5706.image priorSource: 9952479!

!methodRemoval: CapaDeSuelo #initializeArenoso stamp: 'af 5/8/2023 19:14:14'!
initializeArenoso
	
	tipo := #Arenoso.
	altura := 0.!

!methodRemoval: CapaDeSuelo #initializeConcretoConResistencia: stamp: 'af 5/8/2023 19:14:17'!
initializeConcretoConResistencia: resistenciaInicial 

	resistencia := resistenciaInicial.
	tipo := #Concreto.
	altura := 0.!

!methodRemoval: CapaDeSuelo #initializeTierra stamp: 'af 5/8/2023 19:14:19'!
initializeTierra
	
	tipo := #Tierra.
	altura := 0.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:14:29'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:14:30'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:14:30'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:14:30'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:14:30'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:14:30'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:14:30'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:14:30'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:14:30'!
PASSED!
!Arenoso methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:15:09' overrides: 50640943!
esArenoso
	^true.! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:15:21' overrides: 50640943!
esArenoso
	^false.! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:15:31' overrides: 50640943!
esArenoso
	^false.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:15:36'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:15:36'!
PASSED!
!CapaDeSuelo methodsFor: 'tipo' stamp: 'af 5/8/2023 19:15:49' prior: 50640943!
esArenoso
	^self subclassResponsibility .! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'af 5/8/2023 19:16:01' prior: 50640946!
esConcreto
	^self subclassResponsibility.! !
!CapaDeSuelo methodsFor: 'tipo' stamp: 'af 5/8/2023 19:16:12' prior: 50640950!
esTierra
	^self subclassResponsibility .! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:16:29' overrides: 50648106!
esTierra
	^false.! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:16:38' overrides: 50648106!
esTierra
	^false.! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:16:48' overrides: 50648106!
esTierra
	^true.! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:17:08' overrides: 50648102!
esConcreto
	^true.! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:17:23' overrides: 50648102!
esConcreto
	^false.! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:17:31' overrides: 50648102!
esConcreto
	^false.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:17:36'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:22:11'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:22:11'!
PASSED!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'af 5/8/2023 19:27:19' prior: 50640954 overrides: 16901772!
= unaCapaDeSuelo

	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia]! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:27:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:27:28'!
PASSED!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:27:47'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:27:52'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:28:00'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:28:00'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:28:00'!
ERROR!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:28:58'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:29:03'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:29:08'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:29:08'!
PASSED!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'af 5/8/2023 19:29:58' prior: 50648285 overrides: 16901772!
= unaCapaDeSuelo

	^self subclassResponsibility.! !
!Arenoso methodsFor: 'nil' stamp: 'af 5/8/2023 19:30:20' overrides: 50648572!
= unaCapaDeSuelo
	^(unaCapaDeSuelo isKindOf: self class).! !
!Tierra methodsFor: 'nil' stamp: 'af 5/8/2023 19:30:34' overrides: 50648572!
= unaCapaDeSuelo
	^(unaCapaDeSuelo isKindOf: self class).! !
!Concreto methodsFor: 'nil' stamp: 'af 5/8/2023 19:30:49' overrides: 50648572!
= unaCapaDeSuelo
	^(unaCapaDeSuelo isKindOf: self class) and: [resistencia = unaCapaDeSuelo resistencia]! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:30:52'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:30:52'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:30:52'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:30:52'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:30:52'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:30:52'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:30:53'!
PASSED!

!methodRemoval: CapaDeSuelo #setAltura: stamp: 'af 5/8/2023 19:31:51'!
setAltura: unaAltura

	altura := unaAltura!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:33:55'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:34:26'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:34:33'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:34:33'!
PASSED!
!CapaDeSuelo methodsFor: 'comparing' stamp: 'af 5/8/2023 19:35:34' prior: 50640962 overrides: 16901788!
hash
	^self subclassResponsibility .! !
!Arenoso methodsFor: 'nil' stamp: 'af 5/8/2023 19:36:16' overrides: 50648778!
hash
	^tipo hash! !
!Concreto methodsFor: 'nil' stamp: 'af 5/8/2023 19:36:26' overrides: 50648778!
hash
	^tipo hash + resistencia hash! !
!Tierra methodsFor: 'nil' stamp: 'af 5/8/2023 19:36:35' overrides: 50648778!
hash

	^tipo hash! !

!methodRemoval: CapaDeSuelo #resistencia stamp: 'af 5/8/2023 19:37:05'!
resistencia

	^ resistencia.!
!Concreto methodsFor: 'nil' stamp: 'af 5/8/2023 19:37:20'!
resistencia

	^ resistencia.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:37:24'!
PASSED!

!methodRemoval: CapaDeSuelo #bajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:38:28'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1!
!Concreto methodsFor: 'nil' stamp: 'af 5/8/2023 19:38:36'!
bajaUnDecimoDeResistencia
	resistencia := resistencia - 1! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:38:40'!
PASSED!

!methodRemoval: CapaDeSuelo #sinResistencia stamp: 'af 5/8/2023 19:38:52'!
sinResistencia
	^resistencia = 0!
!Concreto methodsFor: 'nil' stamp: 'af 5/8/2023 19:39:01'!
sinResistencia
	^resistencia = 0! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:39:04'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:39:04'!
PASSED!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:39:27'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'tipo altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Concreto category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:39:40'!
CapaDeSuelo subclass: #Concreto
	instanceVariableNames: 'resistencia'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:39:43'!
PASSED!

!methodRemoval: Arenoso #hash stamp: 'af 5/8/2023 19:40:30'!
hash
	^tipo hash!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:40:34'!
PASSED!

!methodRemoval: Tierra #hash stamp: 'af 5/8/2023 19:41:25'!
hash

	^tipo hash!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:41:28'!
PASSED!

!methodRemoval: Concreto #hash stamp: 'af 5/8/2023 19:42:00'!
hash
	^tipo hash + resistencia hash!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:42:04'!
PASSED!

!methodRemoval: CapaDeSuelo #hash stamp: 'af 5/8/2023 19:42:22'!
hash
	^self subclassResponsibility .!

----SNAPSHOT----(8 May 2023 19:42:48) CuisUniversity-5706.image priorSource: 10120526!
!CapaDeSuelo methodsFor: 'scan' stamp: 'af 5/8/2023 19:46:56' prior: 50640985!
scan
	^self subclassResponsibility .! !
!Arenoso methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:47:42' overrides: 50649380!
scan
 	^ 7 .! !
!Concreto methodsFor: 'nil' stamp: 'af 5/8/2023 19:48:09' overrides: 50649380!
scan
	^ 10.! !
!Tierra methodsFor: 'nil' stamp: 'af 5/8/2023 19:48:30' overrides: 50649380!
scan
^10.! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 19:48:38' prior: 50649388 overrides: 50649380!
scan
	^ 50.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:48:42'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:48:42'!
PASSED!

Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #CapaDeSuelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 19:49:50'!
Object subclass: #CapaDeSuelo
	instanceVariableNames: 'altura'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!CapaDeSuelo methodsFor: 'accessing' stamp: 'af 5/8/2023 19:50:01' prior: 50640982!
tipo

	^self subclassResponsibility .! !
!Arenoso methodsFor: 'nil' stamp: 'af 5/8/2023 19:50:15' overrides: 50649486!
tipo
^#Arenoso! !
!Concreto methodsFor: 'nil' stamp: 'af 5/8/2023 19:50:27' overrides: 50649486!
tipo
^#Concreto! !
!Tierra methodsFor: 'nil' stamp: 'af 5/8/2023 19:50:39' overrides: 50649486!
tipo
^#Tierra! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 19:50:42'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 19:50:42'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:58:28' prior: 50646851!
test14PuedeContarLasCapasDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar :=  self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora contarCapas: self crearCapaArenosaConAlturaCero ).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:58:45' prior: 50646839!
test15PuedeContarLasCapasDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: self crearCapaTierraConAlturaCero ).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 19:59:13' prior: 50646827!
test16PuedeContarLasCapasDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar :=  self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 1 equals: (excavadora contarCapas: self crearCapaConcretoConAlturaCeroConResistenciaCinco).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 20:00:00' prior: 50646785!
test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 0 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaArenosaConAlturaCero ).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 20:00:17' prior: 50646813!
test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra

	| excavadora sueloAExcavar |
	
	sueloAExcavar :=  self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 2 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaTierraConAlturaCero ).

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 20:00:37' prior: 50646799!
test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto

	| excavadora sueloAExcavar |
	
	sueloAExcavar := self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco ).

	! !
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 20:01:06' prior: 50642540!
calcularProfundidadDelSueloHasta: tipoDeCapa
	
	| sumaAcumulado |
	sumaAcumulado := 0.	
	
	capasDeSueloDebajo  do: [:capaActual | capaActual scan = tipoDeCapa scan ifTrue: [^sumaAcumulado.] ifFalse: [sumaAcumulado := sumaAcumulado + capaActual altura ]].	
	^ sumaAcumulado. "En caso de que no haya entiendo que debe decirte la suma de todas las capas. No encontre test que dieran evidencia de otra cosa"
	
	 ! !
!Perforadora methodsFor: 'scan' stamp: 'af 5/8/2023 20:01:16' prior: 50642528!
contarCapas: tipoDeCapa
	
	"Cuenta las capas de tipo tipoDeCapa. Recordar que para identificar cada capa se utiliza el valor de scan que retorna. Por ej. un capa tipo Arenoso retorna 7 al scan"
	^(capasDeSueloDebajo select: [:capaActual | capaActual scan = tipoDeCapa scan ]) size .
! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:01:20'!
PASSED!

!methodRemoval: Arenoso #tipo stamp: 'af 5/8/2023 20:01:54'!
tipo
^#Arenoso!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:01:58'!
PASSED!

!methodRemoval: CapaDeSuelo #tipo stamp: 'af 5/8/2023 20:02:08'!
tipo

	^self subclassResponsibility .!

!methodRemoval: Concreto #tipo stamp: 'af 5/8/2023 20:02:16'!
tipo
^#Concreto!

!methodRemoval: Tierra #tipo stamp: 'af 5/8/2023 20:02:22'!
tipo
^#Tierra!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:02:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:02:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:02:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:02:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:02:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:02:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:02:26'!
PASSED!

----SNAPSHOT----(8 May 2023 20:02:38) CuisUniversity-5706.image priorSource: 10167240!
!Arenoso methodsFor: 'initialize' stamp: 'af 5/8/2023 20:03:33' prior: 50643102!
initializeConAltura: aAltura
	altura  := aAltura .! !
!Concreto methodsFor: 'initialize' stamp: 'af 5/8/2023 20:03:55' prior: 50643108!
initializeConAltura: aAltura yResistencia: aResistencia 
	altura  := aAltura .
	resistencia  := aResistencia .! !
!Tierra methodsFor: 'initialize' stamp: 'af 5/8/2023 20:04:11' prior: 50643115!
initializeConAltura: aAltura
	altura  := aAltura .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:04:33'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:04:33'!
PASSED!

Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #SinMecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 20:05:50'!
Mecha subclass: #SinMecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

Object subclass: #Mecha
	instanceVariableNames: 'mechaPuesta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Mecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 20:08:22'!
Object subclass: #Mecha
	instanceVariableNames: 'mechaPuesta'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:08:52'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:08:52'!
PASSED!

----SNAPSHOT----(8 May 2023 20:08:56) CuisUniversity-5706.image priorSource: 10184683!
!Perforadora methodsFor: 'initialization' stamp: 'af 5/8/2023 20:09:59' prior: 50641092!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new.! !
!Perforadora methodsFor: 'initialization' stamp: 'af 5/8/2023 20:10:35' prior: 50650118!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new. "#SinMecha"! !
!Perforadora methodsFor: 'initialization' stamp: 'af 5/8/2023 20:11:00' prior: 50650128!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := #SinMecha! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:11:05'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:11:05'!
PASSED!
!Mecha methodsFor: 'nil' stamp: 'af 5/8/2023 20:11:28'!
ponerMechaDiamante
	mechaPuesta := #Diamante! !
!Mecha methodsFor: 'nil' stamp: 'af 5/8/2023 20:11:40'!
ponerMechaSoft
	mechaPuesta := #Soft! !
!Mecha methodsFor: 'nil' stamp: 'af 5/8/2023 20:11:53'!
ponerMechaWidia
	mechaPuesta := #Widia! !
!Mecha methodsFor: 'nil' stamp: 'af 5/8/2023 20:12:38'!
sinMecha

	^mechaPuesta = #SinMecha! !
!Mecha methodsFor: 'nil' stamp: 'af 5/8/2023 20:12:58'!
conMechaRota

	^mechaPuesta = #Rota! !

Mecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Rota category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 20:13:08'!
Mecha subclass: #Rota
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:14:28'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:14:28'!
PASSED!

Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Mecha category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 20:17:34'!
Object subclass: #Mecha
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:17:51' prior: 50650236!
conMechaRota

	^false.! !
!Rota methodsFor: 'nil' stamp: 'af 5/8/2023 20:18:01' overrides: 50650338!
conMechaRota

	^true.! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:18:23' prior: 50650233!
sinMecha

	^false.! !
!SinMecha methodsFor: 'nil' stamp: 'af 5/8/2023 20:18:36' overrides: 50650346!
sinMecha

	^false.! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'af 5/8/2023 20:19:40' prior: 50641132!
ponerMechaDiamante
	mechaPuesta := Diamante new.! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'af 5/8/2023 20:19:59' prior: 50641136!
ponerMechaSoft
	mechaPuesta := Soft new.! !
!Perforadora methodsFor: 'colocar mecha' stamp: 'af 5/8/2023 20:20:15' prior: 50641140!
ponerMechaWidia
	mechaPuesta := Widia new.! !
!Perforadora methodsFor: 'accessing' stamp: 'af 5/8/2023 20:20:46' prior: 50641113!
sinMecha

	^mechaPuesta sinMecha.! !
!Perforadora methodsFor: 'accessing' stamp: 'af 5/8/2023 20:20:49' prior: 50650369!
sinMecha
	^mechaPuesta sinMecha.! !
!Perforadora methodsFor: 'accessing' stamp: 'af 5/8/2023 20:21:01' prior: 50641105!
conMechaRota

	^mechaPuesta conMechaRota .! !
!Perforadora methodsFor: 'initialization' stamp: 'af 5/8/2023 20:21:21' prior: 50650138!
initializeSobreSuelo: capasDeSueloAExcavarInicialmente

	capasDeSueloDebajo := capasDeSueloAExcavarInicialmente.
	vecesQueGolpeoCapaActual := 0.
	container := OrderedCollection new.
	mechaPuesta := SinMecha new.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:21:36'!
FAILURE!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:21:36'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:21:36'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:21:36'!
FAILURE!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:21:36'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:21:36'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:21:36'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:21:36'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:21:36'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:21:36'!
FAILURE!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:21:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:21:36'!
FAILURE!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:21:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:21:36'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:21:36'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:21:36'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:21:36'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:21:36'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:21:36'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:23:41' prior: 50641052!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Diamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := #Rota. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:23:51' prior: 50650467!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Widia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta = #Diamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:24:16'!
FAILURE!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:24:16'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:24:16'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:24:16'!
FAILURE!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:24:16'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:24:16'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:24:16'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:24:16'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:24:16'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:24:16'!
FAILURE!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:24:16'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:24:16'!
FAILURE!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:24:16'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:24:16'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:24:16'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:24:16'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:24:16'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:24:16'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:24:16'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:24:53'!
FAILURE!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:24:53'!
FAILURE!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:26:30'!
PASSED!

!methodRemoval: Mecha #ponerMechaDiamante stamp: 'af 5/8/2023 20:27:15'!
ponerMechaDiamante
	mechaPuesta := #Diamante!

!methodRemoval: Mecha #ponerMechaSoft stamp: 'af 5/8/2023 20:27:19'!
ponerMechaSoft
	mechaPuesta := #Soft!

!methodRemoval: Mecha #ponerMechaWidia stamp: 'af 5/8/2023 20:27:23'!
ponerMechaWidia
	mechaPuesta := #Widia!
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:27:50'!
isMechaSoft

	^false.! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:27:54'!
isMechaWidia

	^false.! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:28:16'!
esMechaDiamante

	^false.! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:28:25'!
esMechaSoft

	^false.! !

!methodRemoval: Mecha #isMechaSoft stamp: 'af 5/8/2023 20:28:25'!
isMechaSoft

	^false.!
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:28:30'!
esMechaWidia

	^false.! !

!methodRemoval: Mecha #isMechaWidia stamp: 'af 5/8/2023 20:28:30'!
isMechaWidia

	^false.!
!Diamante methodsFor: 'nil' stamp: 'af 5/8/2023 20:28:49' overrides: 50650650!
esMechaDiamante

	^true.! !
!SinMecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:29:01' prior: 50650350 overrides: 50650346!
sinMecha

	^true.! !
!Soft methodsFor: 'nil' stamp: 'af 5/8/2023 20:29:20' overrides: 50650654!
esMechaSoft

	^true.! !
!Widia methodsFor: 'nil' stamp: 'af 5/8/2023 20:29:37' overrides: 50650660!
esMechaWidia

	^true.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:29:51'!
FAILURE!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:29:51'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:29:51'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:29:51'!
FAILURE!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:29:51'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:29:51'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:29:51'!
FAILURE!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:29:51'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:29:51'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:29:51'!
FAILURE!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:29:51'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:29:51'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:29:51'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:29:51'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:29:51'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:29:51'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:29:51'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:29:51'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:29:51'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:30:30' prior: 50650507!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta = #Soft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:30:32'!
ERROR!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:30:32'!
FAILURE!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:30:32'!
ERROR!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:30:32'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:30:32'!
ERROR!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:30:32'!
ERROR!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:30:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:30:32'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:30:55' prior: 50650758!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:31:04' prior: 50650874!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:31:19' prior: 50650915!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta esMechaDiamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta = #Soft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta = #Widia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta = #Diamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:31:46' prior: 50650956!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self].
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ ^self ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta esMechaDiamante ifTrue: [ ^self pasarAProximaCapa ]].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta  esMechaDiamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 20:31:52'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 20:31:52'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:41:32' prior: 50650997!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenoso.
		^self].
		
		"mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self]."
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierra.
		^self.]
		"mechaPuesta esMechaSoft ifTrue: [ ^self ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta esMechaDiamante ifTrue: [ ^self pasarAProximaCapa ]]."
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta  esMechaDiamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:41:59' prior: 50651114!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenoso.
		^self].
		
		"mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self]."
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierra.
		^self.].
		"mechaPuesta esMechaSoft ifTrue: [ ^self ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta esMechaDiamante ifTrue: [ ^self pasarAProximaCapa ]]."
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta esMechaSoft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta  esMechaDiamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]].
	
	self error: 'error'! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:43:11' prior: 50651159!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenoso.
		^self].
		
		"mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self]."
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierra.
		^self.].
		"mechaPuesta esMechaSoft ifTrue: [ ^self ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta esMechaDiamante ifTrue: [ ^self pasarAProximaCapa ]]."
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta tratarDeRomperSueloConcreto.
		^self.].
		"mechaPuesta esMechaSoft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta  esMechaDiamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]]."
	
	self error: 'error'! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:44:42'!
tratarDeRomperSueloArenoso
	^self subclassResponsibility .! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:44:52'!
tratarDeRomperSueloTierra
	^self subclassResponsibility .! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:44:59'!
tratarDeRomperSueloConcreto
	^self subclassResponsibility .! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 20:46:35' prior: 50651204!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenosoEnPerforadora: self.
		^self].
		
		"mechaPuesta esMechaSoft ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaWidia ifTrue: [ ^self pasarAProximaCapa ].
		mechaPuesta esMechaDiamante ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
		^self]."
	
	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierraEnPerforadora: self.
		^self.].
		"mechaPuesta esMechaSoft ifTrue: [ ^self ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].
			^self ].
		mechaPuesta esMechaDiamante ifTrue: [ ^self pasarAProximaCapa ]]."
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta tratarDeRomperSueloConcretoEnPerforadora: self.
		^self.].
		"mechaPuesta esMechaSoft ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió'  ].
		mechaPuesta esMechaWidia ifTrue: [ 
			vecesQueGolpeoCapaActual = 3 ifTrue: [ mechaPuesta := Rota new. self error: 'Se rompió' ].
			^self ].
		mechaPuesta  esMechaDiamante ifTrue: [ 
			vecesQueGolpeoCapaActual even ifTrue: [ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
			capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
			^vecesQueGolpeoCapaActual ]]."
	
	self error: 'error'! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:47:31'!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^self subclassResponsibility .! !

!methodRemoval: Mecha #tratarDeRomperSueloArenoso stamp: 'af 5/8/2023 20:47:36'!
tratarDeRomperSueloArenoso
	^self subclassResponsibility .!
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:47:44'!
tratarDeRomperSueloConcretoEnPerforadora: aPerforadora
	^self subclassResponsibility .! !
!Mecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:47:50'!
tratarDeRomperSueloTierraEnPerforadora: aPerforadora
	^self subclassResponsibility .! !

!methodRemoval: Mecha #tratarDeRomperSueloConcreto stamp: 'af 5/8/2023 20:47:54'!
tratarDeRomperSueloConcreto
	^self subclassResponsibility .!

!methodRemoval: Mecha #tratarDeRomperSueloTierra stamp: 'af 5/8/2023 20:47:58'!
tratarDeRomperSueloTierra
	^self subclassResponsibility .!
!Diamante methodsFor: 'nil' stamp: 'af 5/8/2023 20:49:39' overrides: 50651314!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloArenosoEnMechaDiamante .! !
!Rota methodsFor: 'nil' stamp: 'af 5/8/2023 20:49:54' overrides: 50651314!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloArenosoEnMechaRota .! !
!SinMecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:50:53' overrides: 50651314!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloArenosoSinMecha .! !
!Soft methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:51:14' overrides: 50651314!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloArenosoEnMechaSoft .! !
!Widia methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:51:36' overrides: 50651314!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloArenosoEnMechaWidia .! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:52:31' overrides: 50651324!
tratarDeRomperSueloConcretoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloConcretoEnMechaDiamante .! !
!Rota methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:53:14' overrides: 50651324!
tratarDeRomperSueloConcretoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloConcretoEnMechaRota .! !
!SinMecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:53:50' overrides: 50651324!
tratarDeRomperSueloConcretoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloConcretoSinMecha .! !
!Soft methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:54:06' overrides: 50651324!
tratarDeRomperSueloConcretoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloConcretoEnMechaSoft .! !
!Widia methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:54:28' overrides: 50651324!
tratarDeRomperSueloConcretoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloConcretoEnMechaWidia .! !
!Diamante methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:55:49' overrides: 50651330!
tratarDeRomperSueloTierraEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloTierraEnMechaDiamante .! !
!Rota methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:56:07' overrides: 50651330!
tratarDeRomperSueloTierraEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloTierraEnMechaRota.! !
!SinMecha methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:56:28' overrides: 50651330!
tratarDeRomperSueloTierraEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloTierraSinMecha .! !
!Soft methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:57:09' overrides: 50651330!
tratarDeRomperSueloTierraEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloTierraEnMechaSoft .! !
!Widia methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 20:57:25' overrides: 50651330!
tratarDeRomperSueloTierraEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloTierraEnMechaWidia .! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 20:59:27'!
rotaaa
^self error: 'No puede perforar'! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 20:59:52'!
tratarDeRomperSueloArenosoEnMechaRota
^self error: 'No puede perforar'! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:00:27'!
tratarDeRomperSueloArenosoEnSinMecha
^self error: 'No puede perforar'! !
!Rota methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 21:00:27' prior: 50651351 overrides: 50651314!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloArenosoEnSinMecha .! !

!methodRemoval: Perforadora #tratarDeRomperSueloArenosoEnMechaRota stamp: 'af 5/8/2023 21:00:27'!
tratarDeRomperSueloArenosoEnMechaRota
^self error: 'No puede perforar'!
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:01:11'!
sinMechita
^self error: 'No puede perforar'! !

!methodRemoval: Perforadora #rotaaa stamp: 'af 5/8/2023 21:01:14'!
rotaaa
^self error: 'No puede perforar'!
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:01:22'!
tratarDeRomperSueloTierraEnSinMecha
^self error: 'No puede perforar'! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:01:28'!
tratarDeRomperSueloConcretoEnSinMecha
^self error: 'No puede perforar'! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:02:02'!
tratarDeRomperSueloArenosoSinMecha
^self error: 'No puede perforar'! !
!Rota methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 21:02:02' prior: 50651463 overrides: 50651314!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloArenosoSinMecha .! !

!methodRemoval: Perforadora #tratarDeRomperSueloArenosoEnSinMecha stamp: 'af 5/8/2023 21:02:02'!
tratarDeRomperSueloArenosoEnSinMecha
^self error: 'No puede perforar'!
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:02:09'!
tratarDeRomperSueloConcretoSinMecha
^self error: 'No puede perforar'! !

!methodRemoval: Perforadora #tratarDeRomperSueloConcretoEnSinMecha stamp: 'af 5/8/2023 21:02:09'!
tratarDeRomperSueloConcretoEnSinMecha
^self error: 'No puede perforar'!
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:02:18'!
tratarDeRomperSueloTierraSinMecha
^self error: 'No puede perforar'! !

!methodRemoval: Perforadora #tratarDeRomperSueloTierraEnSinMecha stamp: 'af 5/8/2023 21:02:18'!
tratarDeRomperSueloTierraEnSinMecha
^self error: 'No puede perforar'!
!Rota methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 21:04:25' prior: 50651499 overrides: 50651314!
tratarDeRomperSueloArenosoEnPerforadora: aPerforadora
	^aPerforadora tratarDeRomperSueloArenosoEnMechaRota .! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:05:00'!
sinMechaError
^self error: 'No puede perforar'! !

!methodRemoval: Perforadora #sinMechita stamp: 'af 5/8/2023 21:05:04'!
sinMechita
^self error: 'No puede perforar'!
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:05:44'!
mechaRotaError
^self error: 'La mecha ya estaba rota, no puede perforar'! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:06:08'!
tratarDeRomperSueloTierraEnMechaRota
^self error: 'La mecha ya estaba rota, no puede perforar'! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:06:19'!
tratarDeRomperSueloArenosoEnMechaRota
^self error: 'La mecha ya estaba rota, no puede perforar'! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:06:31'!
tratarDeRomperSueloConcretoEnMechaRota
^self error: 'La mecha ya estaba rota, no puede perforar'! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:07:50'!
tratarDeRomperSueloArenosoEnMechaSoft 
^self pasarAProximaCapa! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:09:58'!
tratarDeRomperSueloArenosoEnMechaWidia
^self pasarAProximaCapa! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:10:45'!
tratarDeRomperSueloArenosoEnMechaDiamante
 	mechaPuesta := Rota new. 
	self error: 'Se rompió'. 
	^self.! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:11:50'!
tratarDeRomperSueloTierraEnMechaSoft
	^self.! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:12:25'!
tratarDeRomperSueloTierraEnMechaWidia
	vecesQueGolpeoCapaActual = 2 ifTrue: [ ^self transformarCapaEnArenoso ].! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:12:51'!
tratarDeRomperSueloTierraEnMechaDiamante
	^self pasarAProximaCapa.! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:14:31'!
tratarDeRomperConcretoTierraEnMechaSoft
	mechaPuesta := Rota new. 
	self error: 'Se rompió'.
	^self! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:15:00'!
tratarDeRomperSueloConcretoEnMechaSoft
	mechaPuesta := Rota new. 
	self error: 'Se rompió'.
	^self! !

!methodRemoval: Perforadora #tratarDeRomperConcretoTierraEnMechaSoft stamp: 'af 5/8/2023 21:15:00'!
tratarDeRomperConcretoTierraEnMechaSoft
	mechaPuesta := Rota new. 
	self error: 'Se rompió'.
	^self!
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:15:46'!
tratarDeRomperSueloConcretoEnMechaWidia
	vecesQueGolpeoCapaActual = 3 ifTrue:
	[ mechaPuesta := Rota new. 
	self error: 'Se rompió' ]
	^self.! !
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:17:18'!
tratarDeRomperSueloConcretoEnMechaDiamante
	vecesQueGolpeoCapaActual even ifTrue: 
	[ capasDeSueloDebajo first bajaUnDecimoDeResistencia].
	capasDeSueloDebajo first sinResistencia ifTrue: [ ^self transformarCapaEnArenoso].
	^vecesQueGolpeoCapaActual .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:17:31'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:17:31'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:17:32'!
ERROR!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:17:32'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:17:32'!
ERROR!
!Perforadora methodsFor: 'tratarDeExcavar' stamp: 'af 5/8/2023 21:17:58' prior: 50651617!
tratarDeRomperSueloConcretoEnMechaWidia
	vecesQueGolpeoCapaActual = 3 ifTrue:
	[ mechaPuesta := Rota new. 
	self error: 'Se rompió' ].
	^self.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:18:40'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:18:40'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:18:41'!
PASSED!

!methodRemoval: Perforadora #sinMechaError stamp: 'af 5/8/2023 21:18:54'!
sinMechaError
^self error: 'No puede perforar'!

!methodRemoval: Perforadora #mechaRotaError stamp: 'af 5/8/2023 21:18:57'!
mechaRotaError
^self error: 'La mecha ya estaba rota, no puede perforar'!

!methodRemoval: Widia #esMechaWidia stamp: 'af 5/8/2023 21:19:03'!
esMechaWidia

	^true.!

!methodRemoval: Soft #esMechaSoft stamp: 'af 5/8/2023 21:19:08'!
esMechaSoft

	^true.!

!methodRemoval: Diamante #esMechaDiamante stamp: 'af 5/8/2023 21:19:30'!
esMechaDiamante

	^true.!

!methodRemoval: Mecha #esMechaWidia stamp: 'af 5/8/2023 21:19:39'!
esMechaWidia

	^false.!

!methodRemoval: Mecha #esMechaSoft stamp: 'af 5/8/2023 21:19:43'!
esMechaSoft

	^false.!

!methodRemoval: Mecha #esMechaDiamante stamp: 'af 5/8/2023 21:19:46'!
esMechaDiamante

	^false.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:19:48'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:19:48'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:20:22' prior: 50651266!
darGolpeDeTaladro
		
	self sinMecha ifTrue: [self error: 'No puede perforar'].

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenosoEnPerforadora: self.
		^self].

	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierraEnPerforadora: self.
		^self.].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta tratarDeRomperSueloConcretoEnPerforadora: self.
		^self.].! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:20:24'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:20:24'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:20:24'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:20:24'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:20:24'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:20:24'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:20:24'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:20:25'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:20:25'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:22:02' prior: 50651899!
darGolpeDeTaladro

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.

	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenosoEnPerforadora: self.
		^self].

	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierraEnPerforadora: self.
		^self.].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta tratarDeRomperSueloConcretoEnPerforadora: self.
		^self.].! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:22:04'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:22:04'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:22:41' prior: 50651992!
darGolpeDeTaladro

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenosoEnPerforadora: self.
		^self].

	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierraEnPerforadora: self.
		^self.].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta tratarDeRomperSueloConcretoEnPerforadora: self.
		^self.].! !

Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Perforadora category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 21:24:03'!
Object subclass: #Perforadora
	instanceVariableNames: 'mechaPuesta vecesQueGolpeoCapaActual capasDeSueloDebajo container'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:24:05'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:24:05'!
PASSED!

----SNAPSHOT----(8 May 2023 21:25:47) CuisUniversity-5706.image priorSource: 10190848!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:26:55' prior: 50652083!
darGolpeDeTaladro

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^(capasDeSueloDebajo first) tratarDeSerExcavado .
	"
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenosoEnPerforadora: self.
		^self].

	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierraEnPerforadora: self.
		^self.].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta tratarDeRomperSueloConcretoEnPerforadora: self.
		^self.]."! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:27:24' prior: 50652192!
darGolpeDeTaladro

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^(capasDeSueloDebajo first) tratarDeSerExcavadoPorPerforadora: self .
	"
	self sobreSueloArenoso ifTrue: [
		mechaPuesta tratarDeRomperSueloArenosoEnPerforadora: self.
		^self].

	self sobreSueloTierra ifTrue: [
		mechaPuesta tratarDeRomperSueloTierraEnPerforadora: self.
		^self.].
	
	self sobreSueloConcreto ifTrue: [
		mechaPuesta tratarDeRomperSueloConcretoEnPerforadora: self.
		^self.]."! !
!Arenoso methodsFor: 'nil' stamp: 'af 5/8/2023 21:28:55'!
tratarDeSerExcavadoPorPerforadora: aPerforadora
	^aPerforadora darGolpeDeTaladroArenoso.! !
!Concreto methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 21:29:11'!
tratarDeSerExcavadoPorPerforadora: aPerforadora
	^aPerforadora darGolpeDeTaladroConcreto.! !
!Tierra methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 21:29:41'!
tratarDeSerExcavadoPorPerforadora: aPerforadora
	^aPerforadora darGolpeDeTaladroTierra.! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:30:47'!
darGolpeDeTaladroArenoso
	^mechaPuesta tratarDeRomperSueloArenosoEnPerforadora: self.
		! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:31:15'!
darGolpeDeTaladroTierra

	mechaPuesta tratarDeRomperSueloTierraEnPerforadora: self.
	^self.! !
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:32:00'!
darGolpeDeTaladroConcreto

	mechaPuesta tratarDeRomperSueloConcretoEnPerforadora: self.
	^self.! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:32:03'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:32:03'!
PASSED!
!Perforadora methodsFor: 'excavation' stamp: 'af 5/8/2023 21:32:15' prior: 50652209!
darGolpeDeTaladro

	vecesQueGolpeoCapaActual := vecesQueGolpeoCapaActual + 1.
	^(capasDeSueloDebajo first) tratarDeSerExcavadoPorPerforadora: self .! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:34:26'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:34:26'!
PASSED!
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:37:21' prior: 50641204!
sobreSuelo: capasDeSueloAExcavar 
	self verificarQueNoHayanDosCapasIgualesContiguas.
	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:37:33' prior: 50652419!
sobreSuelo: capasDeSueloAExcavar 
	self verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar .
	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:40:14'!
verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar
	^true.! !
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:42:00' prior: 50652435!
verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar
	capasDeSueloAExcavar ifEmpty: [^true].
	(1 to: (capasDeSueloAExcavar size)) do: [:ind | capasDeSueloAExcavar ]! !
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:45:03' prior: 50652441!
verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar
	capasDeSueloAExcavar ifEmpty: [^true].
	(capasDeSueloAExcavar size)=1 ifTrue: [^true].
	(1 to: (capasDeSueloAExcavar size-1)) allSatisfy: [:indice | ((capasDeSueloAExcavar at: indice) = (capasDeSueloAExcavar at: (indice+1))) negated ].! !

true negated!

true not!
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:45:31' prior: 50652450!
verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar
	capasDeSueloAExcavar ifEmpty: [^true].
	(capasDeSueloAExcavar size)=1 ifTrue: [^true].
	(1 to: (capasDeSueloAExcavar size-1)) allSatisfy: [:indice | ((capasDeSueloAExcavar at: indice) = (capasDeSueloAExcavar at: (indice+1))) not ].! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:45:36'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:45:36'!
PASSED!
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:46:20' prior: 50652464!
verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar
	| capasSonValidas |
	capasDeSueloAExcavar ifEmpty: [^true].
	(capasDeSueloAExcavar size)=1 ifTrue: [^true].
	capasSonValidas := (1 to: (capasDeSueloAExcavar size-1)) allSatisfy: [:indice | ((capasDeSueloAExcavar at: indice) = (capasDeSueloAExcavar at: (indice+1))) not ].! !
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:47:30' prior: 50652552!
verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar
	| capasSonValidas |
	capasDeSueloAExcavar ifEmpty: [^true].
	(capasDeSueloAExcavar size)=1 ifTrue: [^true].
	capasSonValidas := (1 to: (capasDeSueloAExcavar size-1)) allSatisfy: [:indice | ((capasDeSueloAExcavar at: indice) = (capasDeSueloAExcavar at: (indice+1))) not ].
	capasSonValidas ifTrue: [^self] ifFalse: [^self error: 'Hay 2 capas iguales continuas'].! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:47:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:47:32'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 21:50:03'!
test20PermiteExcavarCapaVacia

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= { } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !

!testRun: #TestDePerforación #test20PermiteExcavarCapaVacia stamp: 'af 5/8/2023 21:50:09'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 21:50:47'!
test20PermiteExcavarCapaUnica

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= { self crearCapaArenosaConAlturaCero. } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 21:50:55'!
test21PermiteExcavarCapaUnica

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= { self crearCapaArenosaConAlturaCero. } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !

!methodRemoval: TestDePerforación #test20PermiteExcavarCapaUnica stamp: 'af 5/8/2023 21:51:02'!
test20PermiteExcavarCapaUnica

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= { self crearCapaArenosaConAlturaCero. } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 21:51:15'!
test22PermiteExcavarMultiplesCapas

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= { self crearCapaArenosaConAlturaCero. } .
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 21:51:31' prior: 50652710!
test22PermiteExcavarMultiplesCapas

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 21:51:35'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test20PermiteExcavarCapaVacia stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test21PermiteExcavarCapaUnica stamp: 'af 5/8/2023 21:51:43'!
PASSED!

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 21:51:43'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 21:52:11'!
test23NoPermiteExcavarCapasIgualesContiguas

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 21:52:39' prior: 50652825!
test23NoPermiteExcavarCapasIgualesContiguas

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= {self crearCapaArenosaConAltura: 2. 
					self crearCapaArenosaConAltura: 2. }.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 21:52:42'!
ERROR!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 21:52:42'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 21:54:27' prior: 50652840!
test23NoPermiteExcavarCapasIgualesContiguas

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= {self crearCapaArenosaConAltura: 2. 
					self crearCapaArenosaConAltura: 2. }.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (self crearCapaArenosaConAlturaCero ) equals: excavadora capaDeSueloInmediata ].	"! !

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 21:54:34'!
ERROR!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 21:54:34'!
ERROR!

Object subclass: #Suelo
	instanceVariableNames: 'capas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Suelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 21:56:34'!
Object subclass: #Suelo
	instanceVariableNames: 'capas'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Suelo class methodsFor: 'nil' stamp: 'af 5/8/2023 21:57:41' overrides: 16785646!
new
 	^(self new) initialize.! !
!Suelo class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 21:58:10'!
newWithCapas: capas
 	^(self new) initializeWithCapas: capas.! !

!methodRemoval: Suelo class #new stamp: 'af 5/8/2023 21:58:20'!
new
 	^(self new) initialize.!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test20PermiteExcavarCapaVacia stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test21PermiteExcavarCapaUnica stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 21:58:22'!
PASSED!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 21:58:22'!
ERROR!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 21:58:22'!
ERROR!

Object subclass: #Suelo
	instanceVariableNames: 'capasSuelo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!

!classDefinition: #Suelo category: 'ISW1-2023-1C-Parcial-1' stamp: 'af 5/8/2023 21:59:06'!
Object subclass: #Suelo
	instanceVariableNames: 'capasSuelo'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'ISW1-2023-1C-Parcial-1'!
!Suelo methodsFor: 'no messages' stamp: 'af 5/8/2023 21:59:22'!
initializeWithCapas: capas.
	capasSuelo := capas ! !
!Perforadora class methodsFor: 'instance creation' stamp: 'af 5/8/2023 21:59:38' prior: 50652427!
sobreSuelo: capasDeSueloAExcavar 
	^self new initializeSobreSuelo: capasDeSueloAExcavar ! !
!Suelo class methodsFor: 'as yet unclassified' stamp: 'af 5/8/2023 21:59:57' prior: 50652903!
newWithCapas: capas
	self verificarQueNoHayanDosCapasIgualesContiguas: capas .
 	^(self new) initializeWithCapas: capas.! !

!methodRemoval: Perforadora class #verificarQueNoHayanDosCapasIgualesContiguas: stamp: 'af 5/8/2023 22:00:20'!
verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar
	| capasSonValidas |
	capasDeSueloAExcavar ifEmpty: [^true].
	(capasDeSueloAExcavar size)=1 ifTrue: [^true].
	capasSonValidas := (1 to: (capasDeSueloAExcavar size-1)) allSatisfy: [:indice | ((capasDeSueloAExcavar at: indice) = (capasDeSueloAExcavar at: (indice+1))) not ].
	capasSonValidas ifTrue: [^self] ifFalse: [^self error: 'Hay 2 capas iguales continuas'].!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test20PermiteExcavarCapaVacia stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test21PermiteExcavarCapaUnica stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 22:00:24'!
PASSED!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:00:24'!
PASSED!
!Suelo class methodsFor: 'nil' stamp: 'af 5/8/2023 22:00:36'!
verificarQueNoHayanDosCapasIgualesContiguas: capasDeSueloAExcavar
	| capasSonValidas |
	capasDeSueloAExcavar ifEmpty: [^true].
	(capasDeSueloAExcavar size)=1 ifTrue: [^true].
	capasSonValidas := (1 to: (capasDeSueloAExcavar size-1)) allSatisfy: [:indice | ((capasDeSueloAExcavar at: indice) = (capasDeSueloAExcavar at: (indice+1))) not ].
	capasSonValidas ifTrue: [^self] ifFalse: [^self error: 'Hay 2 capas iguales continuas'].! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 22:00:50'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 22:00:51'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 22:00:51'!
PASSED!

!testRun: #TestDePerforación #test20PermiteExcavarCapaVacia stamp: 'af 5/8/2023 22:00:51'!
PASSED!

!testRun: #TestDePerforación #test21PermiteExcavarCapaUnica stamp: 'af 5/8/2023 22:00:51'!
PASSED!

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 22:00:51'!
PASSED!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:00:51'!
PASSED!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:01:28'!
PASSED!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 22:02:23' prior: 50652862!
test23NoPermiteExcavarCapasIgualesContiguas

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= Suelo newWithCapas: {self crearCapaArenosaConAltura: 2. 
					self crearCapaArenosaConAltura: 2. }.
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (self crearCapaArenosaConAlturaCero ) equals: excavadora capaDeSueloInmediata ].	"! !

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:02:27'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 22:02:54' prior: 50652723!
test22PermiteExcavarMultiplesCapas

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= Suelo newWithCapas: (self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia).
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test20PermiteExcavarCapaVacia stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test21PermiteExcavarCapaUnica stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 22:02:57'!
PASSED!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:02:57'!
ERROR!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:02:57'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 22:03:24' prior: 50653267!
test22PermiteExcavarMultiplesCapas

	| excavadora sueloAExcavar |
	
	sueloAExcavar:= (self crearSueloDosArenaCuarentaTierraCeroArenaCeroConcretoConDiezResistencia).
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self assert: 42 equals: (excavadora calcularProfundidadDelSueloHasta: self crearCapaConcretoConAlturaCeroConResistenciaCinco )."

	! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test20PermiteExcavarCapaVacia stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test21PermiteExcavarCapaUnica stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 22:03:32'!
PASSED!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:03:32'!
ERROR!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:03:32'!
ERROR!
!TestDePerforación methodsFor: 'test' stamp: 'af 5/8/2023 22:04:07' prior: 50653244!
test23NoPermiteExcavarCapasIgualesContiguas

	| excavadora sueloAExcavar |
	sueloAExcavar  :=  {self crearCapaArenosaConAltura: 2. 
					self crearCapaArenosaConAltura: 2. }.
	"sueloAExcavar:= Suelo newWithCapas: {self crearCapaArenosaConAltura: 2. 
					self crearCapaArenosaConAltura: 2. }."
	
	excavadora := Perforadora sobreSuelo: sueloAExcavar.
	
	"self should: [excavadora darGolpeDeTaladro]
		raise: Error
		withExceptionDo: [:unError |
			self assert: 'No puede perforar' equals: unError messageText.
			self assert: (self crearCapaArenosaConAlturaCero ) equals: excavadora capaDeSueloInmediata ].	"! !

!testRun: #TestDePerforación #test01CuandoExcavaSueloArenosoConMechaSoftRemueveCapaArenosa stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test02CuandoExcavaSueloTierraConMechaSoftNoModificaElSuelo stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test03CuandoExcavaConcretoConMechaSoftSeRompeLaMecha stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test04CuandoExcavaSueloArenosoConMechaWidiaRemueveCapaArenosa stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test05CuandoExcavaSueloTierraConMechaWidiaEnDosImpactosTransformaLaCapaEnArenoso stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test06CuandoExcavaSueloConcretoConMechaWidiaEnTresImpactosRompeLaMecha stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test07CuandoExcavaSueloArenosoConMechaDiamanteRompeLaMecha stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test08CuandoExcavaSueloTierraConMechaDiamanteRemueveCapa stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test09CuandoExcavaSueloConcretoConMechaDiamanteBajaUnDecimoDeResistencia stamp: 'af 5/8/2023 22:04:12'!
PASSED!

!testRun: #TestDePerforación #test10CuandoRemueveLaCapaYHayPiedrasLasRecolectaEnSuContainer stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test11CuandoRemueveLaCapaYNoHayNadaNoRecogeNada stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test12NoPuedePerforarSinMecha stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test13PuedeCalcularProfundidadDelSuelo stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test14PuedeContarLasCapasDeTipoArenoso stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test15PuedeContarLasCapasDeTipoTierra stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test16PuedeContarLasCapasDeTipoConcreto stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test17PuedeCalcularProfundidadHastaPrimerCapaDeTipoArenoso stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test18PuedeCalcularProfundidadHastaPrimerCapaDeTipoTierra stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test19PuedeCalcularProfundidadHastaPrimerCapaDeTipoConcreto stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test20PermiteExcavarCapaVacia stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test21PermiteExcavarCapaUnica stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test22PermiteExcavarMultiplesCapas stamp: 'af 5/8/2023 22:04:13'!
PASSED!

!testRun: #TestDePerforación #test23NoPermiteExcavarCapasIgualesContiguas stamp: 'af 5/8/2023 22:04:13'!
PASSED!

----SNAPSHOT----(8 May 2023 22:04:25) CuisUniversity-5706.image priorSource: 10257229!

----SNAPSHOT----(9 May 2023 10:19:07) CuisUniversity-5706.image priorSource: 10302151!

----SNAPSHOT----(9 May 2023 10:19:58) CuisUniversity-5706.image priorSource: 10302239!

----STARTUP---- (10 May 2023 12:17:41) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 5/10/2023 12:18:00'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 5/10/2023 12:18:00'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 12:18:00'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 5/10/2023 12:18:00'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 5/10/2023 12:18:00'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 12:18:06'!
PASSED!

'bca'!

'bca'!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:21:41' prior: 50620461!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	| anagramasTotales |
	anagramasTotales := 	Set new .
	
	set1Anagrams  inject: [] set2Anagrams into:[].
	^set1Anagrams  collect: [:aElementOfSet | self addString: aElementOfSet  toSetOfAnagram: set2Anagrams .]

! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:24:06' prior: 50653634!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	| anagramasTotales |
	anagramasTotales := 	Set new .
	(1 to: set1Anagrams size) do: [:elementoSet1 | (1 to: set2Anagrams size) do: [:elementoSet2 | ]].
	
	^set1Anagrams  collect: [:aElementOfSet | self addString: aElementOfSet  toSetOfAnagram: set2Anagrams .]

! !

'asd' + 'asd'
!

'asd' appendToString: 'bgh'!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:28:38' prior: 50653646!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	| anagramasTotales |
	anagramasTotales := 	Set new .
	(1 to: set1Anagrams size) do: 
	[:elementoSet1 | (1 to: set2Anagrams size) do: 
		[:elementoSet2 | 
			anagramasTotales add: (elementoSet1 appendToString: elementoSet2 )]].
	^anagramasTotales .
	"^set1Anagrams  collect: [:aElementOfSet | self addString: aElementOfSet  toSetOfAnagram: set2Anagrams .]"

! !

set3 := Set with: 'ab' with: 'ba'!

set4 := Set with: 'cd' with: 'dc'!

set4!

res := 'abc' getSetMultipleJoins: set3 secondPart: set4!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:31:04' prior: 50653661!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	| anagramasTotales |
	anagramasTotales := 	Set new .
	(1 to: set1Anagrams size) do: 
	[:indiceSet1 | (1 to: set2Anagrams size) do: 
		[:indiceSet2 | 
			anagramasTotales add: ((set1Anagrams at: indiceSet1) appendToString: (set2Anagrams at: indiceSet2 ) )]].
	^anagramasTotales .
	"^set1Anagrams  collect: [:aElementOfSet | self addString: aElementOfSet  toSetOfAnagram: set2Anagrams .]"

! !

res := 'abc' getSetMultipleJoins: set3 secondPart: set4!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:32:23' prior: 50653682!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	| anagramasTotales |
	anagramasTotales := 	Set new .
	set1Anagrams do: 
	[:indiceSet1 | set2Anagrams do: 
		[:indiceSet2 | 
			anagramasTotales add: ((indiceSet1) appendToString: (indiceSet2 ) )]].
	^anagramasTotales .
	"^set1Anagrams  collect: [:aElementOfSet | self addString: aElementOfSet  toSetOfAnagram: set2Anagrams .]"

! !

res := 'abc' getSetMultipleJoins: set3 secondPart: set4!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:33:01' prior: 50653701!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	| anagramasTotales |
	anagramasTotales := 	Set new .
	set1Anagrams do: 
	[:indiceSet1 | set2Anagrams do: 
		[:indiceSet2 | 
			anagramasTotales add: ((indiceSet2 )  appendToString: (indiceSet1) )]].
	^anagramasTotales .
	"^set1Anagrams  collect: [:aElementOfSet | self addString: aElementOfSet  toSetOfAnagram: set2Anagrams .]"

! !

res := 'abc' getSetMultipleJoins: set3 secondPart: set4!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:33:35' prior: 50653718!
getSetMultipleJoins: set1Anagrams secondPart: set2Anagrams
	| anagramasTotales |
	anagramasTotales := 	Set new .
	set1Anagrams do: 
	[:indiceSet1 | set2Anagrams do: 
		[:indiceSet2 | 
			anagramasTotales add: ((indiceSet2 )  appendToString: (indiceSet1) )]].
	^anagramasTotales .

! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:34:41' prior: 50620375!
addPart1Anagrams: part1Anagrams addPart2Anagrams: part2Anagrams
	| setAnagramasPrimeraParte setAnagramasSegundaParte |
	setAnagramasPrimeraParte := part1Anagrams anagrams.
	setAnagramasSegundaParte := part2Anagrams anagrams.
	^self getSetMultipleJoins: setAnagramasPrimeraParte  secondPart: setAnagramasSegundaParte 
! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:34:53' prior: 50653747!
addPart1Anagrams: part1Anagrams addPart2Anagrams: part2Anagrams
	| setAnagramasPrimeraParte setAnagramasSegundaParte |
	setAnagramasPrimeraParte := part1Anagrams anagrams.
	setAnagramasSegundaParte := part2Anagrams anagrams.
	^self getSetMultipleJoins: setAnagramasPrimeraParte  secondPart: setAnagramasSegundaParte.
! !

'dsdf2w' size
!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:37:51' prior: 50620220!
anagrams
	self = '' ifTrue: [^Set with:''.].
	(self size = 1) ifTrue: [^self anagramsSingleCharacter .].  
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. ! !

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 5/10/2023 12:37:57'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 12:38:02'!
PASSED!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:38:46' prior: 50653774!
anagrams
	| anagramasTotales |
	self = '' ifTrue: [^Set with:''.].
	(self size = 1) ifTrue: [^self anagramsSingleCharacter .].  
	anagramasTotales := Set new.
	
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. ! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:43:58' prior: 50653792!
anagrams
	| anagramasTotales |
	self = '' ifTrue: [^Set with:''.].
	(self size = 1) ifTrue: [^self anagramsSingleCharacter .].  
	
	anagramasTotales := Set new.
	anagramasTotales := (1 to: self size) inject: anagramasTotales into: [:anagramasParciales :indiceActual | 
		(self anagramsFrom: indiceActual) addAll: anagramasTotales . ].
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. ! !

set3!

set4!

set3 addAll: set4
!

set3 addAll: set4
!

set4 := set3 addAll: set4
!

set4!

set4 := set3 addAll: set4!

set3!

set3 := set3 addAll: set4!

set3!

 set3 addAll: set4!

set3!

 set3 addAll: set4!

set3 := set3 addAll: set4!

set3!

set4!

set3 := Set with: 'ab' with: 'ba'!

set4 := Set with: 'cd' with: 'dc'!

set5 := set3 addAll: set4!

set5!

set3!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:47:14' prior: 50653802!
anagrams
	| anagramasTotales |
	self = '' ifTrue: [^Set with:''.].
	(self size = 1) ifTrue: [^self anagramsSingleCharacter .].  
	
	anagramasTotales := Set new.
	anagramasTotales := (1 to: self size) inject: anagramasTotales into: [:anagramasParciales :indiceActual | 
		anagramasTotales addAll: (self anagramsFrom: indiceActual)  . ].
	self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. ! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:47:33' prior: 50653829!
anagrams
	| anagramasTotales |
	self = '' ifTrue: [^Set with:''.].
	(self size = 1) ifTrue: [^self anagramsSingleCharacter .].  
	
	anagramasTotales := Set new.
	anagramasTotales := (1 to: self size) inject: anagramasTotales into: [:anagramasParciales :indiceActual | 
		anagramasTotales addAll: (self anagramsFrom: indiceActual)  . ].
	^ anagramasTotales ."self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. "! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 12:47:35' prior: 50653844!
anagrams
	| anagramasTotales |
	self = '' ifTrue: [^Set with:''.].
	(self size = 1) ifTrue: [^self anagramsSingleCharacter .].  
	
	anagramasTotales := Set new.
	anagramasTotales := (1 to: self size) inject: anagramasTotales into: [:anagramasParciales :indiceActual | 
		anagramasTotales addAll: (self anagramsFrom: indiceActual)  . ].
	^anagramasTotales ."self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. "! !

!testRun: #TDDBabyStepsAnagramsTest #test01EmptyStringAnagramIsJustACollectionWithTheEmptyString stamp: 'af 5/10/2023 12:47:42'!
PASSED!

!testRun: #TDDBabyStepsAnagramsTest #test02OneCharStringAnagramReturnsACollectionWithTheSameOneCharString stamp: 'af 5/10/2023 12:47:47'!
PASSED!

----SNAPSHOT----(10 May 2023 12:47:54) CuisUniversity-5706.image priorSource: 10302327!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 12:47:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 12:47:57'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 5/10/2023 13:02:44'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test04ThreeCharStringAnagramReturnsAllThe6PossibleOrderCombinations stamp: 'af 5/10/2023 13:02:44'!
ERROR!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 13:03:58' prior: 50653860!
anagrams
	| anagramasTotales |
	self = '' ifTrue: [^Set with:''.].
	(self size = 1) ifTrue: [^self anagramsSingleCharacter .].  
	
	anagramasTotales := Set new.
	anagramasTotales := (1 to: (self size)) inject: anagramasTotales into: [:anagramasParciales :indiceActual | 
		anagramasTotales addAll: (self anagramsFrom: indiceActual)  . ].
	^anagramasTotales ."self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. "! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 13:04:07'!
ERROR!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 13:04:07'!
ERROR!

self anagramsFrom: indiceActual!

'hola' anagramsFrom: 2!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 13:09:29' prior: 50620351!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	(self size) <= anIndexToSplitString+1 ifTrue: [^Set new.].
	
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^self addPart1Anagrams: stringPart1 addPart2Anagrams: stringPart2.! !

'hola' anagramsFrom: 2.!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 13:10:52' prior: 50653933!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	((self size) <= (anIndexToSplitString+1)) ifTrue: [^Set new.].
	
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^self addPart1Anagrams: stringPart1 addPart2Anagrams: stringPart2.! !

'hola' anagramsFrom: 2.!

'hola' anagramsFrom: 2.!
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 13:11:48' prior: 50653947!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	((self size) <= (anIndexToSplitString)) ifTrue: [^Set new.].
	
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^self addPart1Anagrams: stringPart1 addPart2Anagrams: stringPart2.! !

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 13:11:55'!
FAILURE!

!testRun: #TDDBabyStepsAnagramsTest #test03TwoCharStringAnagramReturnsTheOriginalStringAndAnotherOneFlipped stamp: 'af 5/10/2023 13:11:55'!
FAILURE!

'hola' anagramsFrom: 2.
!

'hola' anagramsFrom: 3.
!

'hola' anagramsFrom: 1.
!

'hola' anagramsFrom: 1.
!

'ho' anagrams 
!

----STARTUP---- (11 May 2023 23:28:05) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/11/2023 23:28:51'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'af 5/11/2023 23:29:04'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #MarsRover
	instanceVariableNames: 'posicion orientacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'af 5/11/2023 23:29:36'!
Object subclass: #MarsRover
	instanceVariableNames: 'posicion orientacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Object subclass: #Posicion
	instanceVariableNames: 'posicionEjeX posicionEjeY'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Posicion category: 'MarsRover' stamp: 'af 5/11/2023 23:30:20'!
Object subclass: #Posicion
	instanceVariableNames: 'posicionEjeX posicionEjeY'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Posicion class methodsFor: 'nil' stamp: 'af 5/11/2023 23:32:02'!
newPositionAtXCordinate: anXcordinate andYcordinate: anYcordinate
	^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate.! !

!classRenamed: #Posicion as: #Position stamp: 'af 5/11/2023 23:32:28'!
Smalltalk renameClassNamed: #Posicion as: #Position!
!Position methodsFor: 'nil' stamp: 'af 5/11/2023 23:33:21'!
initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate
	posicionEjeX := anXcordinate .
	posicionEjeY  := anYcordinate .
	! !
!Position methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:34:58'!
currentPosition
	^self.! !

(5,7)!

#(5,7)!
!Position methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:36:30' prior: 50654055!
currentPosition 
	^#(posicionEjeX, posicionEjeY ).
	! !


pos := Position newPositionAtXCordinate: 10 andYcordinate: 20!

pos currentPosition 
!
!Position methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:37:43' prior: 50654060!
currentPosition 
	| pos |
	pos := posicionEjeX 
	^#(posicionEjeX posicionEjeY ).
	! !
!Position methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:38:14' prior: 50654068!
currentPosition 
 
	^(posicionEjeX, posicionEjeY ).
	! !

pos := Position newPositionAtXCordinate: 10 andYcordinate: 20
!

pos currentPosition 
!
!Position methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:39:13' prior: 50654074!
currentPosition 
 
	^OrderedCollection with: posicionEjeX with: posicionEjeY .
	! !

pos := Position newPositionAtXCordinate: 10 andYcordinate: 20
!

pos currentPosition 
!
!Position methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:39:55'!
currentXPositionAndYposition
 
	^OrderedCollection with: posicionEjeX with: posicionEjeY .
	! !

!methodRemoval: Position #currentPosition stamp: 'af 5/11/2023 23:40:00'!
currentPosition 
 
	^OrderedCollection with: posicionEjeX with: posicionEjeY .
	!

Object subclass: #Orientation
	instanceVariableNames: 'nameOfOrientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Orientation category: 'MarsRover' stamp: 'af 5/11/2023 23:40:49'!
Object subclass: #Orientation
	instanceVariableNames: 'nameOfOrientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Orientation class methodsFor: 'nil' stamp: 'af 5/11/2023 23:43:10'!
newOrientationAt: anOrientationName
	(self isValidOrientation anOrientationName) ifTrue: []  ifFalse: []
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:43:43' prior: 50654112!
newOrientationAt: anOrientationName
	(self isValidOrientation anOrientationName) 
	ifTrue: []  
	ifFalse: []
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:44:02' prior: 50654122!
newOrientationAt: anOrientationName
	(self isValidOrientation: anOrientationName) 
	ifTrue: []  
	ifFalse: []
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:44:27'!
isValidOrientation: anOrientationName
	^true.! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:45:46' prior: 50654132!
newOrientationAt: anOrientationName
	(self isValidOrientation: anOrientationName) 
	ifTrue: [^(self new) initializeWithOrientation: anOrientationName]  
	ifFalse: [^self error: 'Not A Valid Orientation']
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation methodsFor: 'nil' stamp: 'af 5/11/2023 23:46:27'!
initializeWithOrientation: anOrientationName
	nameOfOrientation := anOrientationName! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:46:53'!
orientation
	^nameOfOrientation! !

ors := Set with: 'N'  with: 'S' with: 'W' with: 'E'
!

ors size 
!

'D' in: ors 
!

Set!

ors includes: 'D'
!

ors includes: 'n'
!

ors includes: 'N'
!
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:50:22' prior: 50654141!
isValidOrientation: anOrientationName
	| orientacionesValidas |
	orientacionesValidas := Set with: 'N'  with: 'S' with: 'W' with: 'E'

	^true.! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:50:48' prior: 50654174!
isValidOrientation: anOrientationName
	| orientacionesValidas |
	orientacionesValidas := Set with: 'N'  with: 'S' with: 'W' with: 'E'.

	^orientacionesValidas includes: anOrientationName .! !

or := Orientation newOrientationAt: 'S'
!

or := Orientation newOrientationAt: 'T'
!

Orientation subclass: #North
	instanceVariableNames: 'nameOfOrientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'af 5/11/2023 23:52:32'!
Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'af 5/11/2023 23:52:36'!
Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'af 5/11/2023 23:52:41'!
Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'af 5/11/2023 23:52:52'!
Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:55:02'!
canHandle: anOrientationName 
	self subclassResponsibility 
! !
!East class methodsFor: 'nil' stamp: 'af 5/11/2023 23:55:44' overrides: 50654240!
canHandle: anOrientationName 
	^anOrientationName='E'.
! !
!North class methodsFor: 'nil' stamp: 'af 5/11/2023 23:55:58' overrides: 50654240!
canHandle: anOrientationName 
	^anOrientationName='N'.! !
!South class methodsFor: 'nil' stamp: 'af 5/11/2023 23:56:07' overrides: 50654240!
canHandle: anOrientationName 
	^anOrientationName='S'.! !
!West class methodsFor: 'nil' stamp: 'af 5/11/2023 23:56:17' overrides: 50654240!
canHandle: anOrientationName 
	^anOrientationName='W'.! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:56:29' prior: 50654240!
canHandle: anOrientationName 
	^self subclassResponsibility 
! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:59:20' prior: 50654146!
newOrientationAt: anOrientationName
	(self isValidOrientation: anOrientationName) 
	
	ifTrue: 
	[^(Orientation allSubclasses  detect:[:aOrientation | aOrientation canHandle: anOrientationName]) newOr] "[^(self new) initializeWithOrientation: anOrientationName]  "
	ifFalse: [^self error: 'Not A Valid Orientation']
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:00:07'!
newOr
	^(self new) initialize.! !

or := Orientation newOrientationAt: 'T'
!

or := Orientation newOrientationAt: 'N'
!

or := Orientation newOrientationAt: 'S'
!

or := Orientation newOrientationAt: 'W'
!
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:01:13' prior: 50654271!
newOrientationAt: anOrientationName
	(self isValidOrientation: anOrientationName) 
	
	ifTrue: 
	[^(Orientation allSubclasses  detect:[:aOrientation | aOrientation canHandle: anOrientationName]) newOr] 
	
	ifFalse: [^self error: 'Not A Valid Orientation']
! !

Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Orientation category: 'MarsRover' stamp: 'af 5/12/2023 00:01:24'!
Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover class methodsFor: 'nil' stamp: 'af 5/12/2023 00:04:17'!
newAtPosition: aPosition andOrientation: anOrientation
	^(self new) initializeWith: aPosition andOrientation: anOrientation.! !
!MarsRover methodsFor: 'nil' stamp: 'af 5/12/2023 00:04:30'!
initializeWith: aPosition andOrientation: anOrientation.
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:04:52' prior: 50654324!
initializeWith: aPosition andOrientation: anOrientation.
posicion  := aPosition.
orientacion  := anOrientation.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:04:55' prior: 50654329!
initializeWith: aPosition andOrientation: anOrientation.
	posicion  := aPosition.
	orientacion  := anOrientation.! !
!Position methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:05:37' prior: 50654090!
currentXPositionAndYposition
 
	^posicionEjeX@posicionEjeY .
	! !

pos := Position newPositionAtXCordinate: 10 andYcordinate: 20
!

pos currentXPositionAndYposition 
!

(pos currentXPositionAndYposition) at: 1
!

posicionInicial := Position newPositionAtXCordinate: 20 andYcordinate: 76.
!

orientacionInicial := Orientation newOrientationAt: 'S'.!

marsRover1 := MarsRover newAtPosition:  posicionInicial andOrientation: orientacionInicial.!
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:13:19'!
rotate90DegreesRight
	^self subclassResponsibility .! !

!methodRemoval: Orientation #orientation stamp: 'af 5/12/2023 00:13:25'!
orientation
	^nameOfOrientation!

!methodRemoval: Orientation #initializeWithOrientation: stamp: 'af 5/12/2023 00:13:30'!
initializeWithOrientation: anOrientationName
	nameOfOrientation := anOrientationName!
!East methodsFor: 'nil' stamp: 'af 5/12/2023 00:14:56' overrides: 50654360!
rotate90DegreesRight
	^South new.! !
!North methodsFor: 'nil' stamp: 'af 5/12/2023 00:15:13' overrides: 50654360!
rotate90DegreesRight
	^East new.! !
!South methodsFor: 'nil' stamp: 'af 5/12/2023 00:15:24' overrides: 50654360!
rotate90DegreesRight
	^West new.! !
!West methodsFor: 'nil' stamp: 'af 5/12/2023 00:15:37' overrides: 50654360!
rotate90DegreesRight
	^North new.! !
!East methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:16:01'!
rotate90DegreesLeft
	^North new.! !

orientacionInicial := Orientation newOrientationAt: 'S'.
!

orientacionInicial rotate90DegreesRight 
!
!North methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:17:27'!
rotate90DegreesLeft
	^West new.! !
!South methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:17:58'!
rotate90DegreesLeft
	^East new.! !
!West methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:18:20'!
rotate90DegreesLeft
	^South new.! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:18:57'!
rotate90DegreesLeft
	^self subclassResponsibility .! !

orientacionInicial rotate90DegreesRight.
!

orientacionInicial rotate90DegreesRight.
!

orientacionInicial rotate90DegreesLeft .
!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:20:35'!
rotate90DegreesLeft
	orientacion := orientacion rotate90DegreesLeft.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:20:45'!
rotate90DegreesRight
	orientacion := orientacion rotate90DegreesRight.! !

----STARTUP---- (11 May 2023 21:24:15) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!

!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 13:03:58' prior: 50653860!
anagrams
	| anagramasTotales |
	self = '' ifTrue: [^Set with:''.].
	(self size = 1) ifTrue: [^self anagramsSingleCharacter .].  
	
	anagramasTotales := Set new.
	anagramasTotales := (1 to: (self size)) inject: anagramasTotales into: [:anagramasParciales :indiceActual | 
		anagramasTotales addAll: (self anagramsFrom: indiceActual)  . ].
	^anagramasTotales ."self = 'ab' ifTrue: [^Set with:'ab' with: 'ba'.]. "! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 13:09:29' prior: 50620351!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	(self size) <= anIndexToSplitString+1 ifTrue: [^Set new.].
	
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^self addPart1Anagrams: stringPart1 addPart2Anagrams: stringPart2.! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 13:10:52' prior: 50654448!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	((self size) <= (anIndexToSplitString+1)) ifTrue: [^Set new.].
	
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^self addPart1Anagrams: stringPart1 addPart2Anagrams: stringPart2.! !
!String methodsFor: 'anagramsCategory' stamp: 'af 5/10/2023 13:11:48' prior: 50654461!
anagramsFrom: anIndexToSplitString
	| stringPart1 stringPart2 |
	((self size) <= (anIndexToSplitString)) ifTrue: [^Set new.].
	
	stringPart1 := self copyFrom:1to: anIndexToSplitString.
	stringPart2 := self copyFrom:(anIndexToSplitString+1) to: (self size).

	^self addPart1Anagrams: stringPart1 addPart2Anagrams: stringPart2.! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/11/2023 21:24:17'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/11/2023 21:24:17'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'af 5/11/2023 21:24:17'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'af 5/11/2023 21:24:17'!
Object subclass: #MarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'af 5/11/2023 21:24:17'!
Object subclass: #MarsRover
	instanceVariableNames: 'posicion orientacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'af 5/11/2023 21:24:17'!
Object subclass: #MarsRover
	instanceVariableNames: 'posicion orientacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Posicion category: 'MarsRover' stamp: 'af 5/11/2023 21:24:17'!
Object subclass: #Posicion
	instanceVariableNames: 'posicionEjeX posicionEjeY'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Posicion category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Object subclass: #Posicion
	instanceVariableNames: 'posicionEjeX posicionEjeY'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Posicion class methodsFor: 'nil' stamp: 'af 5/11/2023 23:32:02'!
newPositionAtXCordinate: anXcordinate andYcordinate: anYcordinate
	^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate.! !

!classDefinition: #Orientation category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Object subclass: #Orientation
	instanceVariableNames: 'nameOfOrientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Orientation category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Object subclass: #Orientation
	instanceVariableNames: 'nameOfOrientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Orientation class methodsFor: 'nil' stamp: 'af 5/11/2023 23:43:10'!
newOrientationAt: anOrientationName
	(self isValidOrientation anOrientationName) ifTrue: []  ifFalse: []
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:43:43' prior: 50654565!
newOrientationAt: anOrientationName
	(self isValidOrientation anOrientationName) 
	ifTrue: []  
	ifFalse: []
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:44:02' prior: 50654575!
newOrientationAt: anOrientationName
	(self isValidOrientation: anOrientationName) 
	ifTrue: []  
	ifFalse: []
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:44:27'!
isValidOrientation: anOrientationName
	^true.! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:45:46' prior: 50654585!
newOrientationAt: anOrientationName
	(self isValidOrientation: anOrientationName) 
	ifTrue: [^(self new) initializeWithOrientation: anOrientationName]  
	ifFalse: [^self error: 'Not A Valid Orientation']
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation methodsFor: 'nil' stamp: 'af 5/11/2023 23:46:27'!
initializeWithOrientation: anOrientationName
	nameOfOrientation := anOrientationName! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:46:53'!
orientation
	^nameOfOrientation! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:50:22' prior: 50654594!
isValidOrientation: anOrientationName
	| orientacionesValidas |
	orientacionesValidas := Set with: 'N'  with: 'S' with: 'W' with: 'E'

	^true.! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:50:48' prior: 50654622!
isValidOrientation: anOrientationName
	| orientacionesValidas |
	orientacionesValidas := Set with: 'N'  with: 'S' with: 'W' with: 'E'.

	^orientacionesValidas includes: anOrientationName .! !

!classDefinition: #North category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #North category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Orientation subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #South category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Orientation subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #East category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Orientation subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #West category: 'MarsRover' stamp: 'af 5/11/2023 21:24:18'!
Orientation subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:55:02'!
canHandle: anOrientationName 
	self subclassResponsibility 
! !
!East class methodsFor: 'nil' stamp: 'af 5/11/2023 23:55:44' overrides: 50654690!
canHandle: anOrientationName 
	^anOrientationName='E'.
! !
!North class methodsFor: 'nil' stamp: 'af 5/11/2023 23:55:58' overrides: 50654690!
canHandle: anOrientationName 
	^anOrientationName='N'.! !
!South class methodsFor: 'nil' stamp: 'af 5/11/2023 23:56:07' overrides: 50654690!
canHandle: anOrientationName 
	^anOrientationName='S'.! !
!West class methodsFor: 'nil' stamp: 'af 5/11/2023 23:56:17' overrides: 50654690!
canHandle: anOrientationName 
	^anOrientationName='W'.! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:56:29' prior: 50654690!
canHandle: anOrientationName 
	^self subclassResponsibility 
! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 23:59:20' prior: 50654599!
newOrientationAt: anOrientationName
	(self isValidOrientation: anOrientationName) 
	
	ifTrue: 
	[^(Orientation allSubclasses  detect:[:aOrientation | aOrientation canHandle: anOrientationName]) newOr] "[^(self new) initializeWithOrientation: anOrientationName]  "
	ifFalse: [^self error: 'Not A Valid Orientation']
	"^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate."! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:00:07'!
newOr
	^(self new) initialize.! !
!Orientation class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:01:13' prior: 50654721!
newOrientationAt: anOrientationName
	(self isValidOrientation: anOrientationName) 
	
	ifTrue: 
	[^(Orientation allSubclasses  detect:[:aOrientation | aOrientation canHandle: anOrientationName]) newOr] 
	
	ifFalse: [^self error: 'Not A Valid Orientation']
! !

!classDefinition: #Orientation category: 'MarsRover' stamp: 'af 5/11/2023 21:24:19'!
Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Orientation category: 'MarsRover' stamp: 'af 5/11/2023 21:24:19'!
Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover class methodsFor: 'nil' stamp: 'af 5/12/2023 00:04:17'!
newAtPosition: aPosition andOrientation: anOrientation
	^(self new) initializeWith: aPosition andOrientation: anOrientation.! !
!MarsRover methodsFor: 'nil' stamp: 'af 5/12/2023 00:04:30'!
initializeWith: aPosition andOrientation: anOrientation.
! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:04:52' prior: 50654772!
initializeWith: aPosition andOrientation: anOrientation.
posicion  := aPosition.
orientacion  := anOrientation.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:04:55' prior: 50654777!
initializeWith: aPosition andOrientation: anOrientation.
	posicion  := aPosition.
	orientacion  := anOrientation.! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:13:19'!
rotate90DegreesRight
	^self subclassResponsibility .! !

!methodRemoval: Orientation #orientation stamp: 'af 5/11/2023 21:24:19'!
orientation
	^nameOfOrientation!

!methodRemoval: Orientation #initializeWithOrientation: stamp: 'af 5/11/2023 21:24:19'!
initializeWithOrientation: anOrientationName
	nameOfOrientation := anOrientationName!
!East methodsFor: 'nil' stamp: 'af 5/12/2023 00:14:56' overrides: 50654791!
rotate90DegreesRight
	^South new.! !
!North methodsFor: 'nil' stamp: 'af 5/12/2023 00:15:13' overrides: 50654791!
rotate90DegreesRight
	^East new.! !
!South methodsFor: 'nil' stamp: 'af 5/12/2023 00:15:24' overrides: 50654791!
rotate90DegreesRight
	^West new.! !
!West methodsFor: 'nil' stamp: 'af 5/12/2023 00:15:37' overrides: 50654791!
rotate90DegreesRight
	^North new.! !
!East methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:16:01'!
rotate90DegreesLeft
	^North new.! !
!North methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:17:27'!
rotate90DegreesLeft
	^West new.! !
!South methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:17:58'!
rotate90DegreesLeft
	^East new.! !
!West methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:18:20'!
rotate90DegreesLeft
	^South new.! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:18:57'!
rotate90DegreesLeft
	^self subclassResponsibility .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:20:35'!
rotate90DegreesLeft
	orientacion := orientacion rotate90DegreesLeft.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 00:20:45'!
rotate90DegreesRight
	orientacion := orientacion rotate90DegreesRight.! !

posInicial := Posicion newPositionAtXCordinate: 13 andYcordinate: 45!
!Posicion methodsFor: 'nil' stamp: 'af 5/11/2023 21:28:34'!
initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate.
	posicionEjeX  := anXcordinate .
	posicionEjeY  := anYcordinate .! !

posInicial := Posicion newPositionAtXCordinate: 13 andYcordinate: 45!
!Posicion methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:29:04'!
position
	^posicionEjeX@posicionEjeY.! !

posInicial position !

posInicial position !

posInicial position. !

orientacionInicial := Orientation newOrientationAt: 'W'!

marsRover1 := MarsRover newAtPosition: posInicial andOrientation: orientacionInicial !

marsRover1 rotate90DegreesLeft !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:33:59'!
avanzar
	^orientacion avanzarAlMars: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:34:18'!
retroceder
	^orientacion retrocederAlMars: self.! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:35:33'!
retrocederAlMars: aMarsRover
^self subclassResponsibility.! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:35:45'!
avanzarAlMars: aMarsRover
^self subclassResponsibility.! !
!Posicion methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:37:56'!
moverUnPuntoNorth
	^posicionEjeY :=  posicionEjeY+1.! !
!Posicion methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:38:05'!
moverUnPuntoSouth
	^posicionEjeY :=  posicionEjeY-1.! !
!Posicion methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:38:33'!
moverUnPuntoEast
	^posicionEjeX :=  posicionEjeX+1.! !
!Posicion methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:38:44'!
moverUnPuntoWest
	^posicionEjeX :=  posicionEjeX-1.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:40:16'!
posicion
	^posicion .! !

marsRover1 posicion!

(marsRover1 posicion) moverUnPuntoNorth .!

marsRover1!
!North methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:42:22' overrides: 50654888!
avanzarAlMars: aMarsRover
^(aMarsRover posicion) moverUnPuntoNorth .! !
!East methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:42:38' overrides: 50654888!
avanzarAlMars: aMarsRover
^(aMarsRover posicion) moverUnPuntoEast .! !
!South methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:42:49' overrides: 50654888!
avanzarAlMars: aMarsRover
^(aMarsRover posicion) moverUnPuntoSouth .! !
!West methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:43:00' overrides: 50654888!
avanzarAlMars: aMarsRover
^(aMarsRover posicion) moverUnPuntoWest .! !
!East methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:43:43' overrides: 50654883!
retrocederAlMars: aMarsRover
^(aMarsRover posicion) moverUnPuntoWest .! !
!North methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:43:57' overrides: 50654883!
retrocederAlMars: aMarsRover
^(aMarsRover posicion) moverUnPuntoSouth .! !
!South methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:44:13' overrides: 50654883!
retrocederAlMars: aMarsRover
^(aMarsRover posicion) moverUnPuntoNorth .! !
!West methodsFor: 'as yet unclassified' stamp: 'af 5/11/2023 21:44:28' overrides: 50654883!
retrocederAlMars: aMarsRover
^(aMarsRover posicion) moverUnPuntoEast .! !

----SNAPSHOT----(11 May 2023 21:45:52) CuisUniversity-5706.image priorSource: 10311480!

marsRover1 := MarsRover newAtPosition: posInicial andOrientation: orientacionInicial .
!

marsRover1 rotate90DegreesRight
!

marsRover1!

marsRover1 avanzar
!

marsRover1 := MarsRover newAtPosition: posInicial andOrientation: orientacionInicial .
!

marsRover1 rotate90DegreesRight
!

marsRover1 avanzar
!

^(aMarsRover posicion) !

^(aMarsRover posicion) !

^(aMarsRover1 posicion) !

aMarsRover1!

^(marsRover1 posicion) !

marsRover1 := MarsRover newAtPosition: posInicial andOrientation: orientacionInicial .
!

marsRover1 rotate90DegreesRight
!

marsRover1 avanzar
!

^(marsRover1 posicion) !

marsRover1!

posInicial := Posicion newPositionAtXCordinate: 13 andYcordinate: 45
!

orientacionInicial := Orientation newOrientationAt: 'W'
!

marsRover1 := MarsRover newAtPosition: posInicial andOrientation: orientacionInicial .
!

marsRover1 rotate90DegreesRight
!

marsRover1 avanzar
!

^(marsRover1 posicion) !

 a Posicion !

marsRover1!

----SNAPSHOT----(11 May 2023 21:55:43) CuisUniversity-5706.image priorSource: 10346121!

----SNAPSHOT----(11 May 2023 22:14:35) CuisUniversity-5706.image priorSource: 10347154!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:47:28'!
rotate90DegreesLeftFromEast
	orientacion := North new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:47:53'!
rotate90DegreesLeftFromWest
	orientacion := South new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:48:10'!
rotate90DegreesLeftFromNorth
	orientacion := West new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:48:31'!
rotate90DegreesLeftFromSouth
	orientacion := East new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:48:56'!
rotate90DegreesRightFromEast
	orientacion := South new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:49:05' prior: 50655015!
rotate90DegreesLeftFromNorth
	orientacion := East new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:49:31' prior: 50655030!
rotate90DegreesLeftFromNorth
	orientacion := West new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:49:41'!
rotate90DegreesRightFromNorth
	orientacion := East new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:50:01'!
rotate90DegreesRightFromSouth
	orientacion := West new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:50:28'!
rotate90DegreesRightFromWest
	orientacion := North new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:51:12' prior: 50654841!
rotate90DegreesLeft
	orientacion rotate90DegreesLeftMarsRover: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:51:53' prior: 50654846!
rotate90DegreesRight
	orientacion rotate90DegreesRightMarsRover: self.! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:52:18'!
rotate90DegreesLeftMarsRover: aMarsRover
	^self subclassResponsibility .! !
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:52:25'!
rotate90DegreesRightMarsRover: aMarsRover
	^self subclassResponsibility .! !

!methodRemoval: Orientation #rotate90DegreesRight stamp: 'af 5/12/2023 14:52:33'!
rotate90DegreesRight
	^self subclassResponsibility .!

!methodRemoval: Orientation #rotate90DegreesLeft stamp: 'af 5/12/2023 14:52:38'!
rotate90DegreesLeft
	^self subclassResponsibility .!
!East methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:53:55' overrides: 50655066!
rotate90DegreesLeftMarsRover: aMarsRover
	^aMarsRover rotate90DegreesLeftFromEast .! !
!East methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:54:26' overrides: 50655071!
rotate90DegreesRightMarsRover: aMarsRover
	^aMarsRover rotate90DegreesRightFromEast .! !
!North methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:55:08' overrides: 50655071!
rotate90DegreesRightMarsRover: aMarsRover
	^aMarsRover rotate90DegreesRightFromNorth .! !
!North methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:55:20' overrides: 50655066!
rotate90DegreesLeftMarsRover: aMarsRover
	^aMarsRover rotate90DegreesLeftFromNorth .! !
!South methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:56:06' overrides: 50655071!
rotate90DegreesRightMarsRover: aMarsRover
	^aMarsRover rotate90DegreesRightFromSouth .! !
!South methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:56:21' overrides: 50655066!
rotate90DegreesLeftMarsRover: aMarsRover
	^aMarsRover rotate90DegreesLeftFromSouth .! !
!West methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:57:05' overrides: 50655071!
rotate90DegreesRightMarsRover: aMarsRover
	^aMarsRover rotate90DegreesRightFromWest.! !
!West methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 14:57:19' overrides: 50655066!
rotate90DegreesLeftMarsRover: aMarsRover
	^aMarsRover rotate90DegreesLeftFromWest.! !

posInicial := Posicion newPositionAtXCordinate: 13 andYcordinate: 45
!

posInicial position.  13@45  
!

orientacionInicial := Orientation newOrientationAt: 'W'
!

marsRover1 := MarsRover newAtPosition: posInicial andOrientation: orientacionInicial .
!

marsRover1 rotate90DegreesRight
!

marsRover1 avanzar
!

(marsRover1 posicion)!

(marsRover1 posicion)!

(marsRover1 posicion) !

!methodRemoval: East #rotate90DegreesLeft stamp: 'af 5/12/2023 14:58:53'!
rotate90DegreesLeft
	^North new.!

!methodRemoval: East #rotate90DegreesRight stamp: 'af 5/12/2023 14:58:57'!
rotate90DegreesRight
	^South new.!

!methodRemoval: North #rotate90DegreesRight stamp: 'af 5/12/2023 14:59:03'!
rotate90DegreesRight
	^East new.!

!methodRemoval: North #rotate90DegreesLeft stamp: 'af 5/12/2023 14:59:07'!
rotate90DegreesLeft
	^West new.!

!methodRemoval: South #rotate90DegreesRight stamp: 'af 5/12/2023 14:59:15'!
rotate90DegreesRight
	^West new.!

!methodRemoval: South #rotate90DegreesLeft stamp: 'af 5/12/2023 14:59:19'!
rotate90DegreesLeft
	^East new.!

!methodRemoval: West #rotate90DegreesRight stamp: 'af 5/12/2023 14:59:25'!
rotate90DegreesRight
	^North new.!

!methodRemoval: West #rotate90DegreesLeft stamp: 'af 5/12/2023 14:59:29'!
rotate90DegreesLeft
	^South new.!
!MarsRover methodsFor: 'locationAndStatus' stamp: 'af 5/12/2023 15:03:06'!
orientation
	^orientacion .! !
!MarsRoverTest methodsFor: 'nil' stamp: 'af 5/12/2023 15:10:36'!
test0MarsRoverIsCorrectlyInitializedInAPosition
	! !

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/12/2023 15:14:06'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/12/2023 15:14:08'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition north'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/12/2023 15:14:09'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition north south'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/12/2023 15:14:10'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition north south east'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/12/2023 15:14:12'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition north south east west'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #MarsRoverTest category: 'MarsRover' stamp: 'af 5/12/2023 15:14:13'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition north south east west marsRoverCuriosity'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:14:04' overrides: 16961394!
setUp
	initialPosition := Posicion newPositionAtXCordinate: 0 andYcordinate: 0.
	north := North new.
	south := South new.
	east := East new.
	west := West new.
	marsRoverCuriosity := MarsRover newAtPosition: initialPosition andOrientation: north.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:15:11' prior: 50655175!
test0MarsRoverIsCorrectlyInitializedInAPosition
	self assert: marsRoverCuriosity position  .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:15:51' prior: 50655238!
test0MarsRoverIsCorrectlyInitializedInAPosition
	self assert: marsRoverCuriosity position  equals: initialPosition .! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:15:55'!
ERROR!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:15:55'!
ERROR!
!MarsRover methodsFor: 'locationAndStatus' stamp: 'af 5/12/2023 15:16:22'!
position
	^posicion .! !

!methodRemoval: MarsRover #posicion stamp: 'af 5/12/2023 15:16:32'!
posicion
	^posicion .!
!East methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 15:16:40' prior: 50654926 overrides: 50654888!
avanzarAlMars: aMarsRover
^(aMarsRover position ) moverUnPuntoEast .! !
!East methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 15:16:45' prior: 50654944 overrides: 50654883!
retrocederAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoWest .! !
!North methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 15:16:49' prior: 50654920 overrides: 50654888!
avanzarAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoNorth .! !
!North methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 15:16:53' prior: 50654950 overrides: 50654883!
retrocederAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoSouth .! !
!South methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 15:16:57' prior: 50654932 overrides: 50654888!
avanzarAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoSouth .! !
!South methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 15:17:00' prior: 50654956 overrides: 50654883!
retrocederAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoNorth .! !
!West methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 15:17:04' prior: 50654938 overrides: 50654888!
avanzarAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoWest .! !
!West methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 15:17:08' prior: 50654962 overrides: 50654883!
retrocederAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoEast .! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:17:39'!
PASSED!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:17:44'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:19:19'!
test2MarsRoverMovesFowardCorrectlyWhenFacingNorth
	self assert: marsRoverCuriosity position  equals: initialPosition .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:19:35'!
test1MarsRoverIsCorrectlyInitializedInOrientation
	self assert: marsRoverCuriosity orientation  equals: north .! !

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:19:39'!
PASSED!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:19:42'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:19:42'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:19:42'!
PASSED!

(marsRover1 posicion)!

(marsRover1 position)!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:21:46' prior: 50655321!
test2MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity avanzar.
	coordenada_0_1 := Posicion newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: marsRoverCuriosity position equals: initialPosition .! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:21:55' prior: 50655351!
test2MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity avanzar.
	coordenada_0_1 := Posicion newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: marsRoverCuriosity position equals: coordenada_0_1 .! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:22:02'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:22:02'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:22:02'!
FAILURE!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:22:02'!
FAILURE!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:23:42' prior: 50655362!
test2MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity avanzar.
	coordenada_0_1 := Posicion newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: marsRoverCuriosity position .! !

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:23:45'!
FAILURE!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:23:45'!
FAILURE!

!classRenamed: #Posicion as: #PositionOfMarsRover stamp: 'af 5/12/2023 15:24:37'!
Smalltalk renameClassNamed: #Posicion as: #PositionOfMarsRover!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:24:37' prior: 50655227 overrides: 16961394!
setUp
	initialPosition := PositionOfMarsRover newPositionAtXCordinate: 0 andYcordinate: 0.
	north := North new.
	south := South new.
	east := East new.
	west := West new.
	marsRoverCuriosity := MarsRover newAtPosition: initialPosition andOrientation: north.
	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:24:37' prior: 50655388!
test2MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity avanzar.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: marsRoverCuriosity position .! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:25:23'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:25:23'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:25:23'!
FAILURE!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:25:23'!
FAILURE!

posInicial := PositionOfMarsRover newPositionAtXCordinate: 0 andYcordinate: 0
!

orientacionInicial := Orientation newOrientationAt: 'N'
!

marsRover1 := MarsRover newAtPosition: posInicial andOrientation: orientacionInicial .
!

marsRover1 avanzar
!

marsRover1!

(marsRover1 position)!

PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
!

(marsRover1 position)!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:30:24'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:30:24'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:30:24'!
FAILURE!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:30:24'!
FAILURE!

marsRoverCuriosity position!

coordenada_0_1!

marsRoverCuriosity position!

coordenada_0_1!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:31:45' prior: 50655424!
test2MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity avanzar.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:31:50'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:31:50'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:31:50'!
FAILURE!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:31:50'!
FAILURE!

coordenada_0_1!

marsRoverCuriosity position!

coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
!

coordenada_0_1 class
!

coordenada_0_1 class = (marsRover1 position) class!

!methodRemoval: PositionOfMarsRover class #newPositionAtXCordinate:andYcordinate: stamp: 'af 5/12/2023 15:35:24'!
newPositionAtXCordinate: anXcordinate andYcordinate: anYcordinate
	^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate.!
!PositionOfMarsRover class methodsFor: 'nil' stamp: 'af 5/12/2023 15:35:26'!
newPositionAtXCordinate: anXcordinate andYcordinate: anYcordinate
	^(self new) initializeWithXCordinate: anXcordinate andYcordinate: anYcordinate.! !

coordenada_0_1 class = (marsRover1 position) class
!

----SNAPSHOT----(12 May 2023 15:35:36) CuisUniversity-5706.image priorSource: 10347243!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:35:46'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:35:46'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:35:46'!
FAILURE!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:35:46'!
FAILURE!
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:38:35' overrides: 16901772!
= anotherPositionOfMarsRiver
	^(self position = anotherPositionOfMarsRiver  position ).! !

2@4 = 2@4
!

2@4 = 2@4!

(2@4) = (2@4)!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:39:22'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:39:22'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:39:22'!
PASSED!
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:41:13'!
test2MarsRoverMovesBackwardsCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity retroceder .
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:41:32' prior: 50655566!
test2MarsRoverMovesBackwardsCorrectlyWhenFacingNorth
	| coordenada_0_Minus1 |
	marsRoverCuriosity retroceder .
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:41:37'!
test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth
	| coordenada_0_Minus1 |
	marsRoverCuriosity retroceder .
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !

!methodRemoval: MarsRoverTest #test2MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:41:42'!
test2MarsRoverMovesBackwardsCorrectlyWhenFacingNorth
	| coordenada_0_Minus1 |
	marsRoverCuriosity retroceder .
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:41:46'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:41:46'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:45:09'!
test4MarsRoverFacesEastWhenRotatingRightFromNorth
	marsRoverCuriosity rotate90DegreesRight .
	self assert: east equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:45:12'!
FAILURE!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:45:12'!
FAILURE!
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 15:45:54' overrides: 16901772!
= anotherOrientation
	^self class = anotherOrientation class.! !

(North new) = (South new)!

(North new) = (North new)!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:46:36'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:46:36'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:46:36'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:46:36'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:46:36'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:47:31'!
test4MarsRoverFacesSouthWhenRotatingRightFromEast
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: south equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:47:35'!
test5MarsRoverFacesSouthWhenRotatingRightFromEast
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: south equals: (marsRoverCuriosity orientation ).! !

!methodRemoval: MarsRoverTest #test4MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:47:45'!
test4MarsRoverFacesSouthWhenRotatingRightFromEast
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: south equals: (marsRoverCuriosity orientation ).!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:47:51'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:47:51'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:47:51'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:47:51'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:47:51'!
PASSED!

!testRun: #MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:47:51'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:48:21'!
test6MarsRoverFacesWestWhenRotatingRightFromSouth
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: west equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:48:24'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:48:24'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:48:24'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:48:24'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:48:24'!
PASSED!

!testRun: #MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:48:24'!
PASSED!

!testRun: #MarsRoverTest #test6MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 15:48:24'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:48:49'!
test6MarsRoverFacesNorthWhenRotatingRightFromWest
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: north equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:48:53'!
test7MarsRoverFacesNorthWhenRotatingRightFromWest
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: north equals: (marsRoverCuriosity orientation ).! !

!methodRemoval: MarsRoverTest #test6MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 15:48:59'!
test6MarsRoverFacesNorthWhenRotatingRightFromWest
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: north equals: (marsRoverCuriosity orientation ).!

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:49:06'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:49:06'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:49:06'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:49:06'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:49:06'!
PASSED!

!testRun: #MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:49:06'!
PASSED!

!testRun: #MarsRoverTest #test6MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 15:49:06'!
PASSED!

!testRun: #MarsRoverTest #test7MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 15:49:06'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:53:23'!
test8MarsRoverFacesWestWhenRotatingLeftFromNorth
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: west equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTest #test6MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTest #test7MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 15:53:29'!
PASSED!

!testRun: #MarsRoverTest #test8MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 15:53:29'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:53:52'!
test9MarsRoverFacesSouthWhenRotatingLeftFromWest
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: south equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test6MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test7MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test8MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 15:53:55'!
PASSED!

!testRun: #MarsRoverTest #test9MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 15:53:56'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:54:37'!
test10MarsRoverFacesEastWhenRotatingLeftFromSouth
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: south equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 15:55:05'!
FAILURE!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test6MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test7MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test8MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test9MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 15:55:05'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 15:55:06'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:55:13' prior: 50655905!
test10MarsRoverFacesEastWhenRotatingLeftFromSouth
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: east equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test6MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test7MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test8MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 15:55:16'!
PASSED!

!testRun: #MarsRoverTest #test9MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 15:55:16'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:56:19'!
test00MarsRoverIsCorrectlyInitializedInAPosition
	self assert: marsRoverCuriosity position  equals: initialPosition .! !

!methodRemoval: MarsRoverTest #test0MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:56:24'!
test0MarsRoverIsCorrectlyInitializedInAPosition
	self assert: marsRoverCuriosity position  equals: initialPosition .!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:56:29'!
test01MarsRoverIsCorrectlyInitializedInOrientation
	self assert: marsRoverCuriosity orientation  equals: north .! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:56:34'!
test02MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity avanzar.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:56:39'!
test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth
	| coordenada_0_Minus1 |
	marsRoverCuriosity retroceder .
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:56:46'!
test04MarsRoverFacesEastWhenRotatingRightFromNorth
	marsRoverCuriosity rotate90DegreesRight .
	self assert: east equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:56:52'!
test05MarsRoverFacesSouthWhenRotatingRightFromEast
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: south equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:56:58'!
test06MarsRoverFacesWestWhenRotatingRightFromSouth
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: west equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:57:03'!
test07MarsRoverFacesNorthWhenRotatingRightFromWest
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: north equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:57:08'!
test08MarsRoverFacesWestWhenRotatingLeftFromNorth
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: west equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 15:57:14'!
test09MarsRoverFacesSouthWhenRotatingLeftFromWest
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: south equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test6MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test7MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test8MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!testRun: #MarsRoverTest #test9MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 15:57:20'!
PASSED!

!methodRemoval: MarsRoverTest #test1MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 15:57:26'!
test1MarsRoverIsCorrectlyInitializedInOrientation
	self assert: marsRoverCuriosity orientation  equals: north .!

----SNAPSHOT----(12 May 2023 15:57:46) CuisUniversity-5706.image priorSource: 10364107!

----SNAPSHOT----(12 May 2023 16:01:02) CuisUniversity-5706.image priorSource: 10385176!

!methodRemoval: MarsRoverTest #test2MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:26:58'!
test2MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity avanzar.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).!

!methodRemoval: MarsRoverTest #test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:27:01'!
test3MarsRoverMovesBackwardsCorrectlyWhenFacingNorth
	| coordenada_0_Minus1 |
	marsRoverCuriosity retroceder .
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).!

!methodRemoval: MarsRoverTest #test4MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:27:04'!
test4MarsRoverFacesEastWhenRotatingRightFromNorth
	marsRoverCuriosity rotate90DegreesRight .
	self assert: east equals: (marsRoverCuriosity orientation ).!

!methodRemoval: MarsRoverTest #test5MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:27:07'!
test5MarsRoverFacesSouthWhenRotatingRightFromEast
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: south equals: (marsRoverCuriosity orientation ).!

!methodRemoval: MarsRoverTest #test6MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:27:12'!
test6MarsRoverFacesWestWhenRotatingRightFromSouth
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: west equals: (marsRoverCuriosity orientation ).!

!methodRemoval: MarsRoverTest #test7MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:27:16'!
test7MarsRoverFacesNorthWhenRotatingRightFromWest
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity rotate90DegreesRight .
	self assert: north equals: (marsRoverCuriosity orientation ).!

!methodRemoval: MarsRoverTest #test8MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:27:19'!
test8MarsRoverFacesWestWhenRotatingLeftFromNorth
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: west equals: (marsRoverCuriosity orientation ).!

!methodRemoval: MarsRoverTest #test9MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:27:24'!
test9MarsRoverFacesSouthWhenRotatingLeftFromWest
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: south equals: (marsRoverCuriosity orientation ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:28:02'!
test11MarsRoverFacesNorthWhenRotatingLeftFromEast
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	self assert: north equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 16:28:10'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 16:28:10'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:30:37'!
test12MarsRoverMovesFowardCorrectlyWhenFacingEast 
	| coordenada_1_0 |
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity avanzar.
	coordenada_1_0 := PositionOfMarsRover newPositionAtXCordinate: 1  andYcordinate: 0.
	self assert: coordenada_1_0 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 16:30:41'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:30:41'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:31:23'!
test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast 
	| coordenada_Minus1_0 |
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity retroceder .
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:31:32'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:31:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:32:49'!
test12MarsRoverMovesFowardCorrectlyWhenFacingWest 
	| coordenada_Minus1_0 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity avanzar.
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:32:56'!
test14MarsRoverMovesFowardCorrectlyWhenFacingWest 
	| coordenada_Minus1_0 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity avanzar.
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).! !

!methodRemoval: MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:33:02'!
test12MarsRoverMovesFowardCorrectlyWhenFacingWest 
	| coordenada_Minus1_0 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity avanzar.
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:33:08'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:33:08'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:33:39'!
test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest 
	| coordenada_1_0 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity retroceder .
	coordenada_1_0 := PositionOfMarsRover newPositionAtXCordinate: 1  andYcordinate: 0.
	self assert: coordenada_1_0 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:33:46'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:33:46'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:35:13'!
test14MarsRoverMovesFowardCorrectlyWhenFacingSouth
	| coordenada_0_Minus1 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity avanzar.
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:35:19'!
test16MarsRoverMovesFowardCorrectlyWhenFacingSouth
	| coordenada_0_Minus1 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity avanzar.
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !

!methodRemoval: MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 16:35:25'!
test14MarsRoverMovesFowardCorrectlyWhenFacingSouth
	| coordenada_0_Minus1 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity avanzar.
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:35:32'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 16:35:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:36:30'!
test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth
	| coordenada_0_1 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity retroceder .
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 16:36:33'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 16:36:33'!
PASSED!

Object subclass: #Command
	instanceVariableNames: 'signals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Command category: 'MarsRover' stamp: 'af 5/12/2023 16:42:07'!
Object subclass: #Command
	instanceVariableNames: 'signals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:44:27'!
test18MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_0_1 commandFoward |
	commandFoward := Command newWithSignal: 'f'.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:45:59' prior: 50656817!
test18MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_0_1 commandFoward |
	
	commandFoward := Command newWithSignal: 'f'.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	
	marsRoverCuriosity followCommand: commandFoward .
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 16:46:05'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 16:46:05'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 16:46:05'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:47:37'!
test19MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_0_1 commandFoward |
	
	commandFoward := Command newWithSignal: 'f'.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	
	marsRoverCuriosity followCommand: commandFoward .
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 16:49:06'!
test18MarsRoverDoesNothingWhenRecievesBlankCommand
	|  commandBlank |
	
	commandBlank := Command newWithSignal: ''.
	
	marsRoverCuriosity followCommand: commandBlank .
	
	self assert: initialPosition equals: (marsRoverCuriosity position ).
	self assert: north equals: (marsRoverCuriosity orientation ).! !

!methodRemoval: MarsRoverTest #test18MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 16:49:16'!
test18MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_0_1 commandFoward |
	
	commandFoward := Command newWithSignal: 'f'.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	
	marsRoverCuriosity followCommand: commandFoward .
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).!

----SNAPSHOT----(12 May 2023 16:49:52) CuisUniversity-5706.image priorSource: 10385265!
!Command class methodsFor: 'nil' stamp: 'af 5/12/2023 22:04:43'!
newWithSignal: aStringOfSignals
	^(Command new) initializeWithSignal: aStringOfSignals.! !
!Command methodsFor: 'nil' stamp: 'af 5/12/2023 22:04:59'!
initializeWithSignal: aStringOfSignals
	signals := aStringOfSignals .! !
!MarsRover methodsFor: 'moving' stamp: 'af 5/12/2023 22:07:10'!
followCommands: commandsToBeFollowed
	^self.! !

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 22:07:42'!
ERROR!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 22:07:42'!
ERROR!
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 22:08:08'!
followCommand: commandsToBeFollowed
	^self.! !

!methodRemoval: MarsRover #followCommands: stamp: 'af 5/12/2023 22:08:13'!
followCommands: commandsToBeFollowed
	^self.!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 22:08:23'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 22:08:28'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 22:08:28'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 22:08:28'!
FAILURE!

'' size!

'' isEmpty!

'ss' isEmpty!

'sadfg' first!

'sadfg' allButFirst !
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 22:14:53' prior: 50656979!
followCommand: commandsToBeFollowed
	^(commandsToBeFollowed isEmpty) 
		ifTrue: [self.] 
		ifFalse: [self followThisCommand: (commandsToBeFollowed first) andContinueWith: (commandsToBeFollowed allButFirst) ].! !

----SNAPSHOT----(12 May 2023 22:15:55) CuisUniversity-5706.image priorSource: 10409743!
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 22:16:30'!
followThisCommand: aSingleCommandToBeFollowed andContinueWith: commandsToBeFollowed! !
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 22:20:06' prior: 50657083!
followThisCommand: aSingleCommandToBeFollowed andContinueWith: commandsToBeFollowed
! !

col := OrderedCollection with: [1,2,4]!

col := OrderedCollection with: (1,2,4)!

col := OrderedCollection with: {1,2,4}!

Object subclass: #Signal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Signal category: 'MarsRover' stamp: 'af 5/12/2023 22:23:28'!
Object subclass: #Signal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Signal subclass: #ValidSignal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #ValidSignal category: 'MarsRover' stamp: 'af 5/12/2023 22:23:47'!
Signal subclass: #ValidSignal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

Signal subclass: #InvalidSignal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #InvalidSignal category: 'MarsRover' stamp: 'af 5/12/2023 22:23:55'!
Signal subclass: #InvalidSignal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

ValidSignal subclass: #Foward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Foward category: 'MarsRover' stamp: 'af 5/12/2023 22:25:12'!
ValidSignal subclass: #Foward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

ValidSignal subclass: #Backwards
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Backwards category: 'MarsRover' stamp: 'af 5/12/2023 22:25:20'!
ValidSignal subclass: #Backwards
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

ValidSignal subclass: #RotateLeft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #RotateLeft category: 'MarsRover' stamp: 'af 5/12/2023 22:25:44'!
ValidSignal subclass: #RotateLeft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

ValidSignal subclass: #RotateRight
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #RotateRight category: 'MarsRover' stamp: 'af 5/12/2023 22:25:52'!
ValidSignal subclass: #RotateRight
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

col := {1,2,4}!

col := {1,2,4}!

col := {1 .2 . 4}!

col!

col allButFirst !

col first !

{} allButFirst !

{} first !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 22:29:02' prior: 50656929!
test18MarsRoverDoesNothingWhenRecievesBlankCommand
	|  commandBlank |
	
	commandBlank := {}.
	
	marsRoverCuriosity followCommand: commandBlank .
	
	self assert: initialPosition equals: (marsRoverCuriosity position ).
	self assert: north equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 22:29:38' prior: 50656916!
test19MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_0_1 commandFoward |
	
	commandFoward := {Foward new }.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	
	marsRoverCuriosity followCommand: commandFoward .
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 22:29:51'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 22:29:51'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 22:29:51'!
FAILURE!

!classRemoval: #Command stamp: 'af 5/12/2023 22:30:11'!
Object subclass: #Command
	instanceVariableNames: 'signals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 22:30:19'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 22:30:19'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 22:30:19'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 22:31:10'!
haltCommands
	^self.
! !
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 22:35:38' prior: 50657089!
followThisCommand: aSingleCommandToBeFollowed andContinueWith: commandsToBeFollowed
	aSingleCommandToBeFollowed beDoneBy: self andContinueWithCommands: commandsToBeFollowed.! !
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 22:36:27' prior: 50657071!
followCommand: commandsToBeFollowed
	^(commandsToBeFollowed isEmpty) 
		ifTrue: [self haltCommands .] 
		
		ifFalse: [self followThisCommand: (commandsToBeFollowed first) andContinueWith: (commandsToBeFollowed allButFirst) ].! !
!Signal methodsFor: 'nil' stamp: 'af 5/12/2023 22:37:22'!
beDoneBy: aMarsRover andContinueWithCommands: commandsToBeFollowedByMarsRover
	^self subclassResponsibility .	! !
!Signal class methodsFor: 'nil' stamp: 'af 5/12/2023 22:39:46'!
newWith: aCharacterThatRepresentsASignal
	^self! !
!Signal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 22:43:51' prior: 50657390!
newWith: aCharacterThatRepresentsASignal
	^(Signal allSubclasses  detect:[:aSignalClass | aSignalClass canHandle: aCharacterThatRepresentsASignal]) newSignal.! !

Signal allSubclasses !
!Signal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 22:45:05'!
canHandle: aCharacterThatRepresentsASignal
	^self subclassResponsibility .! !

'l' detect: {'j'.'k'} ifFound: [true] ifNone: [false]
!

'l' detect: {'j'.'k'} ifFound: [^true] ifNone: [^false]
!

'l' detect: {'j'.'k'}!

{'j'.'k'} contents!

{'j'.'k'}!

{'j'.'k'} detect: 'l'!

'abc'!

s := Set with: 2 with: 4
!

4 in: s
!

Set!

s includes: 2
!

----SNAPSHOT----(12 May 2023 23:00:48) CuisUniversity-5706.image priorSource: 10413747!
!InvalidSignal class methodsFor: 'nil' stamp: 'af 5/12/2023 23:02:19' overrides: 50657404!
canHandle: aCharacterThatRepresentsASignal
	"validos := Set with: '' with: 4
s includes: 2"! !
!InvalidSignal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:03:10' prior: 50657421 overrides: 50657404!
canHandle: aCharacterThatRepresentsASignal
	| validChars |
	validChars := ValidSignal validCharacters.
	"validos := Set with: '' with: 4
s includes: 2"! !
!ValidSignal class methodsFor: 'nil' stamp: 'af 5/12/2023 23:04:43'!
validCharacters! !
!ValidSignal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:05:09' prior: 50657435!
validCharacters
	^Set with: 'l' with: 'r' with: 'f' with: 'b'.! !
!InvalidSignal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:06:16' prior: 50657428 overrides: 50657404!
canHandle: aCharacterThatRepresentsASignal
	| validChars |
	validChars := ValidSignal validCharacters.
	^(validChars includes: aCharacterThatRepresentsASignal) not.
	"validos := Set with: '' with: 4
s includes: 2"! !
!InvalidSignal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:06:36' prior: 50657445 overrides: 50657404!
canHandle: aCharacterThatRepresentsASignal
	| validChars |
	validChars := ValidSignal validCharacters.
	^(validChars includes: aCharacterThatRepresentsASignal) not.! !

InvalidSignal canHandle: $f!

InvalidSignal canHandle: 'f'!
!ValidSignal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:08:03' prior: 50657439!
validCharacters
	^Set with: $l with: $r with: $f with: $b.! !

InvalidSignal canHandle: 'f'!

InvalidSignal canHandle: $f!

InvalidSignal canHandle: $x!
!ValidSignal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:09:09' overrides: 50657404!
canHandle: aCharacterThatRepresentsASignal
	^false.! !
!Backwards class methodsFor: 'nil' stamp: 'af 5/12/2023 23:09:54' overrides: 50657476!
canHandle: aCharacterThatRepresentsASignal
	^aCharacterThatRepresentsASignal=($b).! !
!Foward class methodsFor: 'nil' stamp: 'af 5/12/2023 23:10:05' overrides: 50657476!
canHandle: aCharacterThatRepresentsASignal
	^aCharacterThatRepresentsASignal=($f).! !
!RotateLeft class methodsFor: 'nil' stamp: 'af 5/12/2023 23:10:13' overrides: 50657476!
canHandle: aCharacterThatRepresentsASignal
	^aCharacterThatRepresentsASignal=($l).! !
!RotateRight class methodsFor: 'nil' stamp: 'af 5/12/2023 23:10:20' overrides: 50657476!
canHandle: aCharacterThatRepresentsASignal
	^aCharacterThatRepresentsASignal=($r).! !
!Signal class methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:12:15'!
newSignal
	^(self new).! !

Signal newWith: $d!

Signal newWith: $f!

Signal newWith: $r!

Signal newWith: $l!

Signal newWith: $b!

Signal newWith: $i!
!InvalidSignal methodsFor: 'nil' stamp: 'af 5/12/2023 23:15:30' overrides: 50657384!
beDoneBy: aMarsRover andContinueWithCommands: commandsToBeFollowedByMarsRover
	^aMarsRover haltCommands .	! !
!Backwards methodsFor: 'nil' stamp: 'af 5/12/2023 23:17:09' overrides: 50657384!
beDoneBy: aMarsRover andContinueWithCommands: commandsToBeFollowedByMarsRover
	aMarsRover retroceder.
	aMarsRover followCommand: commandsToBeFollowedByMarsRover.	! !
!Foward methodsFor: 'nil' stamp: 'af 5/12/2023 23:17:22' overrides: 50657384!
beDoneBy: aMarsRover andContinueWithCommands: commandsToBeFollowedByMarsRover
	aMarsRover avanzar .
	aMarsRover followCommand: commandsToBeFollowedByMarsRover.	! !
!RotateLeft methodsFor: 'nil' stamp: 'af 5/12/2023 23:18:07' overrides: 50657384!
beDoneBy: aMarsRover andContinueWithCommands: commandsToBeFollowedByMarsRover
	aMarsRover rotate90DegreesLeft .
	aMarsRover followCommand: commandsToBeFollowedByMarsRover.	! !
!RotateRight methodsFor: 'nil' stamp: 'af 5/12/2023 23:18:21' overrides: 50657384!
beDoneBy: aMarsRover andContinueWithCommands: commandsToBeFollowedByMarsRover
	aMarsRover rotate90DegreesRight .
	aMarsRover followCommand: commandsToBeFollowedByMarsRover.	! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:19:07'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:19:07'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:21:36'!
test20MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_2_2 commands |
	
	commands := {Foward new. Foward new. RotateRight new. Foward new. Foward new.  }.
	coordenada_2_2 := PositionOfMarsRover newPositionAtXCordinate: 2  andYcordinate: 2.
	
	marsRoverCuriosity followCommand: commands .
	self assert: coordenada_2_2 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:21:40'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:21:41'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:22:14'!
test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid
	| coordenada_2_2 commands |
	
	commands := {Foward new. Foward new. RotateRight new. Foward new. Foward new.  }.
	coordenada_2_2 := PositionOfMarsRover newPositionAtXCordinate: 2  andYcordinate: 2.
	
	marsRoverCuriosity followCommand: commands .
	self assert: coordenada_2_2 equals: (marsRoverCuriosity position ).! !

!methodRemoval: MarsRoverTest #test20MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:22:18'!
test20MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_2_2 commands |
	
	commands := {Foward new. Foward new. RotateRight new. Foward new. Foward new.  }.
	coordenada_2_2 := PositionOfMarsRover newPositionAtXCordinate: 2  andYcordinate: 2.
	
	marsRoverCuriosity followCommand: commands .
	self assert: coordenada_2_2 equals: (marsRoverCuriosity position ).!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:25:14'!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal
	| coordenada_2_2 commands |
	
	commands := {Signal newWith: $f}.
	coordenada_2_2 := PositionOfMarsRover newPositionAtXCordinate: 2  andYcordinate: 2.
	
	marsRoverCuriosity followCommand: commands .
	self assert: coordenada_2_2 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:28:29' prior: 50657746!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal
	| coordenada_Minus1_1 commands |
	
	commands := {Signal newWith: $f . Signal newWith: $f . Signal newWith: $b . 
				 Signal newWith: $l.  Signal newWith: $f . Signal newWith: $f .
				 Signal newWith: $b . Signal newWith: $P.  Signal newWith: $f }.
	coordenada_Minus1_1 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 1.
	
	marsRoverCuriosity followCommand: commands .
	self assert: coordenada_Minus1_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:28:32'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:28:32'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:30:50' prior: 50657759!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal
	| coordenada_Minus1_1 commands |
	
	commands := 'ffblffbPf'."{Signal newWith: $f . Signal newWith: $f . Signal newWith: $b . 
				 Signal newWith: $l.  Signal newWith: $f . Signal newWith: $f .
				 Signal newWith: $b . Signal newWith: $P.  Signal newWith: $f }."
	coordenada_Minus1_1:= PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 1.
	
	marsRoverCuriosity followCommand: commands .
	self assert: coordenada_Minus1_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:30:53'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:30:53'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:30:53'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:31:19' prior: 50657860!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal
	| coordenada_Minus1_1 commands |
	
	commands := {Signal newWith: $f . Signal newWith: $f . Signal newWith: $b . 
				 Signal newWith: $l.  Signal newWith: $f . Signal newWith: $f .
				 Signal newWith: $b . Signal newWith: $P.  Signal newWith: $f }.
	coordenada_Minus1_1:= PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 1.
	
	marsRoverCuriosity followCommand: commands .
	self assert: coordenada_Minus1_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:31:22'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:31:22'!
PASSED!

Object subclass: #Command
	instanceVariableNames: 'signals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classDefinition: #Command category: 'MarsRover' stamp: 'af 5/12/2023 23:33:25'!
Object subclass: #Command
	instanceVariableNames: 'signals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!Command class methodsFor: 'nil' stamp: 'af 5/12/2023 23:34:22'!
newWithSignals: aStringOfSignals
 	^(self new) initializeWithSignals: aStringOfSignals.! !
!Command methodsFor: 'nil' stamp: 'af 5/12/2023 23:35:52'!
initializeWithSignals: aStringOfSignals
	! !

sen := 'ffxbr' collect: [:aChar | Signal newWith: aChar ]!
!Command methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:37:49' prior: 50658081!
initializeWithSignals: aStringOfSignals
	signals := aStringOfSignals collect: [:aChar | Signal newWith: aChar ]! !
!Command methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:39:16'!
signals
	^signals ! !

Command newWithSignals: 'ffrlghb' signals!

(Command newWithSignals: 'ffrlghb') signals!
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 23:42:53'!
recieveCommand: aCommand
	^self followCommand: (aCommand signals)! !
!MarsRover methodsFor: 'commands' stamp: 'af 5/12/2023 23:43:15' prior: 50658100!
recieveCommand: aCommand
	^self followCommand: (aCommand signals).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:44:36' prior: 50657965!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal
	| coordenada_Minus1_1 commands |
	
	commands := Command newWithSignals: 'ffblfffbblxrb'.
	coordenada_Minus1_1:= PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 1.
	
	marsRoverCuriosity recieveCommand: commands .
	self assert: coordenada_Minus1_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:44:39'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:45:13' prior: 50658110!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal
	| coordenada_Minus1_1 commands |
	
	commands := Command newWithSignals: 'ffblfffbblxrb'.
	coordenada_Minus1_1:= PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 1.
	
	marsRoverCuriosity recieveCommand: commands .
	self assert: coordenada_Minus1_1 equals: (marsRoverCuriosity position ).
	self assert: south equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:45:15' prior: 50658128!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal
	| coordenada_Minus1_1 commands |
	
	commands := Command newWithSignals: 'ffblfffbblxrb'.
	coordenada_Minus1_1:= PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 1.
	
	marsRoverCuriosity recieveCommand: commands .
	
	self assert: coordenada_Minus1_1 equals: (marsRoverCuriosity position ).
	self assert: south equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:45:22'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'af 5/12/2023 23:46:49'!
moveFoward
	^orientacion avanzarAlMars: self.! !
!Foward methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:46:49' prior: 50657527 overrides: 50657384!
beDoneBy: aMarsRover andContinueWithCommands: commandsToBeFollowedByMarsRover
	aMarsRover moveFoward .
	aMarsRover followCommand: commandsToBeFollowedByMarsRover.	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:46:49' prior: 50656635!
test16MarsRoverMovesFowardCorrectlyWhenFacingSouth
	| coordenada_0_Minus1 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity moveFoward.
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:46:49' prior: 50656030!
test02MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 |
	marsRoverCuriosity moveFoward.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:46:49' prior: 50656469!
test14MarsRoverMovesFowardCorrectlyWhenFacingWest 
	| coordenada_Minus1_0 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity moveFoward.
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:46:49' prior: 50656333!
test12MarsRoverMovesFowardCorrectlyWhenFacingEast 
	| coordenada_1_0 |
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity moveFoward.
	coordenada_1_0 := PositionOfMarsRover newPositionAtXCordinate: 1  andYcordinate: 0.
	self assert: coordenada_1_0 equals: (marsRoverCuriosity position ).! !

!methodRemoval: MarsRover #avanzar stamp: 'af 5/12/2023 23:46:49'!
avanzar
	^orientacion avanzarAlMars: self.!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:46:53'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:46:53'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'af 5/12/2023 23:47:15'!
moveBackwards
	^orientacion retrocederAlMars: self.! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:47:15' prior: 50656393!
test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast 
	| coordenada_Minus1_0 |
	marsRoverCuriosity rotate90DegreesRight .
	marsRoverCuriosity moveBackwards .
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:47:15' prior: 50656726!
test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth
	| coordenada_0_1 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity moveBackwards .
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:47:15' prior: 50656041!
test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth
	| coordenada_0_Minus1 |
	marsRoverCuriosity moveBackwards .
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !
!Backwards methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:47:15' prior: 50657519 overrides: 50657384!
beDoneBy: aMarsRover andContinueWithCommands: commandsToBeFollowedByMarsRover
	aMarsRover moveBackwards.
	aMarsRover followCommand: commandsToBeFollowedByMarsRover.	! !
!MarsRoverTest methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:47:15' prior: 50656550!
test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest 
	| coordenada_1_0 |
	marsRoverCuriosity rotate90DegreesLeft .
	marsRoverCuriosity moveBackwards .
	coordenada_1_0 := PositionOfMarsRover newPositionAtXCordinate: 1  andYcordinate: 0.
	self assert: coordenada_1_0 equals: (marsRoverCuriosity position ).! !

!methodRemoval: MarsRover #retroceder stamp: 'af 5/12/2023 23:47:15'!
retroceder
	^orientacion retrocederAlMars: self.!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:47:19'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:47:19'!
PASSED!
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:48:28'!
moveFowardMarsRover: aMarsRover
^self subclassResponsibility.! !
!East methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 23:48:28' overrides: 50658468!
moveFowardMarsRover: aMarsRover
^(aMarsRover position ) moverUnPuntoEast .! !
!North methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 23:48:28' overrides: 50658468!
moveFowardMarsRover: aMarsRover
^(aMarsRover position) moverUnPuntoNorth .! !
!South methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 23:48:28' overrides: 50658468!
moveFowardMarsRover: aMarsRover
^(aMarsRover position) moverUnPuntoSouth .! !
!West methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 23:48:28' overrides: 50658468!
moveFowardMarsRover: aMarsRover
^(aMarsRover position) moverUnPuntoWest .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:48:28' prior: 50658164!
moveFoward
	^orientacion moveFowardMarsRover: self.! !

!methodRemoval: Orientation #avanzarAlMars: stamp: 'af 5/12/2023 23:48:28'!
avanzarAlMars: aMarsRover
^self subclassResponsibility.!

!methodRemoval: East #avanzarAlMars: stamp: 'af 5/12/2023 23:48:28'!
avanzarAlMars: aMarsRover
^(aMarsRover position ) moverUnPuntoEast .!

!methodRemoval: North #avanzarAlMars: stamp: 'af 5/12/2023 23:48:29'!
avanzarAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoNorth .!

!methodRemoval: South #avanzarAlMars: stamp: 'af 5/12/2023 23:48:29'!
avanzarAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoSouth .!

!methodRemoval: West #avanzarAlMars: stamp: 'af 5/12/2023 23:48:29'!
avanzarAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoWest .!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:48:45'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:48:45'!
PASSED!
!Orientation methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:49:04'!
moveBackwardsMarsRover: aMarsRover
^self subclassResponsibility.! !
!East methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 23:49:04' overrides: 50658605!
moveBackwardsMarsRover: aMarsRover
^(aMarsRover position) moverUnPuntoWest .! !
!North methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 23:49:04' overrides: 50658605!
moveBackwardsMarsRover: aMarsRover
^(aMarsRover position) moverUnPuntoSouth .! !
!South methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 23:49:04' overrides: 50658605!
moveBackwardsMarsRover: aMarsRover
^(aMarsRover position) moverUnPuntoNorth .! !
!West methodsFor: 'marsRoverActions' stamp: 'af 5/12/2023 23:49:04' overrides: 50658605!
moveBackwardsMarsRover: aMarsRover
^(aMarsRover position) moverUnPuntoEast .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:49:04' prior: 50658315!
moveBackwards
	^orientacion moveBackwardsMarsRover: self.! !

!methodRemoval: Orientation #retrocederAlMars: stamp: 'af 5/12/2023 23:49:04'!
retrocederAlMars: aMarsRover
^self subclassResponsibility.!

!methodRemoval: East #retrocederAlMars: stamp: 'af 5/12/2023 23:49:04'!
retrocederAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoWest .!

!methodRemoval: North #retrocederAlMars: stamp: 'af 5/12/2023 23:49:04'!
retrocederAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoSouth .!

!methodRemoval: South #retrocederAlMars: stamp: 'af 5/12/2023 23:49:04'!
retrocederAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoNorth .!

!methodRemoval: West #retrocederAlMars: stamp: 'af 5/12/2023 23:49:04'!
retrocederAlMars: aMarsRover
^(aMarsRover position) moverUnPuntoEast .!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:49:10'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:49:11'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:49:11'!
PASSED!
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:50:06'!
moveOneUnitEast
	^posicionEjeX :=  posicionEjeX+1.! !
!West methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:50:06' prior: 50658628 overrides: 50658605!
moveBackwardsMarsRover: aMarsRover
^(aMarsRover position) moveOneUnitEast .! !
!East methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:50:06' prior: 50658473 overrides: 50658468!
moveFowardMarsRover: aMarsRover
^(aMarsRover position ) moveOneUnitEast .! !

!methodRemoval: PositionOfMarsRover #moverUnPuntoEast stamp: 'af 5/12/2023 23:50:06'!
moverUnPuntoEast
	^posicionEjeX :=  posicionEjeX+1.!
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:50:54'!
moveOneUnitNorth
	^posicionEjeY :=  posicionEjeY+1.! !
!North methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:50:54' prior: 50658479 overrides: 50658468!
moveFowardMarsRover: aMarsRover
^(aMarsRover position) moveOneUnitNorth .! !
!South methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:50:54' prior: 50658622 overrides: 50658605!
moveBackwardsMarsRover: aMarsRover
^(aMarsRover position) moveOneUnitNorth .! !

!methodRemoval: PositionOfMarsRover #moverUnPuntoNorth stamp: 'af 5/12/2023 23:50:54'!
moverUnPuntoNorth
	^posicionEjeY :=  posicionEjeY+1.!
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:51:08'!
moveOneUnitSouth
	^posicionEjeY :=  posicionEjeY-1.! !
!North methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:51:08' prior: 50658616 overrides: 50658605!
moveBackwardsMarsRover: aMarsRover
^(aMarsRover position) moveOneUnitSouth .! !
!South methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:51:08' prior: 50658485 overrides: 50658468!
moveFowardMarsRover: aMarsRover
^(aMarsRover position) moveOneUnitSouth .! !

!methodRemoval: PositionOfMarsRover #moverUnPuntoSouth stamp: 'af 5/12/2023 23:51:08'!
moverUnPuntoSouth
	^posicionEjeY :=  posicionEjeY-1.!
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:51:28'!
moveOneUnitWest
	^posicionEjeX :=  posicionEjeX-1.! !
!West methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:51:28' prior: 50658491 overrides: 50658468!
moveFowardMarsRover: aMarsRover
^(aMarsRover position) moveOneUnitWest .! !
!East methodsFor: 'as yet unclassified' stamp: 'af 5/12/2023 23:51:28' prior: 50658610 overrides: 50658605!
moveBackwardsMarsRover: aMarsRover
^(aMarsRover position) moveOneUnitWest .! !

!methodRemoval: PositionOfMarsRover #moverUnPuntoWest stamp: 'af 5/12/2023 23:51:28'!
moverUnPuntoWest
	^posicionEjeX :=  posicionEjeX-1.!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:51:44'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:51:44'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:52:58' prior: 50657717!
test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid
	| coordenada_2_2 commands |
	
	commands := Command newWithSignals: 'ffrff'.
	coordenada_2_2 := PositionOfMarsRover newPositionAtXCordinate: 2  andYcordinate: 2.
	
	marsRoverCuriosity recieveCommand: commands .
	self assert: coordenada_2_2 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:53:01'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:53:01'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:53:35' prior: 50657189!
test19MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_0_1 commandFoward |
	
	commandFoward := 'f'.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	
	marsRoverCuriosity recieveCommand: commandFoward .
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:53:37'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:53:37'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:53:37'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:53:37'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:53:38'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:53:38'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:53:38'!
ERROR!

(Command newWithSignals: 'b') !

(Command newWithSignals: 'b') signals!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:54:29'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:54:29'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:54:29'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:55:00' prior: 50659009!
test19MarsRoverMovesFowardWhenRecievesCommand
	| coordenada_0_1 commandFoward |
	
	commandFoward := Command  newWithSignals: 'f'.
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	
	marsRoverCuriosity recieveCommand: commandFoward .
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:55:03'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:55:03'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:55:22' prior: 50657177!
test18MarsRoverDoesNothingWhenRecievesBlankCommand
	|  commandBlank |
	
	commandBlank := Command  newWithSignals: ''.
	
	marsRoverCuriosity recieveCommand: commandBlank .
	
	self assert: initialPosition equals: (marsRoverCuriosity position ).
	self assert: north equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:55:23'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:55:24'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:55:24'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:57:52' prior: 50658334!
test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth
	| coordenada_0_1 commands|
	commands := Command  newWithSignals: 'llb'.	
	marsRoverCuriosity recieveCommand: commands.

	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:57:54'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:57:54'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/12/2023 23:58:40' prior: 50658178!
test16MarsRoverMovesFowardCorrectlyWhenFacingSouth
	| coordenada_0_Minus1 commands|
	commands := Command  newWithSignals: 'llf'.	
	marsRoverCuriosity recieveCommand: commands.
	
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/12/2023 23:58:43'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:58:44'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/12/2023 23:58:44'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:58:44'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/12/2023 23:58:44'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/12/2023 23:58:44'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/12/2023 23:58:44'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/12/2023 23:58:44'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/12/2023 23:58:44'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:00:38' prior: 50658370!
test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest 
	| coordenada_1_0 commands |
	
	commands := Command  newWithSignals: 'lb'.	
	marsRoverCuriosity recieveCommand: commands.
	
	coordenada_1_0 := PositionOfMarsRover newPositionAtXCordinate: 1  andYcordinate: 0.
	self assert: coordenada_1_0 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:00:42'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:00:42'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:01:17' prior: 50658205!
test14MarsRoverMovesFowardCorrectlyWhenFacingWest 
	| coordenada_Minus1_0 commands |
	
	commands := Command  newWithSignals: 'lf'.	
	marsRoverCuriosity recieveCommand: commands.
	
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:01:40'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:01:40'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:03:06' prior: 50658320!
test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast 
	| coordenada_Minus1_0 commands |
	commands := Command  newWithSignals: 'rb'.	
	marsRoverCuriosity recieveCommand: commands.
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:03:09'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:03:09'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:03:14' prior: 50659770!
test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast 
	| coordenada_Minus1_0 commands |
	
	commands := Command  newWithSignals: 'rb'.	
	marsRoverCuriosity recieveCommand: commands.
	
	coordenada_Minus1_0 := PositionOfMarsRover newPositionAtXCordinate: -1  andYcordinate: 0.
	self assert: coordenada_Minus1_0 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:04:04' prior: 50658218!
test12MarsRoverMovesFowardCorrectlyWhenFacingEast 
	| coordenada_1_0 commands|
	commands := Command  newWithSignals: 'rf'.	
	marsRoverCuriosity recieveCommand: commands.
	coordenada_1_0 := PositionOfMarsRover newPositionAtXCordinate: 1  andYcordinate: 0.
	self assert: coordenada_1_0 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:04:06'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:04:06'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:04:11' prior: 50659880!
test12MarsRoverMovesFowardCorrectlyWhenFacingEast 
	| coordenada_1_0 commands|
	commands := Command  newWithSignals: 'rf'.	
	marsRoverCuriosity recieveCommand: commands.
	
	coordenada_1_0 := PositionOfMarsRover newPositionAtXCordinate: 1  andYcordinate: 0.
	self assert: coordenada_1_0 equals: (marsRoverCuriosity position ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:04:40' prior: 50656277!
test11MarsRoverFacesNorthWhenRotatingLeftFromEast
	| commands |
	commands := Command  newWithSignals: 'llll'.	
	marsRoverCuriosity recieveCommand: commands.
	self assert: north equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:05:01' prior: 50655960!
test10MarsRoverFacesEastWhenRotatingLeftFromSouth
	| commands |
	commands := Command  newWithSignals: 'lll'.	
	marsRoverCuriosity recieveCommand: commands.
	self assert: east equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:05:04'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:05:04'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:05:17' prior: 50656098!
test09MarsRoverFacesSouthWhenRotatingLeftFromWest
	| commands |
	commands := Command  newWithSignals: 'll'.	
	marsRoverCuriosity recieveCommand: commands.
	self assert: south equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:05:19'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:05:19'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:05:19'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:05:19'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:05:19'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:05:19'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:05:19'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:05:20'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:05:20'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:05:52' prior: 50656091!
test08MarsRoverFacesWestWhenRotatingLeftFromNorth
	marsRoverCuriosity recieveCommand: (Command  newWithSignals: 'l').
	self assert: west equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:05:55'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:05:55'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:06:23' prior: 50656079!
test07MarsRoverFacesNorthWhenRotatingRightFromWest
	| commands |
	commands := Command  newWithSignals: 'rrrr'.	
	marsRoverCuriosity recieveCommand: commands.
	self assert: north equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:06:24'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:06:24'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:06:45' prior: 50656069!
test06MarsRoverFacesWestWhenRotatingRightFromSouth
	| commands |
	commands := Command  newWithSignals: 'rrr'.	
	marsRoverCuriosity recieveCommand: commands.
	self assert: west equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:06:46'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:06:46'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:06:55' prior: 50656060!
test05MarsRoverFacesSouthWhenRotatingRightFromEast
	| commands |
	commands := Command  newWithSignals: 'rr'.	
	marsRoverCuriosity recieveCommand: commands.
	self assert: south equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:06:56'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:06:57'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:06:57'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:07:23' prior: 50656052!
test04MarsRoverFacesEastWhenRotatingRightFromNorth
	| commands |
	commands := Command  newWithSignals: 'r'.	
	marsRoverCuriosity recieveCommand: commands.	self assert: east equals: (marsRoverCuriosity orientation ).! !

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:07:24'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:07:24'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:07:31' prior: 50660571!
test04MarsRoverFacesEastWhenRotatingRightFromNorth
	| commands |
	commands := Command  newWithSignals: 'r'.	
	marsRoverCuriosity recieveCommand: commands.	
	self assert: east equals: (marsRoverCuriosity orientation ).! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:08:02' prior: 50658348!
test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth
	| coordenada_0_Minus1 commands |
	 
	commands := Command  newWithSignals: 'b'.	
	marsRoverCuriosity recieveCommand: commands.
	
	coordenada_0_Minus1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: -1.
	self assert: coordenada_0_Minus1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:08:03'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:08:03'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/13/2023 00:08:33' prior: 50658193!
test02MarsRoverMovesFowardCorrectlyWhenFacingNorth
	| coordenada_0_1 commands |
	
	commands := Command  newWithSignals: 'f'.	
	marsRoverCuriosity recieveCommand: commands.
	
	coordenada_0_1 := PositionOfMarsRover newPositionAtXCordinate: 0  andYcordinate: 1.
	self assert: coordenada_0_1 equals: (marsRoverCuriosity position ).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightFromNorth stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightFromEast stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightFromSouth stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFromWest stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftFromNorth stamp: 'af 5/13/2023 00:08:40'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftFromWest stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftFromSouth stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFromEast stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenRecievesBlankCommand stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverMovesFowardWhenRecievesCommand stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/13/2023 00:08:41'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/13/2023 00:08:41'!
PASSED!

----SNAPSHOT----(13 May 2023 00:08:58) CuisUniversity-5706.image priorSource: 10424536!

----SNAPSHOT----(13 May 2023 11:27:32) CuisUniversity-5706.image priorSource: 10535040!

----STARTUP---- (15 May 2023 11:01:13) as C:\Users\fridm\OneDrive\Escritorio\cuisUniversity\windows64\CuisUniversity-5706.image!


----End fileIn of C:\Users\fridm\OneDrive\Escritorio\IngSoft1-1C2023\05-MarsRover\MarsRover.st----!

!classRemoval: #RotateRight stamp: 'af 5/15/2023 11:02:06'!
ValidSignal subclass: #RotateRight
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #RotateLeft stamp: 'af 5/15/2023 11:02:07'!
ValidSignal subclass: #RotateLeft
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #Foward stamp: 'af 5/15/2023 11:02:07'!
ValidSignal subclass: #Foward
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #Backwards stamp: 'af 5/15/2023 11:02:07'!
ValidSignal subclass: #Backwards
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #ValidSignal stamp: 'af 5/15/2023 11:02:07'!
Signal subclass: #ValidSignal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #InvalidSignal stamp: 'af 5/15/2023 11:02:07'!
Signal subclass: #InvalidSignal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #Signal stamp: 'af 5/15/2023 11:02:07'!
Object subclass: #Signal
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #PositionOfMarsRover stamp: 'af 5/15/2023 11:02:08'!
Object subclass: #PositionOfMarsRover
	instanceVariableNames: 'posicionEjeX posicionEjeY'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #West stamp: 'af 5/15/2023 11:02:08'!
OrientationOfMarsRover subclass: #West
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #South stamp: 'af 5/15/2023 11:02:08'!
OrientationOfMarsRover subclass: #South
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #North stamp: 'af 5/15/2023 11:02:08'!
OrientationOfMarsRover subclass: #North
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #East stamp: 'af 5/15/2023 11:02:08'!
OrientationOfMarsRover subclass: #East
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #OrientationOfMarsRover stamp: 'af 5/15/2023 11:02:09'!
Object subclass: #OrientationOfMarsRover
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #Orientation stamp: 'af 5/15/2023 11:02:09'!
Object subclass: #Orientation
	instanceVariableNames: ''
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRover stamp: 'af 5/15/2023 11:02:09'!
Object subclass: #MarsRover
	instanceVariableNames: 'posicion orientacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #Command stamp: 'af 5/15/2023 11:02:09'!
Object subclass: #Command
	instanceVariableNames: 'signals'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

!classRemoval: #MarsRoverTest stamp: 'af 5/15/2023 11:02:09'!
TestCase subclass: #MarsRoverTest
	instanceVariableNames: 'initialPosition north south east west marsRoverCuriosity initialOrientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!

----End fileIn of C:\Users\fridm\OneDrive\Escritorio\IngSoft1-1C2023\05-MarsRover\MarsRover.st----!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 11:02:31'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 11:02:31'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 12:55:37' prior: 50662061!
assertOrientationOf: aMarsRover afterReceiving: someSignals equals: anExpectedOrientation
	
	| commands |
	
	commands := Command newWithSignals: someSignals.	
	aMarsRover recieveCommand: commands.	
	
	self assert: anExpectedOrientation equals: (aMarsRover orientation).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 12:55:50'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 12:55:51'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 12:55:51'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 12:55:51'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 12:55:51'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 12:55:51'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 12:55:51'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 12:55:51'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 12:55:51'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 12:55:51'!
PASSED!
!MarsRover methodsFor: 'commands' stamp: 'af 5/15/2023 13:02:25' prior: 50662343!
haltCommands
	^self error: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command. '.
! !
!MarsRover methodsFor: 'commands' stamp: 'af 5/15/2023 13:02:38' prior: 50662325!
followCommand: commandsToBeFollowed
	^(commandsToBeFollowed isEmpty) 
		ifTrue: [self .] 	
		ifFalse: [self followThisCommand: (commandsToBeFollowed first) andContinueWith: (commandsToBeFollowed allButFirst) ].! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:02:43'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:02:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:02:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:02:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:02:43'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:02:44'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:02:44'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:02:44'!
ERROR!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:03:58'!
ERROR!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:03:58'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:03:58'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:05:39' prior: 50662247!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: ''.
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:05:45'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:05:45'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:05:45'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:06:22' prior: 50663377!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'.
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:06:24'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:06:30'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:06:30'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'af 5/15/2023 13:06:47' prior: 50663191!
haltCommands
	^self error: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'.
! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:06:53'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:06:53'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:06:53'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:07:22' prior: 50663473!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:07:26'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:07:31'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:07:31'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:07:31'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:07:31'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:07:31'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:07:32'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:07:32'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:07:32'!
ERROR!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:09:24' prior: 50662268!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition|
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.
	self 
		should: [ marsRoverCuriosity recieveCommand: 'flflxrb'] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			self assert: expectedPosition equals: marsRoverCuriosity position.
			self assert: south equals: marsRoverCuriosity orientation .
			 ].
	"self assertAfter: marsRoverCuriosity receives: 'flflxrb' thePositionEquals: expectedPosition andTheOrientationEquals: south."! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:09:27'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:09:27'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:09:27'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:09:48' prior: 50663699!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition|
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.
	self 
		should: [ marsRoverCuriosity recieveCommand: 'flflxrb'] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			self assert: expectedPosition equals: (marsRoverCuriosity position).
			self assert: south equals: marsRoverCuriosity orientation .
			 ].
	"self assertAfter: marsRoverCuriosity receives: 'flflxrb' thePositionEquals: expectedPosition andTheOrientationEquals: south."! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:09:49'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:09:55'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:09:55'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:09:55'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:13:25'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:13:30'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:13:33'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:13:33'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:13:33'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:13:57' prior: 50663813!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition|
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.
	self 
		should: [ marsRoverCuriosity recieveCommand: 'flflxrb'] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			"self assert: expectedPosition equals: (marsRoverCuriosity position)."
			self assert: south equals: marsRoverCuriosity orientation .
			 ].
	"self assertAfter: marsRoverCuriosity receives: 'flflxrb' thePositionEquals: expectedPosition andTheOrientationEquals: south."! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:14:00'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:14:33'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:15:08' prior: 50664027!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition|
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.
	self 
		should: [ marsRoverCuriosity recieveCommand: 'flflxrb'] 
		raise: Exception
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			"self assert: expectedPosition equals: (marsRoverCuriosity position)."
			self assert: south equals: marsRoverCuriosity orientation .
			 ].
	"self assertAfter: marsRoverCuriosity receives: 'flflxrb' thePositionEquals: expectedPosition andTheOrientationEquals: south."! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:15:11'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:15:18' prior: 50664060!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition|
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.
	self 
		should: [ marsRoverCuriosity recieveCommand: 'flflxrb'] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			"self assert: expectedPosition equals: (marsRoverCuriosity position)."
			self assert: south equals: marsRoverCuriosity orientation .
			 ].
	"self assertAfter: marsRoverCuriosity receives: 'flflxrb' thePositionEquals: expectedPosition andTheOrientationEquals: south."! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:15:22'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:15:42' prior: 50664090!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition|
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.
	self 
		should: [ marsRoverCuriosity recieveCommand: 'flflxrrb'] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			"self assert: expectedPosition equals: (marsRoverCuriosity position)."
			self assert: south equals: marsRoverCuriosity orientation .
			 ].
	"self assertAfter: marsRoverCuriosity receives: 'flflxrb' thePositionEquals: expectedPosition andTheOrientationEquals: south."! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:15:46'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'af 5/15/2023 13:16:48' prior: 50663500!
haltCommands
	^self exception: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'.
! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:16:51'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:16:51'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:16:51'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:16:51'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:16:51'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:16:51'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:16:51'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:16:52'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:16:52'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:16:52'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:17:06'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:17:13' prior: 50663592!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Exception 
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:17:14'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:17:14'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:17:14'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:17:22'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:17:23'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:17:23'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:17:23'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:17:27'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:17:35' prior: 50664250!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Exception 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'.
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:17:36'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'af 5/15/2023 13:19:01' prior: 50664150!
haltCommands
	^self exception: ((self class) invalidSignalMessage).
! !
!MarsRover class methodsFor: 'nil' stamp: 'af 5/15/2023 13:19:20'!
invalidSignalMessage
	^'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:19:48'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:19:48'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:19:48'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:20:27' prior: 50664453!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Exception 
		withExceptionDo: [ :error | 
			self assert: error messageText equals: (MarsRover invalidSignalMessage) .
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:20:28'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:21:11' prior: 50664570!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Exception 
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: (MarsRover invalidSignalMessage) ."
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:21:12'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:21:12'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:21:12'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:21:34' prior: 50664120!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition|
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.
	self 
		should: [ marsRoverCuriosity recieveCommand: 'flflxrrb'] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			"self assert: expectedPosition equals: (marsRoverCuriosity position)."
			self assert: south equals: marsRoverCuriosity orientation .
			 ].! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:21:39'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:21:39'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:23:24'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:23:25'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:23:25'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:23:25'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:23:25'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:23:25'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:23:25'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:23:25'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:23:33'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:23:34'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:23:34'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:23:34'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:23:42'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:24:05' prior: 50664587!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'xr'] 
		raise: Exception 
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: (MarsRover invalidSignalMessage) ."
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:24:07'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:24:07'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:24:07'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:24:13' prior: 50664909!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Exception 
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: (MarsRover invalidSignalMessage) ."
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:25:09' prior: 50665014!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Exception 
		withExceptionDo: [ :error | 
			self assert: (error messageText) equals: (MarsRover invalidSignalMessage) .
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:25:10'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:26:20' prior: 50665027!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	
	self 
		should: [ marsRoverCuriosity recieveCommand: 'x'] 
		raise: Exception 
		withExceptionDo: [ :error | 
			self assert:  (MarsRover invalidSignalMessage)   equals: (error messageText) .
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:26:22'!
FAILURE!

posInicial := PositionOfMarsRover newPositionAtXCordinate: 0 andYcordinate: 0
!

posInicial := PositionOfMarsRover newPositionAtXCordinate: 0 andYcordinate: 0
!

posInicial := PositionOfMarsRover newPositionAtXCordinate: 0 andYcordinate: 0
!

orientacionInicial := OrientationOfMarsRover newOrientationAt: 'N'
!

marsRover1 := MarsRover newAtPosition: posInicial andOrientation: orientacionInicial .
!

marsRover1!

marsRover1 recieveCommand: 'x'
!

marsRover1 recieveCommand: 'x'
!

marsRover1 recieveCommand: 'x'
!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:34:25' prior: 50665044!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	| commands |
	commands := Command newWithSignals: 'x'.
	self 
		should: [ marsRoverCuriosity recieveCommand: commands] 
		raise: Exception 
		withExceptionDo: [ :error | 
			self assert:  (MarsRover invalidSignalMessage)   equals: (error messageText) .
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:34:28'!
FAILURE!

commands := Command newWithSignals: 'x'.
!

marsRover1 recieveCommand: commands
!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:35:54'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:35:55'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:35:55'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:35:55'!
FAILURE!
!MarsRover methodsFor: 'commands' stamp: 'af 5/15/2023 13:36:07' prior: 50664473!
haltCommands
	^self exception: (MarsRover invalidSignalMessage).
! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:36:08'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:36:08'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:36:08'!
FAILURE!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:36:29'!
FAILURE!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:36:29'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:36:29'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:37:49'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:37:49'!
FAILURE!

marsRover1 recieveCommand: commands
!
!MarsRover methodsFor: 'commands' stamp: 'af 5/15/2023 13:38:42' prior: 50665183!
haltCommands
	^self error: (MarsRover invalidSignalMessage).
! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:38:43'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:38:43'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:38:43'!
FAILURE!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:38:56'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:39:04' prior: 50665077!
test19MarsRoverDoesNothingWhenReceivesInvalidCommand	| commands |
	commands := Command newWithSignals: 'x'.
	self 
		should: [ marsRoverCuriosity recieveCommand: commands] 
		raise: Error 
		withExceptionDo: [ :error | 
			self assert:  (MarsRover invalidSignalMessage)   equals: (error messageText) .
			self assert: initialOrientation equals: marsRoverCuriosity orientation ].! !

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:39:05'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:39:05'!
FAILURE!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:39:05'!
FAILURE!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:39:58' prior: 50664692!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition commands |
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.	commands := Command newWithSignals: 'flflxrrb'.

	self 
		should: [ marsRoverCuriosity recieveCommand: commands] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			"self assert: expectedPosition equals: (marsRoverCuriosity position)."
			self assert: south equals: marsRoverCuriosity orientation .
			 ].! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:40:03'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:40:04'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:40:04'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:40:04'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:40:04'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:40:04'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:40:04'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:40:04'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:40:04'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:40:09' prior: 50665569!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition commands |
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.	commands := Command newWithSignals: 'flflxrrb'.

	self 
		should: [ marsRoverCuriosity recieveCommand: commands] 
		raise: Error
		withExceptionDo: [ :error | 
			"self assert: error messageText equals: 'An invalid signal was recieved, there are no instructions to be followed. Stoping future signals from the same command.'."
			self assert: expectedPosition equals: (marsRoverCuriosity position).
			self assert: south equals: marsRoverCuriosity orientation .
			 ].! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:40:09'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:40:09'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:40:45' prior: 50665681!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition commands |
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.	commands := Command newWithSignals: 'flflxrrb'.

	self 
		should: [ marsRoverCuriosity recieveCommand: commands] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: MarsRover invalidSignalMessage equals: error messageText.
			self assert: expectedPosition equals: (marsRoverCuriosity position).
			self assert: south equals: marsRoverCuriosity orientation .
			 ].! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:40:47'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:40:47'!
PASSED!
!MarsRoverTest methodsFor: 'tests' stamp: 'af 5/15/2023 13:40:57' prior: 50665792!
test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal

	| expectedPosition commands |
	expectedPosition := PositionOfMarsRover newPositionAtXCoordinate: -1  andYCoordinate: 1.	commands := Command newWithSignals: 'flflxrrb'.

	self 
		should: [ marsRoverCuriosity recieveCommand: commands] 
		raise: Error
		withExceptionDo: [ :error | 
			self assert: (MarsRover invalidSignalMessage) equals: error messageText.
			self assert: expectedPosition equals: (marsRoverCuriosity position).
			self assert: south equals: marsRoverCuriosity orientation .
			 ].! !

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:40:58'!
PASSED!

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:40:59'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:40:59'!
PASSED!
!MarsRover methodsFor: 'moving' stamp: 'af 5/15/2023 13:50:44' prior: 50662351!
moveBackwards
	^posicion  := orientacion moveBackwardsMarsRover: self.! !
!MarsRover methodsFor: 'moving' stamp: 'af 5/15/2023 13:51:00' prior: 50662355!
moveFoward
	^posicion := orientacion moveFowardMarsRover: self.! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:51:03'!
FAILURE!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:51:03'!
FAILURE!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:51:03'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:51:03'!
FAILURE!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:51:03'!
FAILURE!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:51:03'!
FAILURE!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:51:03'!
FAILURE!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:51:04'!
FAILURE!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:51:04'!
FAILURE!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:51:04'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:51:04'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:51:04'!
ERROR!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:51:04'!
FAILURE!
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:52:22' prior: 50662726!
moveOneUnitEast
	^PositionOfMarsRover newPositionAtXCoordinate: (posicionEjeX+1) andYCoordinate: posicionEjeY .! !
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:52:51' prior: 50662731!
moveOneUnitNorth
	^PositionOfMarsRover newPositionAtXCoordinate: (posicionEjeX) andYCoordinate: (posicionEjeY+1).! !
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:53:07' prior: 50662736!
moveOneUnitSouth

	^PositionOfMarsRover newPositionAtXCoordinate: (posicionEjeX) andYCoordinate: (posicionEjeY-1).! !
!PositionOfMarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:53:17' prior: 50662741!
moveOneUnitWest
	^PositionOfMarsRover newPositionAtXCoordinate: (posicionEjeX-1) andYCoordinate: (posicionEjeY).! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:53:20'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:53:20'!
PASSED!

----SNAPSHOT----(15 May 2023 13:58:19) CuisUniversity-5706.image priorSource: 10535129!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'af 5/15/2023 13:58:59'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientacion'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:58:59' prior: 50662412!
position
	^position .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:58:59' prior: 50666015!
moveFoward
	^position := orientacion moveFowardMarsRover: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:58:59' prior: 50662359!
initializeWith: aPosition andOrientation: anOrientation.
	position  := aPosition.
	orientacion  := anOrientation.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:58:59' prior: 50666010!
moveBackwards
	^position  := orientacion moveBackwardsMarsRover: self.! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:59:04'!
PASSED!

!classDefinition: #MarsRover category: 'MarsRover' stamp: 'af 5/15/2023 13:59:46'!
Object subclass: #MarsRover
	instanceVariableNames: 'position orientation'
	classVariableNames: ''
	poolDictionaries: ''
	category: 'MarsRover'!
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50662403!
rotate90DegreesRightFromWest
	orientation := North new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50662378!
rotate90DegreesLeftFromSouth
	orientation := East new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50666231!
moveFoward
	^position := orientation moveFowardMarsRover: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50662408!
orientation
	^orientation .! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50662370!
rotate90DegreesLeftFromEast
	orientation := North new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50666244!
moveBackwards
	^position  := orientation moveBackwardsMarsRover: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50662382!
rotate90DegreesLeftFromWest
	orientation := South new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50662386!
rotate90DegreesRight
	orientation rotate90DegreesRightMarsRover: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50662391!
rotate90DegreesRightFromEast
	orientation := South new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:46' prior: 50666237!
initializeWith: aPosition andOrientation: anOrientation.
	position  := aPosition.
	orientation  := anOrientation.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:47' prior: 50662395!
rotate90DegreesRightFromNorth
	orientation := East new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:47' prior: 50662399!
rotate90DegreesRightFromSouth
	orientation := West new.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:47' prior: 50662365!
rotate90DegreesLeft
	orientation rotate90DegreesLeftMarsRover: self.! !
!MarsRover methodsFor: 'as yet unclassified' stamp: 'af 5/15/2023 13:59:47' prior: 50662374!
rotate90DegreesLeftFromNorth
	orientation := West new.! !

!testRun: #MarsRoverTest #test00MarsRoverIsCorrectlyInitializedInAPosition stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test01MarsRoverIsCorrectlyInitializedInOrientation stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test02MarsRoverMovesFowardCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test03MarsRoverMovesBackwardsCorrectlyWhenFacingNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test04MarsRoverFacesEastWhenRotatingRightOneTimeFromNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test05MarsRoverFacesSouthWhenRotatingRightTwoTimesFromNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test06MarsRoverFacesWestWhenRotatingRightThreeTimesFromNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test07MarsRoverFacesNorthWhenRotatingRightFourTimesFromNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test08MarsRoverFacesWestWhenRotatingLeftOneTimeFromNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test09MarsRoverFacesSouthWhenRotatingLeftTwoTimesFromNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test10MarsRoverFacesEastWhenRotatingLeftThreeTimesFromNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test11MarsRoverFacesNorthWhenRotatingLeftFourTimesFromNorth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test12MarsRoverMovesFowardCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test13MarsRoverMovesBackwardsCorrectlyWhenFacingEast stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test14MarsRoverMovesFowardCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test15MarsRoverMovesBackwardsCorrectlyWhenFacingWest stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test16MarsRoverMovesFowardCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test17MarsRoverMovesBackwardsCorrectlyWhenFacingSouth stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test18MarsRoverDoesNothingWhenReceivesBlankCommand stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test19MarsRoverDoesNothingWhenReceivesInvalidCommand stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test20MarsRoverMovesFowardRotatesAndContinuesCommandWhenAllAreValid stamp: 'af 5/15/2023 13:59:50'!
PASSED!

!testRun: #MarsRoverTest #test21MarsRoverFollowsCommandsOnlyUntilLastValidSignal stamp: 'af 5/15/2023 13:59:50'!
PASSED!